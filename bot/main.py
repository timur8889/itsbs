import logging
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    try:
        from config import BotConfig
        from database.models import Database
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    except ImportError as e:
        logger.error(f"Import error: {e}")
        return

    config = BotConfig()
    
    if not config.token:
        logger.error("BOT_TOKEN not set")
        print("‚ùå Error: BOT_TOKEN not found in .env file")
        return
    
    print(f"ü§ñ Starting IT Support Bot for factory 'Kontakt'...")
    print(f"üîë Token: {config.token[:10]}...")
    print(f"üë®‚Äçüíº Admins: {config.admin_ids}")
    print(f"üíæ Database: {config.db_url}")
    
    try:
        # Initialize database
        db = Database(config.db_url)
        print("‚úÖ Database initialized")
        
        # Create application
        application = Application.builder().token(config.token).build()
        
        # User data storage
        user_sessions = {}
        
        # Start command
        async def start(update, context):
            user = update.effective_user
            welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ –Ø - –±–æ—Ç IT-–æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ "–ö–æ–Ω—Ç–∞–∫—Ç". 
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
            ]
            
            if user.id in config.admin_ids:
                keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.message:
                await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
        # Help command
        async def help_command(update, context):
            help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫:
üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π
üíª –ü–û - –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã  
üåê –°–µ—Ç—å - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –¥–æ—Å—Ç—É–ø—ã –∏ –ø–∞—Ä–æ–ª–∏
‚ùì –î—Ä—É–≥–æ–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: IT-–æ—Ç–¥–µ–ª, —Ç–µ–ª. 1234"""
            
            if update.message:
                await update.message.reply_text(help_text)
            else:
                await update.callback_query.edit_message_text(help_text)
        
        # Show user requests
        async def show_my_requests(update, context):
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                requests = session.query(ITRequest).filter(
                    ITRequest.user_id == user_id
                ).order_by(ITRequest.created_at.desc()).limit(10).all()
                
                if not requests:
                    await query.edit_message_text(
                        "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request"),
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                        ]])
                    )
                    return
                
                text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
                for req in requests:
                    status_icons = {
                        'new': 'üÜï',
                        'in_progress': 'üîÑ',
                        'on_hold': '‚è∏Ô∏è',
                        'resolved': '‚úÖ',
                        'closed': 'üìã'
                    }
                    
                    priority_icons = {
                        'low': 'üü¢',
                        'medium': 'üü°', 
                        'high': 'üî¥',
                        'critical': 'üí•'
                    }
                    
                    status_icon = status_icons.get(req.status.value, '‚ùì')
                    priority_icon = priority_icons.get(req.priority.value, '‚ö™')
                    
                    text += f"{status_icon} {priority_icon} –ó–∞—è–≤–∫–∞ #{req.id}\n"
                    text += f"   üìù {req.title}\n"
                    text += f"   üè∑Ô∏è {req.category.value} | üìä {req.status.value}\n"
                    text += f"   üïê {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                
                keyboard = [
                    [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                    [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting user requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()

        # ADMIN PANEL FUNCTIONS

        # Admin panel main menu
        async def admin_panel(update, context):
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            if user_id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", show_alert=True)
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                from sqlalchemy import func
                
                # Get statistics
                total = session.query(ITRequest).count()
                new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
                in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
                resolved_today = session.query(ITRequest).filter(
                    ITRequest.status == Status.RESOLVED,
                    func.date(ITRequest.updated_at) == func.current_date()
                ).count()
                
                stats_text = f"""üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ IT-–æ—Ç–¥–µ–ª–∞

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {new}
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {resolved_today}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
                
                keyboard = [
                    [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                    [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_new_requests")],
                    [InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç–µ", callback_data="admin_in_progress")],
                    [InlineKeyboardButton("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
                    [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(stats_text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error in admin panel: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            finally:
                session.close()

        # Admin: Show all requests
        async def admin_all_requests(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                requests = session.query(ITRequest).order_by(
                    ITRequest.created_at.desc()
                ).limit(15).all()
                
                if not requests:
                    await query.edit_message_text(
                        "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
                        ]])
                    )
                    return
                
                text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ:\n\n"
                
                for req in requests:
                    status_icons = {
                        'new': 'üÜï', 
                        'in_progress': 'üîÑ', 
                        'on_hold': '‚è∏Ô∏è', 
                        'resolved': '‚úÖ', 
                        'closed': 'üìã'
                    }
                    priority_icons = {
                        'low': 'üü¢', 
                        'medium': 'üü°', 
                        'high': 'üî¥', 
                        'critical': 'üí•'
                    }
                    
                    status_icon = status_icons.get(req.status.value, '‚ùì')
                    priority_icon = priority_icons.get(req.priority.value, '‚ö™')
                    
                    text += f"{status_icon}{priority_icon} #{req.id}: {req.title}\n"
                    text += f"   üë§ {req.full_name} | üè¢ {req.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                    text += f"   üïê {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                
                # Create buttons for first 5 requests
                keyboard = []
                for req in requests[:5]:
                    keyboard.append([
                        InlineKeyboardButton(f"üìù #{req.id} - {req.title[:15]}...", 
                                          callback_data=f"admin_view_{req.id}")
                    ])
                
                keyboard.extend([
                    [InlineKeyboardButton("üÜï –¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data="admin_new_requests")],
                    [InlineKeyboardButton("üîÑ –¢–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="admin_in_progress")],
                    [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting all requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()

        # Admin: View specific request
        async def admin_view_request(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            request_id = int(query.data.replace('admin_view_', ''))
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if not request:
                    await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return
                
                # Format request details
                status_icons = {
                    'new': 'üÜï', 
                    'in_progress': 'üîÑ', 
                    'on_hold': '‚è∏Ô∏è', 
                    'resolved': '‚úÖ', 
                    'closed': 'üìã'
                }
                priority_icons = {
                    'low': 'üü¢', 
                    'medium': 'üü°', 
                    'high': 'üî¥', 
                    'critical': 'üí•'
                }
                
                category_names = {
                    'hardware': 'üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                    'software': 'üíª –ü–û',
                    'network': 'üåê –°–µ—Ç—å',
                    'account': 'üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏',
                    'other': '‚ùì –î—Ä—É–≥–æ–µ'
                }
                
                text = f"""üìã –ó–ê–Ø–í–ö–ê #{request.id}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ <b>–°–æ—Ç—Ä—É–¥–Ω–∏–∫:</b> {request.full_name}
üì± <b>Username:</b> @{request.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {request.contact_phone}
üè¢ <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {request.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_names.get(request.category.value, request.category.value)}
üö® <b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> {priority_icons.get(request.priority.value)} {request.priority.value}
üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_icons.get(request.status.value)} {request.status.value}

üìù <b>–¢–µ–º–∞:</b> {request.title}
üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{request.description}"""
                
                if request.assigned_to:
                    text += f"\n\nüë®‚Äçüíº <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> {request.assigned_to}"
                
                if request.solution:
                    text += f"\n\nüí° <b>–†–µ—à–µ–Ω–∏–µ:</b>\n{request.solution}"
                
                text += f"\n\n‚è∞ <b>–°–æ–∑–¥–∞–Ω–∞:</b> {request.created_at.strftime('%d.%m.%Y %H:%M')}"
                if request.updated_at != request.created_at:
                    text += f"\n‚úèÔ∏è <b>–û–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {request.updated_at.strftime('%d.%m.%Y %H:%M')}"
                
                # Create action buttons based on current status
                keyboard = []
                
                if request.status.value == 'new':
                    keyboard.append([
                        InlineKeyboardButton("üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_take_{request.id}")
                    ])
                
                if request.status.value in ['new', 'in_progress']:
                    keyboard.append([
                        InlineKeyboardButton("‚è∏Ô∏è –ù–∞ –ø–∞—É–∑—É", callback_data=f"admin_hold_{request.id}"),
                        InlineKeyboardButton("‚úÖ –†–µ—à–µ–Ω–æ", callback_data=f"admin_resolve_{request.id}")
                    ])
                
                if request.status.value in ['on_hold', 'resolved']:
                    keyboard.append([
                        InlineKeyboardButton("üîÑ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_retake_{request.id}")
                    ])
                
                if request.status.value == 'resolved':
                    keyboard.append([
                        InlineKeyboardButton("üìã –ó–∞–∫—Ä—ã—Ç—å", callback_data=f"admin_close_{request.id}")
                    ])
                
                keyboard.append([
                    InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"admin_solution_{request.id}")
                ])
                keyboard.append([
                    InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests"),
                    InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
                
            except Exception as e:
                logger.error(f"Error viewing request {request_id}: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")
            finally:
                session.close()

        # Admin: Take request
        async def admin_take_request(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            request_id = int(query.data.replace('admin_take_', ''))
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if request:
                    request.status = Status.IN_PROGRESS
                    request.assigned_to = query.from_user.full_name
                    session.commit()
                    
                    # Notify user
                    try:
                        await context.bot.send_message(
                            chat_id=request.user_id,
                            text=f"üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É\n\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {query.from_user.full_name}"
                        )
                    except Exception as e:
                        logger.error(f"Could not notify user: {e}")
                    
                    await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                    # Refresh the request view
                    await admin_view_request(update, context)
                else:
                    await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    
            except Exception as e:
                logger.error(f"Error taking request: {e}")
                session.rollback()
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏", show_alert=True)
            finally:
                session.close()

        # Admin: Update request status
        async def admin_update_status(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            action, request_id = query.data.split('_')[1:3]
            request_id = int(request_id)
            
            status_map = {
                'hold': 'on_hold',
                'resolve': 'resolved', 
                'retake': 'in_progress',
                'close': 'closed'
            }
            
            status_messages = {
                'hold': "‚è∏Ô∏è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                'resolve': "‚úÖ —Ä–µ—à–µ–Ω–∞", 
                'retake': "üîÑ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ —Ä–∞–±–æ—Ç—É",
                'close': "üìã –∑–∞–∫—Ä—ã—Ç–∞"
            }
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if request and action in status_map:
                    new_status = status_map[action]
                    request.status = Status(new_status)
                    
                    if action == 'retake':
                        request.assigned_to = query.from_user.full_name
                    
                    session.commit()
                    
                    # Notify user
                    try:
                        await context.bot.send_message(
                            chat_id=request.user_id,
                            text=f"üì¢ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} {status_messages[action]}"
                        )
                    except Exception as e:
                        logger.error(f"Could not notify user: {e}")
                    
                    await query.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")
                    # Refresh the request view
                    await admin_view_request(update, context)
                else:
                    await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
                    
            except Exception as e:
                logger.error(f"Error updating status: {e}")
                session.rollback()
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
            finally:
                session.close()

        # Admin: Add solution
        async def admin_add_solution(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            request_id = int(query.data.replace('admin_solution_', ''))
            context.user_data['editing_solution_for'] = request_id
            
            await query.message.reply_text(
                "üí° –í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ:"
            )

        # Save solution
        async def save_solution(update, context):
            if 'editing_solution_for' not in context.user_data:
                return
            
            request_id = context.user_data['editing_solution_for']
            solution = update.message.text
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if request:
                    request.solution = solution
                    session.commit()
                    
                    # Notify user
                    try:
                        await context.bot.send_message(
                            chat_id=request.user_id,
                            text=f"üí° –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ:\n\n{solution}"
                        )
                    except Exception as e:
                        logger.error(f"Could not notify user: {e}")
                    
                    await update.message.reply_text("‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    
                    # Clear editing state
                    context.user_data.pop('editing_solution_for', None)
                else:
                    await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
            except Exception as e:
                logger.error(f"Error saving solution: {e}")
                session.rollback()
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—à–µ–Ω–∏—è")
            finally:
                session.close()

        # Admin: Detailed stats
        async def admin_detailed_stats(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status, Category, Priority
                from sqlalchemy import func
                from datetime import datetime, date, timedelta
                
                # Basic counts
                total = session.query(ITRequest).count()
                new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
                in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
                resolved = session.query(ITRequest).filter(ITRequest.status == Status.RESOLVED).count()
                closed = session.query(ITRequest).filter(ITRequest.status == Status.CLOSED).count()
                
                # Today's stats
                today = date.today()
                today_requests = session.query(ITRequest).filter(
                    func.date(ITRequest.created_at) == today
                ).count()
                today_resolved = session.query(ITRequest).filter(
                    func.date(ITRequest.updated_at) == today,
                    ITRequest.status.in_([Status.RESOLVED, Status.CLOSED])
                ).count()
                
                # This week stats
                week_ago = today - timedelta(days=7)
                week_requests = session.query(ITRequest).filter(
                    ITRequest.created_at >= week_ago
                ).count()
                
                # Category stats
                category_stats = []
                for category in Category:
                    count = session.query(ITRequest).filter(ITRequest.category == category).count()
                    if count > 0:
                        category_name = {
                            'hardware': 'üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
                            'software': 'üíª –ü–û',
                            'network': 'üåê –°–µ—Ç—å', 
                            'account': 'üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏',
                            'other': '‚ùì –î—Ä—É–≥–æ–µ'
                        }.get(category.value, category.value)
                        category_stats.append(f"‚Ä¢ {category_name}: {count}")
                
                # Priority stats
                priority_stats = []
                for priority in Priority:
                    count = session.query(ITRequest).filter(ITRequest.priority == priority).count()
                    if count > 0:
                        priority_name = {
                            'low': 'üü¢ –ù–∏–∑–∫–∏–π',
                            'medium': 'üü° –°—Ä–µ–¥–Ω–∏–π',
                            'high': 'üî¥ –í—ã—Å–æ–∫–∏–π',
                            'critical': 'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π'
                        }.get(priority.value, priority.value)
                        priority_stats.append(f"‚Ä¢ {priority_name}: {count}")
                
                stats_text = f"""üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT-–æ—Ç–¥–µ–ª–∞

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {new}
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–æ: {resolved}
‚Ä¢ üìã –ó–∞–∫—Ä—ã—Ç–æ: {closed}

üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è:
‚Ä¢ üì• –°–µ–≥–æ–¥–Ω—è: {today_requests} –Ω–æ–≤—ã—Ö, {today_resolved} —Ä–µ—à–µ–Ω–æ
‚Ä¢ üìà –ó–∞ –Ω–µ–¥–µ–ª—é: {week_requests} –∑–∞—è–≤–æ–∫

üìÇ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
{chr(10).join(category_stats)}

üö® –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:
{chr(10).join(priority_stats)}"""
                
                keyboard = [
                    [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                    [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(stats_text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting detailed stats: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            finally:
                session.close()

        # Admin: Filtered requests
        async def admin_filtered_requests(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.from_user.id not in config.admin_ids:
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            filter_type = query.data.replace('admin_', '').replace('_requests', '')
            
            status_map = {
                'new': 'new',
                'in_progress': 'in_progress'
            }
            
            filter_names = {
                'new': 'üÜï –ù–æ–≤—ã–µ',
                'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ'
            }
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                
                if filter_type in status_map:
                    requests = session.query(ITRequest).filter(
                        ITRequest.status == Status(status_map[filter_type])
                    ).order_by(ITRequest.created_at.desc()).limit(20).all()
                    
                    text = f"{filter_names[filter_type]} –∑–∞—è–≤–∫–∏:\n\n"
                    
                    if not requests:
                        text += "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç"
                    else:
                        for req in requests:
                            status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ'}
                            priority_icons = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üî¥', 'critical': 'üí•'}
                            
                            text += f"{status_icons[req.status.value]} {priority_icons[req.priority.value]} #{req.id}: {req.title}\n"
                            text += f"   üë§ {req.full_name} | üè¢ {req.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                            text += f"   üïê {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                    
                    keyboard = []
                    for req in requests[:5]:
                        keyboard.append([
                            InlineKeyboardButton(f"üìù #{req.id}", callback_data=f"admin_view_{req.id}")
                        ])
                    
                    keyboard.extend([
                        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                    ])
                    
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting filtered requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()

        # REQUEST CREATION SYSTEM

        # Conversation states
        CATEGORY, PRIORITY, TITLE, DESCRIPTION, LOCATION, PHONE = range(6)
        
        # Start creating request
        async def start_create_request(update, context):
            query = update.callback_query
            await query.answer()
            
            # Initialize user data
            user_id = query.from_user.id
            user_sessions[user_id] = {
                'step': 'category',
                'category': None,
                'priority': None,
                'title': None,
                'description': None,
                'location': None,
                'contact_phone': None
            }
            
            # Ask for category
            keyboard = [
                [InlineKeyboardButton("üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="cat_hardware")],
                [InlineKeyboardButton("üíª –ü–û", callback_data="cat_software")],
                [InlineKeyboardButton("üåê –°–µ—Ç—å", callback_data="cat_network")],
                [InlineKeyboardButton("üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="cat_account")],
                [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="cat_other")],
                [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
                reply_markup=reply_markup
            )
            return CATEGORY

        # Handle category selection
        async def handle_category(update, context):
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            if user_id not in user_sessions:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            category = query.data.replace('cat_', '')
            user_sessions[user_id]['category'] = category
            user_sessions[user_id]['step'] = 'priority'
            
            # Ask for priority
            keyboard = [
                [InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="pri_low")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="pri_medium")],
                [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="pri_high")],
                [InlineKeyboardButton("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", callback_data="pri_critical")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üö® –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:",
                reply_markup=reply_markup
            )
            return PRIORITY

        # Handle priority selection
        async def handle_priority(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.data == 'back_to_categories':
                return await start_create_request(update, context)
            
            user_id = query.from_user.id
            if user_id not in user_sessions:
                await query.edit_message_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            priority = query.data.replace('pri_', '')
            user_sessions[user_id]['priority'] = priority
            user_sessions[user_id]['step'] = 'title'
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º—ã—à—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ'"
            )
            return TITLE

        # Handle title input
        async def handle_title(update, context):
            user_id = update.effective_user.id
            if user_id not in user_sessions:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            title = update.message.text.strip()
            if len(title) > 200:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return TITLE
            
            user_sessions[user_id]['title'] = title
            user_sessions[user_id]['step'] = 'description'
            
            await update.message.reply_text(
                "üìÑ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
            )
            return DESCRIPTION

        # Handle description input
        async def handle_description(update, context):
            user_id = update.effective_user.id
            if user_id not in user_sessions:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            description = update.message.text.strip()
            if len(description) < 10:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return DESCRIPTION
            
            user_sessions[user_id]['description'] = description
            user_sessions[user_id]['step'] = 'location'
            
            await update.message.reply_text(
                "üè¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–¶–µ—Ö ‚Ññ5, –∫–∞–±–∏–Ω–µ—Ç 203' –∏–ª–∏ '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å, 3 —ç—Ç–∞–∂'"
            )
            return LOCATION

        # Handle location input
        async def handle_location(update, context):
            user_id = update.effective_user.id
            if user_id not in user_sessions:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            location = update.message.text.strip()
            user_sessions[user_id]['location'] = location
            user_sessions[user_id]['step'] = 'phone'
            
            await update.message.reply_text(
                "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
                "–§–æ—Ä–º–∞—Ç: +7 XXX XXX-XX-XX –∏–ª–∏ 8 XXX XXX-XX-XX"
            )
            return PHONE

        # Handle phone input and save request
        async def handle_phone(update, context):
            user_id = update.effective_user.id
            if user_id not in user_sessions:
                await update.message.reply_text("‚ùå –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
                return ConversationHandler.END
            
            phone = update.message.text.strip()
            
            # Simple phone validation
            if len(phone) < 5:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return PHONE
            
            user_data = user_sessions[user_id]
            user_data['contact_phone'] = phone
            
            # Save to database
            session = db.get_session()
            try:
                from database.models import ITRequest, Category, Priority
                
                new_request = ITRequest(
                    user_id=user_id,
                    username=update.effective_user.username,
                    full_name=update.effective_user.full_name,
                    category=Category(user_data['category']),
                    priority=Priority(user_data['priority']),
                    title=user_data['title'],
                    description=user_data['description'],
                    location=user_data['location'],
                    contact_phone=user_data['contact_phone']
                )
                
                session.add(new_request)
                session.commit()
                
                # Notify admins
                await notify_admins(context, new_request)
                
                await update.message.reply_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{new_request.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ IT-–æ—Ç–¥–µ–ª. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
                    f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'"
                )
                
            except Exception as e:
                logger.error(f"Error saving request: {e}")
                session.rollback()
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            finally:
                session.close()
                # Clean up user data
                user_sessions.pop(user_id, None)
            
            return ConversationHandler.END

        async def notify_admins(context, request):
            from config import BotConfig
            
            notification_text = f"""üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request.id}

üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {request.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.contact_phone}
üè¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {request.location}

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.value}
üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {request.priority.value}

üìù –¢–µ–º–∞: {request.title}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}"""
            
            for admin_id in BotConfig().admin_ids:
                try:
                    keyboard = [[InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"admin_view_{request.id}")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        reply_markup=reply_markup
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}")

        # Cancel conversation
        async def cancel(update, context):
            user_id = update.effective_user.id
            user_sessions.pop(user_id, None)
            await update.message.reply_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END

        # Main button handler
        async def button_handler(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.data == 'create_request':
                await start_create_request(update, context)
            elif query.data == 'help':
                await help_command(update, context)
            elif query.data == 'my_requests':
                await show_my_requests(update, context)
            elif query.data == 'admin_panel':
                await admin_panel(update, context)
            elif query.data == 'admin_all_requests':
                await admin_all_requests(update, context)
            elif query.data == 'admin_new_requests':
                await admin_filtered_requests(update, context)
            elif query.data == 'admin_in_progress':
                await admin_filtered_requests(update, context)
            elif query.data == 'admin_detailed_stats':
                await admin_detailed_stats(update, context)
            elif query.data.startswith('admin_view_'):
                await admin_view_request(update, context)
            elif query.data.startswith('admin_take_'):
                await admin_take_request(update, context)
            elif query.data.startswith('admin_hold_') or query.data.startswith('admin_resolve_') or query.data.startswith('admin_retake_') or query.data.startswith('admin_close_'):
                await admin_update_status(update, context)
            elif query.data.startswith('admin_solution_'):
                await admin_add_solution(update, context)
            elif query.data.startswith('cat_'):
                await handle_category(update, context)
            elif query.data.startswith('pri_'):
                await handle_priority(update, context)
            elif query.data == 'main_menu':
                await start(update, context)
            elif query.data == 'back_to_categories':
                await start_create_request(update, context)

        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("admin", admin_panel))
        
        # Conversation handler for creating requests
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(handle_category, pattern='^cat_')],
            states={
                CATEGORY: [CallbackQueryHandler(handle_category, pattern='^cat_')],
                PRIORITY: [CallbackQueryHandler(handle_priority, pattern='^pri_|back_to_categories')],
                TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_title)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)],
                LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel),
                CallbackQueryHandler(cancel, pattern='^main_menu$')
            ]
        )
        application.add_handler(conv_handler)
        
        # Button handlers
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # Solution handler
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_solution))
        
        print("‚úÖ Bot initialized successfully")
        print("üîÑ Starting polling...")
        
        # Start the bot
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"‚ùå Critical error: {e}")

if __name__ == '__main__':
    main()
