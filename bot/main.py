import logging
import sqlite3
import os
import json
import re
import time
import asyncio
import shutil
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from io import BytesIO
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Tuple, Set, Any
from functools import lru_cache
from enum import Enum
from dataclasses import dataclass
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

class ColoredFormatter(logging.Formatter):
    """üé® –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[41m', # Red background
        'RESET': '\033[0m'      # Reset
    }

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        message = super().format(record)
        return f"{log_color}{message}{self.COLORS['RESET']}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('bot.log', encoding='utf-8')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

setup_logging()
logger = logging.getLogger(__name__)

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    SUPER_ADMIN_IDS = [int(x) for x in os.getenv('SUPER_ADMIN_IDS', '5024165375').split(',')]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ (—Ç–æ–ª—å–∫–æ IT –æ—Ç–¥–µ–ª)
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375]
    }
    
    # Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
    GOOGLE_SHEET_NAME = os.getenv('GOOGLE_SHEET_NAME', 'IT –ó–∞—è–≤–∫–∏ –ó–∞–≤–æ–¥ –ö–æ–Ω—Ç–∞–∫—Ç')
    
    DB_PATH = "requests.db"
    
    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ENABLE_AI_ANALYSIS = True
    ENABLE_RATINGS = True
    AUTO_BACKUP_HOURS = 24
    NOTIFICATION_HOURS_START = 9
    NOTIFICATION_HOURS_END = 22
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return any(user_id in admins for admins in Config.ADMIN_CHAT_IDS.values()) or user_id in Config.SUPER_ADMIN_IDS
    
    @staticmethod
    def validate_config():
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not Config.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        required_vars = ['BOT_TOKEN']
        for var in required_vars:
            if not getattr(Config, var):
                raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")

# ==================== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

class GoogleSheetsManager:
    """üìä –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        self.credentials = None
        self.client = None
        self.sheet = None
        self.setup_sheets()
    
    def setup_sheets(self):
        """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        try:
            if not Config.GOOGLE_SHEETS_CREDENTIALS:
                logger.warning("‚ùå Google Sheets credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü–∞—Ä—Å–∏–º JSON credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
            creds_dict = json.loads(Config.GOOGLE_SHEETS_CREDENTIALS)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
            scope = ['https://spreadsheets.google.com/feeds', 
                    'https://www.googleapis.com/auth/drive']
            
            credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
            self.client = gspread.authorize(credentials)
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.sheet = self.client.open(Config.GOOGLE_SHEET_NAME).sheet1
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            headers = ['ID', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', '–¢–µ–ª–µ—Ñ–æ–Ω', '–ü—Ä–æ–±–ª–µ–º–∞', 
                      '–°—Ç–∞—Ç—É—Å', '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–û—Ü–µ–Ω–∫–∞']
            
            if not self.sheet.get('A1:J1'):
                self.sheet.append_row(headers)
            
            logger.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets: {e}")
    
    def add_request_to_sheet(self, request_data: Dict):
        """üìù –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets"""
        try:
            if not self.sheet:
                logger.warning("Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            row_data = [
                request_data['id'],
                request_data['created_at'],
                request_data['username'],
                request_data['phone'],
                request_data['problem'],
                request_data['status'],
                request_data.get('assigned_admin', ''),
                request_data.get('completed_at', ''),
                request_data.get('admin_comment', ''),
                request_data.get('rating', '')
            ]
            
            self.sheet.append_row(row_data)
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_data['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ Google Sheets: {e}")
    
    def update_request_in_sheet(self, request_data: Dict):
        """üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets"""
        try:
            if not self.sheet:
                return
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å ID –∑–∞—è–≤–∫–∏
            cell = self.sheet.find(str(request_data['id']))
            if cell:
                row = cell.row
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                update_data = [
                    request_data['id'],
                    request_data['created_at'],
                    request_data['username'],
                    request_data['phone'],
                    request_data['problem'],
                    request_data['status'],
                    request_data.get('assigned_admin', ''),
                    request_data.get('completed_at', ''),
                    request_data.get('admin_comment', ''),
                    request_data.get('rating', '')
                ]
                
                for i, value in enumerate(update_data, 1):
                    self.sheet.update_cell(row, i, value)
                
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_data['id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ Google Sheets: {e}")

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class EnhancedDatabase:
    """üóÉÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_enhanced_db()
    
    def init_enhanced_db(self):
        """üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    phone TEXT,
                    department TEXT DEFAULT 'üíª IT –æ—Ç–¥–µ–ª',
                    problem TEXT,
                    photo_id TEXT,
                    status TEXT DEFAULT 'new',
                    urgency TEXT DEFAULT 'üí§ –ù–ï –°–†–û–ß–ù–û',
                    created_at TEXT,
                    assigned_at TEXT,
                    assigned_admin TEXT,
                    completed_at TEXT,
                    admin_comment TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS request_media (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    file_id TEXT,
                    file_type TEXT,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            conn.commit()
    
    def add_request(self, user_id: int, username: str, phone: str, problem: str, 
                   photo_id: str = None, urgency: str = 'üí§ –ù–ï –°–†–û–ß–ù–û') -> int:
        """üìù –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, phone, problem, photo_id, urgency, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, username, phone, problem, photo_id, urgency, datetime.now().isoformat()))
            request_id = cursor.lastrowid
            conn.commit()
            return request_id
    
    def add_media_to_request(self, request_id: int, file_id: str, file_type: str):
        """üìé –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO request_media (request_id, file_id, file_type, created_at)
                VALUES (?, ?, ?, ?)
            ''', (request_id, file_id, file_type, datetime.now().isoformat()))
            conn.commit()
    
    def get_request_media(self, request_id: int) -> List[Dict]:
        """üìÇ –ü–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM request_media 
                WHERE request_id = ? 
                ORDER BY created_at
            ''', (request_id,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def update_admin_comment(self, request_id: int, comment: str):
        """üí¨ –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE requests 
                SET admin_comment = ?
                WHERE id = ?
            ''', (comment, request_id))
            conn.commit()
    
    def get_requests(self, status: str = None, limit: int = 50) -> List[Dict]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            query = "SELECT * FROM requests WHERE 1=1"
            params = []
            
            if status:
                query += " AND status = ?"
                params.append(status)
            
            query += " ORDER BY created_at DESC LIMIT ?"
            params.append(limit)
            
            cursor.execute(query, params)
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def get_request(self, request_id: int) -> Optional[Dict]:
        """üîç –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return None
    
    def update_request_status(self, request_id: int, status: str, admin_name: str = None):
        """üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if status == 'in_progress' and admin_name:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, assigned_at = ?, assigned_admin = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), admin_name, request_id))
            elif status == 'completed':
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?
                    WHERE id = ?
                ''', (status, request_id))
            
            conn.commit()
    
    def get_user_requests(self, user_id: int) -> List[Dict]:
        """üìÇ –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC
            ''', (user_id,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = EnhancedDatabase(Config.DB_PATH)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
sheets_manager = GoogleSheetsManager()

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    welcome_text = (
        "üéâ *–†–∞–¥—ã –≤–∏–¥–µ—Ç—å –í–∞—Å!*\n\n"
        "–í—ã –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –≤ IT –æ—Ç–¥–µ–ª –∑–∞–≤–æ–¥–∞ *–ö–æ–Ω—Ç–∞–∫—Ç*! ü§ñ\n\n"
        "–ë—É–¥–µ–º —Ä–∞–¥—ã –í–∞–º –ø–æ–º–æ—á—å —Å —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º. "
        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –≥–æ—Ç–æ–≤–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏.\n\n"
        "üí° *–ß—Ç–æ –º—ã –º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å:*\n"
        "‚Ä¢ üñ•Ô∏è –ü–æ–º–æ—â—å —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π\n"
        "üåê –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n"
        "üñ®Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –æ—Ä–≥—Ç–µ—Ö–Ω–∏–∫–∏\n"
        "üì± –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n"
        "üîß –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await show_main_menu(update, context, welcome_text)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, welcome_text: str = None) -> None:
    """üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"],
        ["üÜò –ü–æ–º–æ—â—å"]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if Config.is_admin(update.message.from_user.id):
        keyboard.insert(1, ["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üìã –í—Å–µ –∑–∞—è–≤–∫–∏"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if welcome_text:
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é IT –æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –ü–†–û–¶–ï–°–° –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ====================

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
REQUEST_PHONE, REQUEST_PROBLEM, REQUEST_MEDIA = range(3)

async def new_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìù –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    
    context.user_data['request'] = {
        'user_id': user.id,
        'username': user.username or user.full_name,
        'media_files': []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    }
    
    keyboard = [["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìã *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_PHONE

async def request_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        await show_main_menu(update, context)
        return ConversationHandler.END
    
    phone = update.message.text
    context.user_data['request']['phone'] = phone
    
    keyboard = [["üîô –ù–∞–∑–∞–¥"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üîß –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä'\n"
        "‚Ä¢ '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç'\n"
        "‚Ä¢ '–ù–µ –ø–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä'\n"
        "‚Ä¢ '–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã'\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è.",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_PROBLEM

async def request_problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    if update.message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤–≤–æ–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return REQUEST_PHONE
    
    problem = update.message.text
    context.user_data['request']['problem'] = problem
    
    keyboard = [
        ["üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –∑–∞—è–≤–∫–µ?\n\n"
        "üí° *–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É*",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_MEDIA

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã"""
    message = update.message
    
    if message.text == "üîô –ù–∞–∑–∞–¥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é –ø—Ä–æ–±–ª–µ–º—ã
        keyboard = [["üîô –ù–∞–∑–∞–¥"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üîß –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        return REQUEST_PROBLEM
    
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞":
        return await create_request_final(update, context)
    
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    else:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return REQUEST_MEDIA
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    context.user_data['request']['media_files'].append({
        'file_id': file_id,
        'file_type': file_type
    })
    
    keyboard = [
        ["üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await message.reply_text(
        f"‚úÖ { '–§–æ—Ç–æ' if file_type == 'photo' else '–í–∏–¥–µ–æ' } –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ!\n"
        f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['request']['media_files'])}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_MEDIA

async def create_request_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        request_data = context.user_data['request']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        request_id = db.add_request(
            user_id=request_data['user_id'],
            username=request_data['username'],
            phone=request_data['phone'],
            problem=request_data['problem']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        for media_file in request_data.get('media_files', []):
            db.add_media_to_request(
                request_id, 
                media_file['file_id'], 
                media_file['file_type']
            )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –¥–ª—è Google Sheets
        full_request_data = db.get_request(request_id)
        full_request_data['id'] = request_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
        sheets_manager.add_request_to_sheet(full_request_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_new_request(context, request_id, request_data)
        
        success_text = (
            f"üéâ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* üíª IT –æ—Ç–¥–µ–ª\n"
            f"üìû *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:* {request_data['phone']}\n"
            f"üìé *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:* {len(request_data.get('media_files', []))}\n\n"
            f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {request_data['problem']}\n\n"
            f"‚è∞ *–ó–∞—è–≤–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üìä –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏\"\n"
            f"üí¨ –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
        )
        
        await context.bot.send_message(
            chat_id=request_data['user_id'],
            text=success_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        await show_main_menu(update, context)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def notify_admins_new_request(context: ContextTypes.DEFAULT_TYPE, request_id: int, request_data: Dict):
    """üë• –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    message = (
        f"üÜï *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üë§ {request_data['username']} | üìû {request_data['phone']}\n"
        f"üîß {request_data['problem'][:100]}...\n"
        f"üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(request_data.get('media_files', []))}\n"
        f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º IT –æ—Ç–¥–µ–ª–∞
    admin_ids = Config.ADMIN_CHAT_IDS.get('üíª IT –æ—Ç–¥–µ–ª', [])
    for admin_id in admin_ids:
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("üë®‚Äçüíº –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{request_id}"),
                    InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{request_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‚ùå –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"]], resize_keyboard=True)
    )
    return ConversationHandler.END

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ====================

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not Config.is_admin(user_id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = query.data
    
    if data.startswith('take_'):
        request_id = int(data.split('_')[1])
        await take_request_in_work(update, context, request_id, user_id)
    
    elif data.startswith('details_'):
        request_id = int(data.split('_')[1])
        await show_request_details(update, context, request_id)
    
    elif data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        await complete_request_with_comment(update, context, request_id, user_id)

async def take_request_in_work(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int):
    """üë®‚Äçüíº –ë–µ—Ä–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    query = update.callback_query
    
    try:
        request = db.get_request(request_id)
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'new':
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ!", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        admin_name = query.from_user.full_name
        db.update_request_status(request_id, 'in_progress', admin_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
        updated_request = db.get_request(request_id)
        updated_request['id'] = request_id
        sheets_manager.update_request_in_sheet(updated_request)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = query.message.text + f"\n\n‚úÖ *–í–ó–Ø–¢–ê –í –†–ê–ë–û–¢–£*\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"complete_{request_id}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=request['user_id'],
            text=f"üîÑ *–ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É*\n\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏!", show_alert=True)

async def complete_request_with_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int):
    """‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    
    context.user_data['completing_request'] = request_id
    context.user_data['completing_admin'] = query.from_user.full_name
    
    keyboard = [["üîô –û—Ç–º–µ–Ω–∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await query.message.reply_text(
        f"üí¨ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        return
    
    if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
        context.user_data.pop('completing_request', None)
        context.user_data.pop('completing_admin', None)
        await update.message.reply_text(
            "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup([["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    if 'completing_request' in context.user_data:
        request_id = context.user_data['completing_request']
        admin_name = context.user_data['completing_admin']
        comment = update.message.text
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            db.update_request_status(request_id, 'completed')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.update_admin_comment(request_id, comment)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
            updated_request = db.get_request(request_id)
            updated_request['id'] = request_id
            sheets_manager.update_request_in_sheet(updated_request)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            request = db.get_request(request_id)
            if request:
                await context.bot.send_message(
                    chat_id=request['user_id'],
                    text=(
                        f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                        f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}\n"
                        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                        f"‚≠ê –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º!\n"
                        f"üîÑ –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É."
                    ),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º!",
                reply_markup=ReplyKeyboardMarkup([["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('completing_request', None)
            context.user_data.pop('completing_admin', None)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

async def show_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int):
    """üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    try:
        request = db.get_request(request_id)
        if not request:
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_files = db.get_request_media(request_id)
        
        details_text = (
            f"üìã *–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò #{request_id}*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {request['username']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request['phone']}\n"
            f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {request['problem']}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å:* {request['status']}\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}\n"
        )
        
        if request['assigned_admin']:
            details_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {request['assigned_admin']}\n"
        
        if request['admin_comment']:
            details_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {request['admin_comment']}\n"
        
        if media_files:
            details_text += f"üìé *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:* {len(media_files)}\n"
        
        await query.message.reply_text(
            details_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for media in media_files:
            try:
                if media['file_type'] == 'photo':
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=media['file_id'],
                        caption=f"üìé –§–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                elif media['file_type'] == 'video':
                    await context.bot.send_video(
                        chat_id=query.message.chat_id,
                        video=media['file_id'],
                        caption=f"üìé –í–∏–¥–µ–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π!", show_alert=True)

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================

async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üë®‚Äçüíº –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    requests = db.get_requests()
    new_requests = len([r for r in requests if r['status'] == 'new'])
    in_progress_requests = len([r for r in requests if r['status'] == 'in_progress'])
    
    admin_text = (
        f"üë®‚Äçüíº *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ IT –û–¢–î–ï–õ–ê*\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏: {new_requests}\n"
        f"‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_requests}\n"
        f"‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(requests)}\n\n"
        f"üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏:*"
    )
    
    keyboard = [
        ["üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ"],
        ["üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        admin_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    status_filter = None
    if update.message.text == "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏":
        status_filter = 'new'
        title = "üÜï –ù–û–í–´–ï –ó–ê–Ø–í–ö–ò"
    elif update.message.text == "üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ":
        status_filter = 'in_progress'
        title = "üîÑ –ó–ê–Ø–í–ö–ò –í –†–ê–ë–û–¢–ï"
    else:
        title = "üìã –í–°–ï –ó–ê–Ø–í–ö–ò"
    
    requests = db.get_requests(status=status_filter)
    if not requests:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    
    requests_text = f"{title}\n\n"
    
    for req in requests[:10]:
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(req['status'], '‚ùì')
        
        requests_text += (
            f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üë§ {req['username']} | üìû {req['phone']}\n"
            f"üîß {req['problem'][:80]}...\n"
            f"üïí {req['created_at'][:16]}\n\n"
        )
    
    keyboard = [["üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(requests_text, 
                                  reply_markup=reply_markup,
                                  parse_mode=ParseMode.MARKDOWN)

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

async def show_user_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üìÇ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    requests = db.get_user_requests(user_id)
    
    if not requests:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    requests_text = "üìÇ *–í–ê–®–ò –ó–ê–Ø–í–ö–ò*\n\n"
    
    for req in requests[:10]:
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(req['status'], '‚ùì')
        
        requests_text += (
            f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üìù {req['problem'][:50]}...\n"
            f"‚è∞ {req['created_at'][:10]}\n"
            f"üî∏ –°—Ç–∞—Ç—É—Å: {req['status']}\n\n"
        )
    
    keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(requests_text, 
                                  reply_markup=reply_markup,
                                  parse_mode=ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üÜò –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üÜò *–ü–û–ú–û–©–¨ IT –û–¢–î–ï–õ–ê*\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /new_request - üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ /my_requests - üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ /help - üÜò –ü–æ–º–æ—â—å\n\n"
        "üë®‚Äçüíº *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
        "‚Ä¢ /admin - üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!\n\n"
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã IT –æ—Ç–¥–µ–ª–∞:*\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: [–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞]\n"
        "‚Ä¢ Email: [email –∞–¥—Ä–µ—Å]\n"
        "‚Ä¢ –ö–∞–±–∏–Ω–µ—Ç: [–Ω–æ–º–µ—Ä –∫–∞–±–∏–Ω–µ—Ç–∞]"
    )
    
    keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(help_text, 
                                  reply_markup=reply_markup,
                                  parse_mode=ParseMode.MARKDOWN)

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏":
        await show_user_requests(update, context)
    elif text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        await new_request_command(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    elif text == "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and Config.is_admin(user_id):
        await admin_panel_command(update, context)
    elif text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏" and Config.is_admin(user_id):
        await admin_requests_command(update, context)
    elif text == "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏" and Config.is_admin(user_id):
        await admin_requests_command(update, context)
    elif text == "üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ" and Config.is_admin(user_id):
        await admin_requests_command(update, context)
    elif text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and Config.is_admin(user_id):
        await admin_panel_command(update, context)
    elif text == "üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É" and Config.is_admin(user_id):
        await admin_panel_command(update, context)
    else:
        await update.message.reply_text("ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================

def setup_handlers(application: Application):
    """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (ConversationHandler)
    request_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new_request", new_request_command),
                     MessageHandler(filters.Text("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), new_request_command)],
        states={
            REQUEST_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, request_phone)],
            REQUEST_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, request_problem)],
            REQUEST_MEDIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_media),
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_request)]
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_requests", show_user_requests))
    application.add_handler(CommandHandler("admin", admin_panel_command))
    application.add_handler(request_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback (–∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    application.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern="^(take_|details_|complete_)"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_comment))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main() -> None:
    """üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ IT –æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.validate_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        setup_handlers(application)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        logger.info("üöÄ –ë–æ—Ç IT –æ—Ç–¥–µ–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üéâ –ë–æ—Ç IT –æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚ú® –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   ‚Ä¢ üè¢ –¢–æ–ª—å–∫–æ IT –æ—Ç–¥–µ–ª")
        print("   ‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏")
        print("   ‚Ä¢ üë®‚Äçüíº –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        print("   ‚Ä¢ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º")
        print("   ‚Ä¢ üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets")
        print("   ‚Ä¢ üîô –ö–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –Ω–∞ –≤—Å–µ—Ö —ç—Ç–∞–ø–∞—Ö")
        print("   ‚Ä¢ üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞...")
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
