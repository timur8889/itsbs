import logging
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def main():
    try:
        from config import BotConfig
        from database.models import Database
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    except ImportError as e:
        logger.error(f"Import error: {e}")
        return

    config = BotConfig()
    
    if not config.token:
        logger.error("BOT_TOKEN not set")
        print("‚ùå Error: BOT_TOKEN not found in .env file")
        return
    
    print(f"ü§ñ Starting IT Support Bot for factory 'Kontakt'...")
    print(f"üîë Token: {config.token[:10]}...")
    print(f"üë®‚Äçüíº Admins: {config.admin_ids}")
    print(f"üíæ Database: {config.db_url}")
    
    try:
        # Initialize database
        db = Database(config.db_url)
        print("‚úÖ Database initialized")
        
        # Create application
        application = Application.builder().token(config.token).build()
        
        # States for conversation
        TITLE, DESCRIPTION, LOCATION, PHONE = range(4)
        
        # Storage for temporary request data
        user_requests = {}
        
        # Start command
        async def start(update, context):
            user = update.effective_user
            welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ –Ø - –±–æ—Ç IT-–æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ "–ö–æ–Ω—Ç–∞–∫—Ç". 
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
            ]
            
            if user.id in config.admin_ids:
                keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.message:
                await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
        # Help command
        async def help_command(update, context):
            help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫:
üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π
üíª –ü–û - –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã  
üåê –°–µ—Ç—å - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –¥–æ—Å—Ç—É–ø—ã –∏ –ø–∞—Ä–æ–ª–∏
‚ùì –î—Ä—É–≥–æ–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: IT-–æ—Ç–¥–µ–ª, —Ç–µ–ª. 1234"""
            
            if update.message:
                await update.message.reply_text(help_text)
            else:
                await update.callback_query.edit_message_text(help_text)
        
        # Start creating request
        async def start_create_request(update, context):
            query = update.callback_query
            await query.answer()
            
            # Initialize user data
            user_requests[query.from_user.id] = {
                'category': 'other',
                'priority': 'medium'
            }
            
            # Ask for category
            keyboard = [
                [InlineKeyboardButton("üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", callback_data="cat_hardware")],
                [InlineKeyboardButton("üíª –ü–û", callback_data="cat_software")],
                [InlineKeyboardButton("üåê –°–µ—Ç—å", callback_data="cat_network")],
                [InlineKeyboardButton("üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏", callback_data="cat_account")],
                [InlineKeyboardButton("‚ùì –î—Ä—É–≥–æ–µ", callback_data="cat_other")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:",
                reply_markup=reply_markup
            )
        
        # Handle category selection
        async def handle_category(update, context):
            query = update.callback_query
            await query.answer()
            
            category = query.data.replace('cat_', '')
            user_requests[query.from_user.id]['category'] = category
            
            # Ask for priority
            keyboard = [
                [InlineKeyboardButton("üü¢ –ù–∏–∑–∫–∏–π", callback_data="pri_low")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="pri_medium")],
                [InlineKeyboardButton("üî¥ –í—ã—Å–æ–∫–∏–π", callback_data="pri_high")],
                [InlineKeyboardButton("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π", callback_data="pri_critical")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                "üö® –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:",
                reply_markup=reply_markup
            )
        
        # Handle priority selection and start conversation
        async def handle_priority(update, context):
            query = update.callback_query
            await query.answer()
            
            priority = query.data.replace('pri_', '')
            user_requests[query.from_user.id]['priority'] = priority
            
            await query.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º—ã—à—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ'"
            )
            
            return TITLE
        
        # Handle title input
        async def handle_title(update, context):
            title = update.message.text.strip()
            if len(title) > 200:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return TITLE
            
            user_requests[update.effective_user.id]['title'] = title
            
            await update.message.reply_text(
                "üìÑ –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É"
            )
            
            return DESCRIPTION
        
        # Handle description input
        async def handle_description(update, context):
            description = update.message.text.strip()
            if len(description) < 10:
                await update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return DESCRIPTION
            
            user_requests[update.effective_user.id]['description'] = description
            
            await update.message.reply_text(
                "üè¢ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n\n"
                "–ü—Ä–∏–º–µ—Ä: '–¶–µ—Ö ‚Ññ5, –∫–∞–±–∏–Ω–µ—Ç 203' –∏–ª–∏ '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å, 3 —ç—Ç–∞–∂'"
            )
            
            return LOCATION
        
        # Handle location input
        async def handle_location(update, context):
            location = update.message.text.strip()
            user_requests[update.effective_user.id]['location'] = location
            
            await update.message.reply_text(
                "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:\n\n"
                "–§–æ—Ä–º–∞—Ç: +7 XXX XXX-XX-XX –∏–ª–∏ 8 XXX XXX-XX-XX"
            )
            
            return PHONE
        
        # Handle phone input and save request
        async def handle_phone(update, context):
            phone = update.message.text.strip()
            user_data = user_requests.get(update.effective_user.id, {})
            
            # Save to database
            session = db.get_session()
            try:
                from database.models import ITRequest, Category, Priority
                
                new_request = ITRequest(
                    user_id=update.effective_user.id,
                    username=update.effective_user.username,
                    full_name=update.effective_user.full_name,
                    category=Category(user_data.get('category', 'other')),
                    priority=Priority(user_data.get('priority', 'medium')),
                    title=user_data.get('title', ''),
                    description=user_data.get('description', ''),
                    location=user_data.get('location', ''),
                    contact_phone=phone
                )
                
                session.add(new_request)
                session.commit()
                
                # Notify admins
                await notify_admins(context, new_request)
                
                await update.message.reply_text(
                    f"‚úÖ –ó–∞—è–≤–∫–∞ #{new_request.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                    f"–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ IT-–æ—Ç–¥–µ–ª. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
                
            except Exception as e:
                logger.error(f"Error saving request: {e}")
                session.rollback()
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            finally:
                session.close()
                # Clean up user data
                user_requests.pop(update.effective_user.id, None)
            
            return ConversationHandler.END
        
        async def notify_admins(context, request):
            from config import BotConfig
            
            notification_text = f"""üÜï –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request.id}

üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {request.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.contact_phone}
üè¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {request.location}

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.value}
üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {request.priority.value}

üìù –¢–µ–º–∞: {request.title}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {request.description}"""
            
            for admin_id in BotConfig().admin_ids:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}")
        
        # Cancel conversation
        async def cancel(update, context):
            user_requests.pop(update.effective_user.id, None)
            await update.message.reply_text("–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            return ConversationHandler.END
        
        # Button handler
        async def button_handler(update, context):
            query = update.callback_query
            await query.answer()
            
            if query.data == 'create_request':
                await start_create_request(update, context)
            elif query.data == 'help':
                await help_command(update, context)
            elif query.data == 'my_requests':
                await query.edit_message_text("üìã –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
            elif query.data == 'admin_panel':
                if query.from_user.id in config.admin_ids:
                    await query.edit_message_text("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\n/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n/list - —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
                else:
                    await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            elif query.data.startswith('cat_'):
                await handle_category(update, context)
            elif query.data.startswith('pri_'):
                await handle_priority(update, context)
        
        # Stats command for admins
        async def stats(update, context):
            if update.effective_user.id not in config.admin_ids:
                await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                from sqlalchemy import func
                
                total = session.query(ITRequest).count()
                new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
                in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
                
                stats_text = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:

üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
üÜï –ù–æ–≤—ã—Ö: {new}
üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}"""
                
                await update.message.reply_text(stats_text)
                
            except Exception as e:
                logger.error(f"Error getting stats: {e}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            finally:
                session.close()
        
        # Add handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("stats", stats))
        
        # Conversation handler for creating requests
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(handle_priority, pattern='^pri_')],
            states={
                TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_title)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_description)],
                LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_location)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)],
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(conv_handler)
        
        # Button handler
        application.add_handler(CallbackQueryHandler(button_handler, pattern='^(create_request|help|my_requests|admin_panel|cat_)'))
        
        print("‚úÖ Bot initialized successfully")
        print("üîÑ Starting polling...")
        
        # Start the bot
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"‚ùå Critical error: {e}")

if __name__ == '__main__':
    main()
