import logging
import sqlite3
import os
import json
import re
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º + –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    SUPER_ADMIN_IDS = [5024165375]
    
    # –ê–¥–º–∏–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375, 123456789],
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375, 987654321],
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375, 555555555]
    }
    
    DB_PATH = "requests.db"
    REQUEST_TIMEOUT_HOURS = 48

    @classmethod
    def is_super_admin(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
        return user_id in cls.SUPER_ADMIN_IDS

    @classmethod
    def is_admin(cls, user_id: int, department: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        if cls.is_super_admin(user_id):
            return True
        if department:
            return user_id in cls.ADMIN_CHAT_IDS.get(department, [])
        for dept_admins in cls.ADMIN_CHAT_IDS.values():
            if user_id in dept_admins:
                return True
        return False

    @classmethod
    def get_admins_for_department(cls, department: str) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
        return cls.ADMIN_CHAT_IDS.get(department, [])

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        department TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT,
                        assigned_at TEXT,
                        completed_at TEXT
                    )
                ''')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS request_comments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        request_id INTEGER,
                        admin_id INTEGER,
                        admin_name TEXT,
                        comment TEXT,
                        created_at TEXT,
                        FOREIGN KEY (request_id) REFERENCES requests (id)
                    )
                ''')
                conn.commit()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, department, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('department'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                conn.commit()
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return request_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return {}

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                update_data = {
                    'status': status,
                    'updated_at': datetime.now().isoformat()
                }
                
                if admin_comment:
                    update_data['admin_comment'] = admin_comment
                
                if assigned_admin:
                    update_data['assigned_admin'] = assigned_admin
                    update_data['assigned_at'] = datetime.now().isoformat()
                
                if status == 'completed':
                    update_data['completed_at'] = datetime.now().isoformat()
                
                set_parts = []
                parameters = []
                for field, value in update_data.items():
                    set_parts.append(f"{field} = ?")
                    parameters.append(value)
                
                parameters.append(request_id)
                sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                cursor.execute(sql, parameters)
                
                conn.commit()
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

    def add_comment_to_request(self, request_id: int, admin_id: int, admin_name: str, comment: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO request_comments (request_id, admin_id, admin_name, comment, created_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (request_id, admin_id, admin_name, comment, datetime.now().isoformat()))
                conn.commit()
                logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}: {e}")
            raise

    def get_request_comments(self, request_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM request_comments 
                    WHERE request_id = ? 
                    ORDER BY created_at DESC
                ''', (request_id,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return []

    def get_requests_by_filter(self, department: str = None, status: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –æ—Ç–¥–µ–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                status_conditions = {
                    'new': "status = 'new'",
                    'in_progress': "status = 'in_progress'", 
                    'completed': "status = 'completed'",
                    'all': "status IN ('new', 'in_progress', 'completed')"
                }
                
                status_filter = status_conditions.get(status, "status IN ('new', 'in_progress')")
                
                if department:
                    query = f'''
                        SELECT * FROM requests 
                        WHERE department = ? AND {status_filter}
                        ORDER BY 
                            CASE urgency 
                                WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                                WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                                ELSE 3
                            END,
                            created_at DESC
                        LIMIT ?
                    '''
                    cursor.execute(query, (department, limit))
                else:
                    query = f'''
                        SELECT * FROM requests 
                        WHERE {status_filter}
                        ORDER BY 
                            CASE urgency 
                                WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                                WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                                ELSE 3
                            END,
                            created_at DESC
                        LIMIT ?
                    '''
                    cursor.execute(query, (limit,))
                
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                return requests
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return []

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –í–ò–ó–£–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ====================

def create_request_actions_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{request_id}"),
            InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request_id}")
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{request_id}"),
            InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_comment_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{request_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_request_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ====================

def format_request_text(request: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"""
    status_emoji = {
        'new': 'üÜï',
        'in_progress': 'üîÑ',
        'completed': '‚úÖ'
    }.get(request['status'], '‚ùì')
    
    return (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}* {status_emoji}\n\n"
        f"üë§ *–§–ò–û:* {request['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request['phone']}\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:200]}...\n"
        f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {request.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
        f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}\n"
        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {request.get('admin_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
    )

def format_detailed_request_text(request: Dict, comments: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    base_text = format_request_text(request)
    
    comments_text = "\n\nüí¨ *–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:*\n"
    if comments:
        for comment in comments:
            comments_text += f"\nüë§ {comment['admin_name']} ({comment['created_at'][:16]}):\n{comment['comment']}\n"
    else:
        comments_text += "\nüì≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    return base_text + comments_text

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ====================

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏: {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if data.startswith('take_'):
        await take_request_inline(update, context)
    elif data.startswith('complete_'):
        await complete_request_inline(update, context)
    elif data.startswith('comment_'):
        await add_comment_inline(update, context)
    elif data.startswith('add_comment_'):
        await start_comment_input(update, context)
    elif data.startswith('details_'):
        await show_request_details(update, context)
    elif data.startswith('back_to_request_'):
        await show_request_with_actions(update, context)

async def take_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if request['status'] != 'new':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            return
        
        # –ë–µ—Ä–µ–º –≤ —Ä–∞–±–æ—Ç—É
        admin_name = query.from_user.first_name
        db.update_request_status(
            request_id=request_id,
            status='in_progress',
            assigned_admin=admin_name
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            f"üîÑ *–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!*\n\n{request_text}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_about_request_status(
            update, context, request_id, 'in_progress', 
            assigned_admin=admin_name
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")

async def complete_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        if request['status'] != 'in_progress':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['completing_request_id'] = request_id
        context.user_data['completing_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üìù *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
            "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:*\n\n"
            "üí° –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –∏ —Ç.–¥.",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

async def add_comment_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['commenting_request_id'] = request_id
        context.user_data['commenting_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üí¨ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
            "üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–¥–µ–ª–∞",
            reply_markup=create_comment_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def start_comment_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    
    await query.edit_message_text(
        "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode=ParseMode.MARKDOWN
    )

async def show_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = db.get_request_comments(request_id)
        
        details_text = format_detailed_request_text(request, comments)
        
        await query.edit_message_text(
            details_text,
            reply_markup=create_request_actions_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π")

async def show_request_with_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[2])  # back_to_request_123
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ====================

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.message.from_user.id
    comment_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    commenting_request_id = context.user_data.get('commenting_request_id')
    completing_request_id = context.user_data.get('completing_request_id')
    
    if commenting_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await process_comment(update, context, commenting_request_id, user_id, comment_text, is_completion=False)
    
    elif completing_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        await process_comment(update, context, completing_request_id, user_id, comment_text, is_completion=True)
    
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞—è–≤–∫–µ."
        )

async def process_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int, comment: str, is_completion: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        request = db.get_request(request_id)
        if not request:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        admin_name = update.message.from_user.first_name
        
        if is_completion:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            db.update_request_status(
                request_id=request_id,
                status='completed',
                admin_comment=comment,
                assigned_admin=admin_name
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            db.add_comment_to_request(request_id, admin_id, admin_name, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {comment}")
            
            success_message = f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await notify_user_about_request_status(
                update, context, request_id, 'completed', 
                admin_comment=comment, assigned_admin=admin_name
            )
            
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.add_comment_to_request(request_id, admin_id, admin_name, comment)
            success_message = f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\nüìù *–¢–µ–∫—Å—Ç:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞
            await notify_admins_about_comment(update, context, request_id, admin_name, comment)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('commenting_request_id', None)
        context.user_data.pop('completing_request_id', None)
        context.user_data.pop('commenting_message_id', None)
        context.user_data.pop('completing_message_id', None)
        
        await update.message.reply_text(
            success_message,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def notify_admins_about_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_name: str, comment: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    try:
        request = db.get_request(request_id)
        if not request:
            return
        
        department = request['department']
        admin_ids = Config.get_admins_for_department(department)
        
        notification_text = (
            f"üí¨ *–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {department}\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n\n"
            f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}"
        )
        
        for admin_id in admin_ids:
            if admin_id != update.message.from_user.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫!*\n\n"
        "üõ†Ô∏è *–ú—ã –ø–æ–º–æ–∂–µ–º —Å:*\n"
        "‚Ä¢ üíª IT –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n"
        "‚Ä¢ üîß –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏\n"
        "‚Ä¢ ‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    )
    
    if Config.is_super_admin(user.id):
        keyboard = super_admin_main_menu_keyboard
    elif Config.is_admin(user.id):
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
        welcome_text = "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*"
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
        welcome_text = "üë®‚Äçüíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*"
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = "üíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫!*"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_main_menu_keyboard = [
    ['üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
it_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üîÑ –í —Ä–∞–±–æ—Ç–µ IT'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

mechanics_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

electricity_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
department_keyboard = [
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# ==================== –ü–û–ö–ê–ó –ó–ê–Ø–í–û–ö –° INLINE –ö–ù–û–ü–ö–ê–ú–ò ====================

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    department_map = {
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT': 'üíª IT –æ—Ç–¥–µ–ª',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏': 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'
    }
    
    if text not in department_map:
        return
    
    department = department_map[text]
    
    if not Config.is_admin(user_id, department):
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º {department}")
        return
    
    requests = db.get_requests_by_filter(department=department, status='new', limit=10)
    
    if not requests:
        await update.message.reply_text(
            f"üì≠ *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ {department} –Ω–µ—Ç*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üÜï *–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ {department}: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests:
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        if request.get('photo'):
            try:
                with open(request['photo'], 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=request_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except:
                await update.message.reply_text(
                    request_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            await update.message.reply_text(
                request_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )

async def show_requests_in_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –∏—Ö –æ—Ç–¥–µ–ª–æ–≤
    if Config.is_super_admin(user_id):
        requests = db.get_requests_by_filter(status='in_progress', limit=20)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        user_departments = []
        for department, admins in Config.ADMIN_CHAT_IDS.items():
            if user_id in admins:
                user_departments.append(department)
        
        requests = []
        for department in user_departments:
            dept_requests = db.get_requests_by_filter(
                department=department, 
                status='in_progress', 
                limit=10
            )
            requests.extend(dept_requests)
    
    if not requests:
        await update.message.reply_text(
            "üì≠ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç*\n\n"
            "–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! üéâ",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üîÑ *–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests[:10]:
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        await update.message.reply_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

async def notify_user_about_request_status(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        request = db.get_request(request_id)
        if not request:
            return
        
        user_id = request['user_id']
        
        if status == 'in_progress':
            message_text = (
                f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
                f"üìã *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
                f"üîß *–¢–∏–ø:* {request['system_type']}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {assigned_admin or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
                f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {admin_comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
                f"_–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤_"
            )
        elif status == 'completed':
            message_text = (
                f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìã *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
                f"üîß *–¢–∏–ø:* {request['system_type']}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {assigned_admin or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
                f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {admin_comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üíº"
            )
        else:
            return
        
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞—è–≤–∫–µ #{request_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞—è–≤–∫–µ #{request_id}: {e}")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        await start_request_creation(update, context)
    elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        await show_my_requests(update, context)
    elif text == 'üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏':
        await search_requests_menu(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_user_statistics(update, context)
    elif text == 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ':
        await show_requests_in_progress(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    elif text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        await show_admin_panel(update, context)
    elif text == 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω':
        await show_super_admin_panel(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
    elif text in ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏']:
        await show_new_requests(update, context)
    
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
                admin_main_menu_keyboard if Config.is_admin(user_id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            )
        )

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    try:
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("help", show_help))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_inline_buttons))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–æ–≤
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_admin_comment
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üéØ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ üîò –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏") 
        print("   ‚Ä¢ üí¨ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        print("   ‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
