import logging
import sqlite3
import os
import json
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN', '7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw')
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º + –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    SUPER_ADMIN_IDS = [5024165375]
    
    # –ê–¥–º–∏–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375, 123456789],  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω IT
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375, 987654321],  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω –º–µ—Ö–∞–Ω–∏–∫–∏
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375, 555555555]  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫–∏
    }
    
    DB_PATH = "requests.db"
    LOG_LEVEL = logging.INFO

    @classmethod
    def get_admins_for_department(cls, department: str) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
        return cls.ADMIN_CHAT_IDS.get(department, [])
    
    @classmethod
    def get_all_admins(cls) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
        all_admins = set()
        for admins in cls.ADMIN_CHAT_IDS.values():
            all_admins.update(admins)
        return list(all_admins)
    
    @classmethod
    def is_super_admin(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
        return user_id in cls.SUPER_ADMIN_IDS
    
    @classmethod
    def is_admin(cls, user_id: int, department: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–æ—Ç–¥–µ–ª–∞ –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º)"""
        if cls.is_super_admin(user_id):
            return True
        if department:
            return user_id in cls.ADMIN_CHAT_IDS.get(department, [])
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –ª—é–±–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        for dept_admins in cls.ADMIN_CHAT_IDS.values():
            if user_id in dept_admins:
                return True
        return False

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=Config.LOG_LEVEL,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, DEPARTMENT, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD, OTHER_PLOT, SELECT_REQUEST = range(12)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
BROADCAST_AUDIENCE, BROADCAST_MESSAGE, BROADCAST_CONFIRM = range(12, 15)

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class Validators:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        return bool(re.match(pattern, phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏"""
        return len(name.strip()) >= 2 and len(name.strip()) <= 50 and name.replace(' ', '').isalpha()
    
    @staticmethod
    def validate_problem(problem: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        return 10 <= len(problem.strip()) <= 1000

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_main_menu_keyboard = [
    ['üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# üëë –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_panel_keyboard = [
    ['üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏'],
    ['üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏', 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üì¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_keyboard = [
    ['üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'üë• –í—Å–µ–º –∞–¥–º–∏–Ω–∞–º'],
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'],
    ['üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# üë• –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
admin_management_keyboard = [
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
    ['üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# üè¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
it_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üîÑ –í —Ä–∞–±–æ—Ç–µ IT'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

mechanics_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

electricity_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –û–±—â–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
admin_department_select_keyboard = [
    ['üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
department_keyboard = [
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# üíª –¢–∏–ø—ã IT —Å–∏—Å—Ç–µ–º
it_systems_keyboard = [
    ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã'],
    ['üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è'],
    ['üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã'],
    ['üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ'],
    ['üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# üîß –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏
mechanics_keyboard = [
    ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'],
    ['‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞', 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
    ['üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏'],
    ['‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚ö° –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏–∫–∏
electricity_keyboard = [
    ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è'],
    ['üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'],
    ['üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    ['üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# üì∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ
photo_keyboard = [
    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚è∞ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
urgency_keyboard = [
    ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)'],
    ['‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)'],
    ['üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]

# üè¢ –¢–∏–ø—ã —É—á–∞—Å—Ç–∫–æ–≤
plot_type_keyboard = [
    ['üè¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å', 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    ['üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å', 'üõí –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª'],
    ['üíª –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞', 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚úèÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üë§ –ò–º—è', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'üè¢ –û—Ç–¥–µ–ª'],
    ['üìç –£—á–∞—Å—Ç–æ–∫', 'üîß –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'],
    ['‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å', 'üì∑ –§–æ—Ç–æ', '‚úÖ –ì–æ—Ç–æ–≤–æ'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# ‚óÄÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
back_keyboard = [['üîô –ù–∞–∑–∞–¥']]

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        department TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS statistics (
                        date TEXT PRIMARY KEY,
                        requests_count INTEGER DEFAULT 0,
                        completed_count INTEGER DEFAULT 0
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        created_at TEXT,
                        request_count INTEGER DEFAULT 0
                    )
                ''')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_department ON requests(department)')
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, department, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('department'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                
                today = datetime.now().strftime('%Y-%m-%d')
                cursor.execute('''
                    INSERT OR REPLACE INTO statistics (date, requests_count)
                    VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
                ''', (today, today))
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count)
                    VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('first_name', ''),
                    user_data.get('last_name', ''),
                    datetime.now().isoformat(),
                    user_data.get('user_id')
                ))
                
                conn.commit()
                logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id')}")
                return request_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                status_conditions = {
                    'new': "status = 'new'",
                    'in_progress': "status = 'in_progress'", 
                    'completed': "status = 'completed'",
                    'all': "status IN ('new', 'in_progress', 'completed')"
                }
                
                status_filter = status_conditions.get(filter_type, "status IN ('new', 'in_progress')")
                
                query = f'''
                    SELECT * FROM requests 
                    WHERE {status_filter}
                    ORDER BY 
                        CASE urgency 
                            WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                            WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                            ELSE 3
                        END,
                        created_at DESC
                    LIMIT ?
                '''
                
                cursor.execute(query, (limit,))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}'")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}': {e}")
            return []

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return {}

    def update_request(self, request_id: int, update_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                set_parts = []
                parameters = []
                
                for field, value in update_data.items():
                    if field in ['name', 'phone', 'department', 'plot', 'system_type', 'problem', 'photo', 'urgency']:
                        set_parts.append(f"{field} = ?")
                        parameters.append(value)
                
                set_parts.append("updated_at = ?")
                parameters.append(datetime.now().isoformat())
                parameters.append(request_id)
                
                if set_parts:
                    sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                    cursor.execute(sql, parameters)
                    conn.commit()
                    logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return False

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if admin_comment and assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
                elif admin_comment:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, datetime.now().isoformat(), request_id))
                elif assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
                else:
                    cursor.execute('''
                        UPDATE requests SET status = ?, updated_at = ? WHERE id = ?
                    ''', (status, datetime.now().isoformat(), request_id))
                
                conn.commit()
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

    def get_all_requests(self, limit: int = 100) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (limit,))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []

    def get_statistics(self, days: int = 30) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            start_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫
                cursor.execute('SELECT COUNT(*) FROM requests WHERE created_at >= ?', (start_date,))
                total_requests = cursor.fetchone()[0]
                
                # –ó–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
                cursor.execute('SELECT status, COUNT(*) FROM requests WHERE created_at >= ? GROUP BY status', (start_date,))
                status_stats = dict(cursor.fetchall())
                
                # –ó–∞—è–≤–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
                cursor.execute('SELECT department, COUNT(*) FROM requests WHERE created_at >= ? GROUP BY department', (start_date,))
                department_stats = dict(cursor.fetchall())
                
                return {
                    'total_requests': total_requests,
                    'status_stats': status_stats,
                    'department_stats': department_stats,
                    'period_days': days
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –î–û–ë–ê–í–õ–ï–ù–ê –ü–û–î–ü–ò–°–¨ "–∑–∞–≤–æ–¥ –ö–æ–Ω—Ç–∞–∫—Ç"
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*\n\n"
        "üõ†Ô∏è *–ú—ã –ø–æ–º–æ–∂–µ–º —Å:*\n"
        "‚Ä¢ üíª IT –ø—Ä–æ–±–ª–µ–º–∞–º–∏ - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
        "‚Ä¢ üîß –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏ - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
        "‚Ä¢ ‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    )
    
    if Config.is_super_admin(user.id):
        keyboard = super_admin_main_menu_keyboard
    elif Config.is_admin(user.id):
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
        welcome_text = "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
        welcome_text = "üë®‚Äçüíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = "üíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üíº *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" 
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n"
        "–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ö–ù–û–ü–û–ö ====================

async def show_my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    requests = db.get_user_requests(user_id)
    
    if not requests:
        await update.message.reply_text(
            "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫*\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    for request in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(request['status'], '‚ùì')
        
        request_text = (
            f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}*\n"
            f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {request['status']}\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
            f"üîß *–¢–∏–ø:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:100]}...\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}"
        )
        
        await update.message.reply_text(
            request_text,
            parse_mode=ParseMode.MARKDOWN
        )

async def show_all_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    requests = db.get_all_requests(limit=10)
    
    if not requests:
        await update.message.reply_text("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    for request in requests:
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(request['status'], '‚ùì')
        
        request_text = (
            f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}*\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{request['username'] or 'N/A'}\n"
            f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {request['status']}\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
            f"üîß *–¢–∏–ø:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:100]}...\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}"
        )
        
        await update.message.reply_text(
            request_text,
            parse_mode=ParseMode.MARKDOWN
        )

async def show_general_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    stats = db.get_statistics(days=7)
    
    if not stats:
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return
    
    stats_text = (
        f"üìä *–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –∑–∞ {stats['period_days']} –¥–Ω–µ–π*\n\n"
        f"üìà *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* {stats['total_requests']}\n\n"
        f"üìã *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n"
    )
    
    for status, count in stats['status_stats'].items():
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ',
            'completed': '‚úÖ'
        }.get(status, '‚ùì')
        stats_text += f"{status_emoji} {status}: {count}\n"
    
    stats_text += f"\nüè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
    for department, count in stats['department_stats'].items():
        stats_text += f"‚Ä¢ {department}: {count}\n"
    
    await update.message.reply_text(
        stats_text,
        parse_mode=ParseMode.MARKDOWN
    )

async def show_admin_management(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    admin_text = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏*\n\n"
    
    for department, admins in Config.ADMIN_CHAT_IDS.items():
        admin_text += f"*{department}:*\n"
        for admin_id in admins:
            admin_text += f"‚Ä¢ ID: {admin_id}\n"
        admin_text += "\n"
    
    admin_text += "üëë *–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:*\n"
    for admin_id in Config.SUPER_ADMIN_IDS:
        admin_text += f"‚Ä¢ ID: {admin_id}\n"
    
    await update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(admin_management_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def start_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    await update.message.reply_text(
        "üì¢ *–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(broadcast_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================

async def start_request_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    context.user_data.clear()
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    # –î–û–ë–ê–í–õ–ï–ù–ê –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î
    await update.message.reply_text(
        "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "üìù *–®–∞–≥ 1 –∏–∑ 8*\n"
        "üë§ –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –î–û–ë–ê–í–õ–ï–ù–ê –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return await cancel_request(update, context)
    
    name_text = update.message.text.strip()
    
    if not Validators.validate_name(name_text):
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏!*\n\n"
            "üë§ –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return NAME
    
    context.user_data['name'] = name_text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 2 –∏–∑ 8*\n"
        "üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n"
        "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ +7 999 123-45-67\n"
        "‚Ä¢ 8 999 123-45-67\n"
        "‚Ä¢ 79991234567",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –î–û–ë–ê–í–õ–ï–ù–ê –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return NAME
    
    phone_text = update.message.text.strip()
    
    if not Validators.validate_phone(phone_text):
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!*\n\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ +7 999 123-45-67\n"
            "‚Ä¢ 8 999 123-45-67\n"
            "‚Ä¢ 79991234567\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHONE
    
    context.user_data['phone'] = phone_text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 3 –∏–∑ 8*\n"
        "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –∑–∞—è–≤–∫–∏:*\n\n"
        "üíª *IT –æ—Ç–¥–µ–ª* - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
        "üîß *–ú–µ—Ö–∞–Ω–∏–∫–∞* - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "‚ö° *–≠–ª–µ–∫—Ç—Ä–∏–∫–∞* - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞",
        reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return DEPARTMENT

async def department(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return await cancel_request(update, context)
    
    valid_departments = ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞']
    if update.message.text not in valid_departments:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    context.user_data['department'] = update.message.text
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
    if update.message.text == 'üíª IT –æ—Ç–¥–µ–ª':
        problem_keyboard = it_systems_keyboard
        problem_description = "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*"
    elif update.message.text == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        problem_keyboard = mechanics_keyboard
        problem_description = "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
    elif update.message.text == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        problem_keyboard = electricity_keyboard
        problem_description = "‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
    
    await update.message.reply_text(
        f"üìù *–®–∞–≥ 4 –∏–∑ 8*\n{problem_description}",
        reply_markup=ReplyKeyboardMarkup(problem_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

async def system_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞':
        await update.message.reply_text(
            "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –∑–∞—è–≤–∫–∏:*",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
    department = context.user_data.get('department')
    if department == 'üíª IT –æ—Ç–¥–µ–ª':
        valid_systems = ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã', 'üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 
                        'üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã', 'üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ']
    elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        valid_systems = ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞',
                        'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏', '‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)']
    elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        valid_systems = ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
                        'üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', 'üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)']
    
    if update.message.text not in valid_systems:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            keyboard = it_systems_keyboard
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            keyboard = mechanics_keyboard
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            keyboard = electricity_keyboard
        
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SYSTEM_TYPE
    
    context.user_data['system_type'] = update.message.text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 5 –∏–∑ 8*\n"
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

async def plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        department = context.user_data.get('department')
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            keyboard = it_systems_keyboard
            description = "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*"
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            keyboard = mechanics_keyboard
            description = "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            keyboard = electricity_keyboard
            description = "‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
        
        await update.message.reply_text(
            description,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SYSTEM_TYPE
    
    if update.message.text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
        await update.message.reply_text(
            "üìù *–®–∞–≥ 5 –∏–∑ 8*\n"
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª–∞:*\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è\n"
            "‚Ä¢ –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö ‚Ññ1\n"
            "‚Ä¢ –°–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return OTHER_PLOT
    
    context.user_data['plot'] = update.message.text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8*\n"
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:*\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'\n"
        "‚Ä¢ '–°—Ç–∞–Ω–æ–∫ –ß–ü–£ –∏–∑–¥–∞–µ—Ç –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —à—É–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ'\n"
        "‚Ä¢ '–ù–∞ —É—á–∞—Å—Ç–∫–µ –º–∏–≥–∞–µ—Ç —Å–≤–µ—Ç, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ'\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

async def other_plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['plot'] = update.message.text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8*\n"
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'\n"
        "‚Ä¢ '–°—Ç–∞–Ω–æ–∫ –ß–ü–£ –∏–∑–¥–∞–µ—Ç –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —à—É–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ'\n"
        "‚Ä¢ '–ù–∞ —É—á–∞—Å—Ç–∫–µ –º–∏–≥–∞–µ—Ç —Å–≤–µ—Ç, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ'\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –î–û–ë–ê–í–õ–ï–ù–ê –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–ö–ò –ù–ê–ó–ê–î
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    problem_text = update.message.text.strip()
    
    if not Validators.validate_problem(problem_text):
        await update.message.reply_text(
            "‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ!*\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PROBLEM
    
    context.user_data['problem'] = problem_text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 7 –∏–∑ 8*\n"
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

async def urgency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return PROBLEM
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    valid_urgency = ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)', '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)', 'üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)']
    if update.message.text not in valid_urgency:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    
    context.user_data['urgency'] = update.message.text
    await update.message.reply_text(
        "üìù *–®–∞–≥ 8 –∏–∑ 8*\n"
        "üì∏ *–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n"
        "üñºÔ∏è –§–æ—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n"
        "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ñ–æ—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    elif update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        await update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç:*\n\n"
            "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return await show_request_summary(update, context)
    elif update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        await update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return await show_request_summary(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
        )
        return PHOTO

async def show_request_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    await update_summary(context)
    
    if context.user_data.get('editing_mode'):
        return await edit_request_choice(update, context)
    else:
        summary_text = (
            f"{context.user_data['summary']}\n\n"
            "üéØ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n"
            "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É\n"
            "‚úèÔ∏è –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\n"
            "üîô –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        )
        
        if context.user_data.get('photo'):
            await update.message.reply_photo(
                photo=context.user_data['photo'],
                caption=summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        return ConversationHandler.END

async def update_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –≤ user_data"""
    photo_status = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if context.user_data.get('photo') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üë§ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {context.user_data['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {context.user_data['timestamp']}"
    )
    
    context.user_data['summary'] = summary

async def confirm_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        user = update.message.from_user
        
        try:
            request_id = db.save_request(context.user_data)
            await send_admin_notification(context, context.user_data, request_id)
            
            department_contacts = {
                'üíª IT –æ—Ç–¥–µ–ª': 'üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç IT –æ—Ç–¥–µ–ª–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.*',
                'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': 'üîß *–ú–µ—Ö–∞–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.*',
                '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': '‚ö° *–≠–ª–µ–∫—Ç—Ä–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.*'
            }
            
            contact_text = department_contacts.get(context.user_data['department'], 'üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.*')
            
            confirmation_text = (
                f"üéâ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n"
                f"‚Ä¢ üè¢ –û—Ç–¥–µ–ª: {context.user_data['department']}\n"
                f"‚Ä¢ üîß –¢–∏–ø: {context.user_data['system_type']}\n"
                f"‚Ä¢ üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n"
                f"‚Ä¢ ‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n\n"
                f"{contact_text}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üíº"
            )
            
            if Config.is_super_admin(user.id):
                await update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif Config.is_admin(user.id):
                await update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username} –≤ –æ—Ç–¥–µ–ª {context.user_data['department']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            error_message = (
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª –Ω–∞–ø—Ä—è–º—É—é."
            )
            
            if Config.is_super_admin(user.id):
                await update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif Config.is_admin(user.id):
                await update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    elif update.message.text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        context.user_data['editing_mode'] = True
        return await edit_request_choice(update, context)
    
    elif update.message.text == 'üîô –û—Ç–º–µ–Ω–∏—Ç—å':
        return await cancel_request(update, context)
    
    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ConversationHandler.END

async def send_admin_notification(context: ContextTypes.DEFAULT_TYPE, user_data: Dict, request_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {user_data.get('department')}\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data.get('phone')}`\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {user_data.get('system_type')}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' if user_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {user_data.get('timestamp')}"
    )
    
    department = user_data.get('department')
    admin_ids = Config.get_admins_for_department(department)
    
    for admin_id in admin_ids:
        try:
            if user_data.get('photo'):
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –≤ –æ—Ç–¥–µ–ª {department}"
                )
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e2}")

async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    if Config.is_super_admin(user_id):
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True)
        )
    elif Config.is_admin(user_id):
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True)
        )
    else:
        await update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

async def edit_request_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await update.message.reply_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return EDIT_CHOICE

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        await start_request_creation(update, context)
    elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        await show_my_requests(update, context)
    elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É':
        await update.message.reply_text(
            "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫*\n\n"
            "–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    elif text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        await show_admin_panel(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_statistics_menu(update, context)
    elif text == 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω':
        await show_super_admin_panel(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    elif text == 'üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        await start_broadcast(update, context)
    elif text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏':
        await show_admin_management(update, context)
    elif text == 'üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏':
        await show_all_requests(update, context)
    elif text == 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_general_statistics(update, context)
    elif text == 'üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        await show_super_admin_panel(update, context)
    
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
                admin_main_menu_keyboard if Config.is_admin(user_id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            )
        )

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω
    if Config.is_admin(user_id) and not Config.is_super_admin(user_id):
        await update.message.reply_text(
            "üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardMarkup(admin_department_select_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await show_super_admin_panel(update, context)

async def show_super_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.message.reply_text(
        "üëë *–ü–ê–ù–ï–õ–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_statistics_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    user_id = update.message.from_user.id
    
    if Config.is_super_admin(user_id):
        await show_general_statistics(update, context)
    else:
        stats = db.get_statistics(days=7)
        
        if stats:
            stats_text = (
                f"üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê –∑–∞ 7 –¥–Ω–µ–π*\n\n"
                f"üìà *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* {stats['total_requests']}\n\n"
                f"üìã *–°—Ç–∞—Ç—É—Å—ã –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫:*\n"
            )
            
            for status, count in stats['status_stats'].items():
                status_emoji = {
                    'new': 'üÜï',
                    'in_progress': 'üîÑ',
                    'completed': '‚úÖ'
                }.get(status, '‚ùì')
                stats_text += f"{status_emoji} {status}: {count}\n"
            
            await update.message.reply_text(
                stats_text,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
                parse_mode=ParseMode.MARKDOWN
            )

async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    await show_statistics_menu(update, context)

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if Config.BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("help", show_help))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
                DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, department)],
                SYSTEM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, system_type)],
                PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot)],
                OTHER_PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_plot)],
                PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, problem)],
                URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, urgency)],
                PHOTO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, photo),
                    MessageHandler(filters.PHOTO, photo)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(filters.Regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
            allow_reentry=True
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        application.add_handler(MessageHandler(filters.Regex('^(üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)$'), confirm_request))
        application.add_handler(MessageHandler(filters.Regex('^(‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å)$'), confirm_request))
        
        application.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {Config.SUPER_ADMIN_IDS}")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º: {Config.ADMIN_CHAT_IDS}")
        
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
