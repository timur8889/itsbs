import logging
import sqlite3
import os
import json
import re
import time
import asyncio
import shutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Set
from functools import lru_cache
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º + –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    SUPER_ADMIN_IDS = [5024165375]
    
    # –ê–¥–º–∏–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375, 123456789],
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375, 987654321],
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375, 555555555]
    }
    
    DB_PATH = "requests.db"
    REQUEST_TIMEOUT_HOURS = 48

    @classmethod
    def is_super_admin(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
        return user_id in cls.SUPER_ADMIN_IDS

    @classmethod
    def is_admin(cls, user_id: int, department: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
        if cls.is_super_admin(user_id):
            return True
        if department:
            return user_id in cls.ADMIN_CHAT_IDS.get(department, [])
        for dept_admins in cls.ADMIN_CHAT_IDS.values():
            if user_id in dept_admins:
                return True
        return False

    @classmethod
    def get_admins_for_department(cls, department: str) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
        return cls.ADMIN_CHAT_IDS.get(department, [])

    @classmethod
    def validate_config(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        required_vars = ['BOT_TOKEN']
        missing_vars = [var for var in required_vars if not getattr(cls, var)]
        
        if missing_vars:
            raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {missing_vars}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–¥–º–∏–Ω–æ–≤
        for dept, admins in cls.ADMIN_CHAT_IDS.items():
            if not isinstance(admins, list) or not all(isinstance(admin_id, int) for admin_id in admins):
                raise ValueError(f"–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞: {dept}")
        
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")

# ==================== –ë–≠–ö–ê–ü –ú–ï–ù–ï–î–ñ–ï–† ====================

class BackupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±—ç–∫–∞–ø–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def create_backup():
        """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            backup_dir = "backups"
            os.makedirs(backup_dir, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"{backup_dir}/requests_backup_{timestamp}.db"
            
            if os.path.exists(Config.DB_PATH):
                shutil.copy2(Config.DB_PATH, backup_file)
                logger.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_file}")
                return backup_file
            else:
                logger.warning("‚ö†Ô∏è –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –±—ç–∫–∞–ø–∞")
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None
    
    @staticmethod
    def cleanup_old_backups(max_backups: int = 10):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""
        try:
            backup_dir = "backups"
            if not os.path.exists(backup_dir):
                return
            
            backups = sorted(
                [os.path.join(backup_dir, f) for f in os.listdir(backup_dir) if f.endswith('.db')],
                key=os.path.getctime
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            while len(backups) > max_backups:
                old_backup = backups.pop(0)
                os.remove(old_backup)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_backup}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class Validators:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        return bool(re.match(pattern, phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏"""
        return len(name.strip()) >= 2 and len(name.strip()) <= 50 and name.replace(' ', '').isalpha()
    
    @staticmethod
    def validate_problem(problem: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        return 10 <= len(problem.strip()) <= 1000

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.retry_count = 3
        self.retry_delay = 1
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        department TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT,
                        assigned_at TEXT,
                        completed_at TEXT
                    )
                ''')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS request_comments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        request_id INTEGER,
                        admin_id INTEGER,
                        admin_name TEXT,
                        comment TEXT,
                        created_at TEXT,
                        FOREIGN KEY (request_id) REFERENCES requests (id)
                    )
                ''')
                conn.commit()
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def execute_with_retry(self, query: str, params: tuple = ()):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(self.retry_count):
            try:
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute(query, params)
                    conn.commit()
                    return cursor
            except sqlite3.Error as e:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt == self.retry_count - 1:
                    raise e
                time.sleep(self.retry_delay)

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, department, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('department'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                conn.commit()
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return request_id
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    @lru_cache(maxsize=100)
    def get_request_cached(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        return self.get_request(request_id)

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return {}
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return {}

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                update_data = {
                    'status': status,
                    'updated_at': datetime.now().isoformat()
                }
                
                if admin_comment:
                    update_data['admin_comment'] = admin_comment
                
                if assigned_admin:
                    update_data['assigned_admin'] = assigned_admin
                    update_data['assigned_at'] = datetime.now().isoformat()
                
                if status == 'completed':
                    update_data['completed_at'] = datetime.now().isoformat()
                
                set_parts = []
                parameters = []
                for field, value in update_data.items():
                    set_parts.append(f"{field} = ?")
                    parameters.append(value)
                
                parameters.append(request_id)
                sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                cursor.execute(sql, parameters)
                
                conn.commit()
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
                
                # –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
                self.get_request_cached.cache_clear()
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

    def add_comment_to_request(self, request_id: int, admin_id: int, admin_name: str, comment: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO request_comments (request_id, admin_id, admin_name, comment, created_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (request_id, admin_id, admin_name, comment, datetime.now().isoformat()))
                conn.commit()
                logger.info(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}: {e}")
            raise

    def get_request_comments(self, request_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM request_comments 
                    WHERE request_id = ? 
                    ORDER BY created_at DESC
                ''', (request_id,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return []

    def get_requests_by_filter(self, department: str = None, status: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É –æ—Ç–¥–µ–ª–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                status_conditions = {
                    'new': "status = 'new'",
                    'in_progress': "status = 'in_progress'", 
                    'completed': "status = 'completed'",
                    'all': "status IN ('new', 'in_progress', 'completed')"
                }
                
                status_filter = status_conditions.get(status, "status IN ('new', 'in_progress')")
                
                if department:
                    query = f'''
                        SELECT * FROM requests 
                        WHERE department = ? AND {status_filter}
                        ORDER BY 
                            CASE urgency 
                                WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                                WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                                ELSE 3
                            END,
                            created_at DESC
                        LIMIT ?
                    '''
                    cursor.execute(query, (department, limit))
                else:
                    query = f'''
                        SELECT * FROM requests 
                        WHERE {status_filter}
                        ORDER BY 
                            CASE urgency 
                                WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                                WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                                ELSE 3
                            END,
                            created_at DESC
                        LIMIT ?
                    '''
                    cursor.execute(query, (limit,))
                
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                return requests
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫: {e}")
            return []

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_all_user_ids(self) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT DISTINCT user_id FROM requests WHERE user_id IS NOT NULL")
                return [row[0] for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new
                    FROM requests
                ''')
                total_stats = cursor.fetchone()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
                cursor.execute('''
                    SELECT 
                        department,
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                    FROM requests 
                    GROUP BY department
                ''')
                dept_stats = cursor.fetchall()
                
                return {
                    'total': total_stats[0] if total_stats else 0,
                    'completed': total_stats[1] if total_stats else 0,
                    'in_progress': total_stats[2] if total_stats else 0,
                    'new': total_stats[3] if total_stats else 0,
                    'by_department': {
                        dept: {'total': total, 'completed': completed} 
                        for dept, total, completed in dept_stats
                    }
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –≠–¢–ê–ü–û–í –†–ê–ó–ì–û–í–û–†–ê ====================

NAME, PHONE, DEPARTMENT, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD, OTHER_PLOT, SELECT_REQUEST = range(12)

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_main_menu_keyboard = [
    ['üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
it_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üîÑ –í —Ä–∞–±–æ—Ç–µ IT'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

mechanics_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

electricity_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
department_keyboard = [
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# ‚óÄÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
back_keyboard = [['üîô –ù–∞–∑–∞–¥']]

# üì∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ
photo_keyboard = [
    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚è∞ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
urgency_keyboard = [
    ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)'],
    ['‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)'],
    ['üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]

# üè¢ –¢–∏–ø—ã —É—á–∞—Å—Ç–∫–æ–≤
plot_type_keyboard = [
    ['üè¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å', 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    ['üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å', 'üõí –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª'],
    ['üíª –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞', 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# üíª –¢–∏–ø—ã IT —Å–∏—Å—Ç–µ–º
it_systems_keyboard = [
    ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã'],
    ['üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è'],
    ['üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã'],
    ['üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ'],
    ['üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# üîß –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏
mechanics_keyboard = [
    ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'],
    ['‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞', 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
    ['üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏'],
    ['‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚ö° –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏–∫–∏
electricity_keyboard = [
    ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è'],
    ['üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'],
    ['üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    ['üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# ==================== –í–ò–ó–£–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ====================

def create_request_actions_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{request_id}"),
            InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request_id}")
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{request_id}"),
            InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_comment_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{request_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_request_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ====================

def format_request_text(request: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"""
    status_emoji = {
        'new': 'üÜï',
        'in_progress': 'üîÑ',
        'completed': '‚úÖ'
    }.get(request['status'], '‚ùì')
    
    return (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}* {status_emoji}\n\n"
        f"üë§ *–§–ò–û:* {request['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request['phone']}\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:200]}...\n"
        f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {request.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
        f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}\n"
        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {request.get('admin_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
    )

def format_detailed_request_text(request: Dict, comments: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    base_text = format_request_text(request)
    
    comments_text = "\n\nüí¨ *–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:*\n"
    if comments:
        for comment in comments:
            comments_text += f"\nüë§ {comment['admin_name']} ({comment['created_at'][:16]}):\n{comment['comment']}\n"
    else:
        comments_text += "\nüì≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    return base_text + comments_text

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫!*\n\n"
        "üõ†Ô∏è *–ú—ã –ø–æ–º–æ–∂–µ–º —Å:*\n"
        "‚Ä¢ üíª IT –ø—Ä–æ–±–ª–µ–º–∞–º–∏\n"
        "‚Ä¢ üîß –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏\n"
        "‚Ä¢ ‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    )
    
    if Config.is_super_admin(user.id):
        keyboard = super_admin_main_menu_keyboard
    elif Config.is_admin(user.id):
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
        welcome_text = "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*"
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
        welcome_text = "üë®‚Äçüíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*"
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = "üíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫!*"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üíº *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∑–∞—è–≤–æ–∫*\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
        "/menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" 
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*\n"
        "–ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"
    )
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN
    )

async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await update.message.reply_text(
        "üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardMarkup([
            ['üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
            ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_super_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await update.message.reply_text(
        "üëë *–ü–ê–ù–ï–õ–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=ReplyKeyboardMarkup([
            ['üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏'],
            ['üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏', 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
            ['üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
        ], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

async def show_user_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_requests = db.get_user_requests(user_id, limit=1000)
    total = len(user_requests)
    completed = len([r for r in user_requests if r['status'] == 'completed'])
    in_progress = len([r for r in user_requests if r['status'] == 'in_progress'])
    new = len([r for r in user_requests if r['status'] == 'new'])
    
    percentage = (completed / total * 100) if total > 0 else 0
    
    stats_text = (
        "üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
        f"üìà *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* {total}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {completed}\n"
        f"üîÑ *–í —Ä–∞–±–æ—Ç–µ:* {in_progress}\n"
        f"üÜï *–ù–æ–≤—ã—Ö:* {new}\n"
        f"üìä *–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {percentage:.1f}%\n\n"
    )
    
    if total == 0:
        stats_text += "üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É! üéØ"
    
    await update.message.reply_text(
        stats_text,
        parse_mode=ParseMode.MARKDOWN
    )

async def show_detailed_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    stats = db.get_statistics()
    
    stats_text = "üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
    
    if stats:
        total = stats['total']
        completed = stats['completed']
        in_progress = stats['in_progress']
        new = stats['new']
        
        percentage = (completed / total * 100) if total > 0 else 0
        
        stats_text += f"üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: *{total}*\n"
        stats_text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: *{completed}*\n"
        stats_text += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: *{in_progress}*\n"
        stats_text += f"üÜï –ù–æ–≤—ã—Ö: *{new}*\n"
        stats_text += f"üìä –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: *{percentage:.1f}%*\n\n"
        
        stats_text += "üè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
        for dept, dept_stats in stats.get('by_department', {}).items():
            dept_total = dept_stats['total']
            dept_completed = dept_stats['completed']
            dept_percentage = (dept_completed / dept_total * 100) if dept_total > 0 else 0
            stats_text += f"‚Ä¢ {dept}: {dept_completed}/{dept_total} ({dept_percentage:.1f}%)\n"
    else:
        stats_text += "üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    await update.message.reply_text(
        stats_text,
        parse_mode=ParseMode.MARKDOWN
    )

async def create_backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    try:
        backup_file = BackupManager.create_backup()
        if backup_file:
            await update.message.reply_text(
                f"‚úÖ *–ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!*\n\n"
                f"üìÅ –§–∞–π–ª: `{backup_file}`\n\n"
                f"üíæ –ë—ç–∫–∞–ø—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ `backups/`",
                parse_mode=ParseMode.MARKDOWN
            )
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            BackupManager.cleanup_old_backups()
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞")

async def show_my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    requests = db.get_user_requests(user_id)
    
    if not requests:
        await update.message.reply_text(
            "üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫*\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üìÇ *–í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({len(requests)}):*",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(request['status'], '‚ùì')
        
        request_text = (
            f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}*\n"
            f"{status_emoji} *–°—Ç–∞—Ç—É—Å:* {request['status']}\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
            f"üîß *–¢–∏–ø:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:100]}...\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}"
        )
        
        await update.message.reply_text(
            request_text,
            parse_mode=ParseMode.MARKDOWN
        )

async def search_requests_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ø–æ–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫"""
    await update.message.reply_text(
        "üîç *–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫*\n\n"
        "–§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...",
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê ====================

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    context.user_data['broadcasting'] = True
    
    await update.message.reply_text(
        "üì¢ *–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']], resize_keyboard=True)
    )

async def process_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        context.user_data.pop('broadcasting', None)
        await show_main_menu(update, context)
        return
    
    if not context.user_data.get('broadcasting'):
        return
    
    if not Config.is_super_admin(user_id):
        return
    
    message_text = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –∑–∞—è–≤–æ–∫
    try:
        user_ids = db.get_all_user_ids()
        
        if not user_ids:
            await update.message.reply_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
                reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True)
            )
            context.user_data.pop('broadcasting', None)
            return
        
        await update.message.reply_text(
            f"üì§ *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
            f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(user_ids)}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text[:100]}...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        success_count = 0
        fail_count = 0
        failed_users = []
        
        for i, uid in enumerate(user_ids):
            try:
                await context.bot.send_message(
                    chat_id=uid,
                    text=f"üì¢ *–û–ë–™–Ø–í–õ–ï–ù–ò–ï*\n\n{message_text}",
                    parse_mode=ParseMode.MARKDOWN
                )
                success_count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if (i + 1) % 10 == 0:
                    await update.message.reply_text(
                        f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {i + 1}/{len(user_ids)} —Å–æ–æ–±—â–µ–Ω–∏–π..."
                    )
                
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
                fail_count += 1
                failed_users.append(uid)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        result_text = (
            f"üìä *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ: *{success_count}*\n"
            f"‚ùå –û—à–∏–±–æ–∫: *{fail_count}*\n"
            f"üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: *{success_count/len(user_ids)*100:.1f}%*"
        )
        
        if failed_users:
            result_text += f"\n\n‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:* {len(failed_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        
        await update.message.reply_text(
            result_text,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True)
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ",
            reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True)
        )
    
    finally:
        context.user_data.pop('broadcasting', None)

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ====================

async def start_request_creation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username
    context.user_data['first_name'] = user.first_name
    context.user_data['last_name'] = user.last_name
    
    await update.message.reply_text(
        "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "üë§ *–®–∞–≥ 1 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û*\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á*",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

async def name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await cancel_request(update, context)
        return ConversationHandler.END
    
    name = update.message.text.strip()
    
    if not Validators.validate_name(name):
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏!*\n\n"
            "üë§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤):\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä: *–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á*",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return NAME
    
    context.user_data['name'] = name
    
    await update.message.reply_text(
        "üìû *–®–∞–≥ 2 –∏–∑ 8: –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä: *+7 999 123-45-67* –∏–ª–∏ *89991234567*",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('name', None)
        await update.message.reply_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return NAME
    
    phone = update.message.text.strip()
    
    if not Validators.validate_phone(phone):
        await update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!*\n\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä: *+7 999 123-45-67* –∏–ª–∏ *89991234567*",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHONE
    
    context.user_data['phone'] = phone
    
    await update.message.reply_text(
        "üè¢ *–®–∞–≥ 3 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª*\n\n"
        "üíª *IT –æ—Ç–¥–µ–ª* - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
        "üîß *–ú–µ—Ö–∞–Ω–∏–∫–∞* - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "‚ö° *–≠–ª–µ–∫—Ç—Ä–∏–∫–∞* - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ, —ç–ª–µ–∫—Ç—Ä–æ—â–∏—Ç—ã",
        reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return DEPARTMENT

async def department(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('phone', None)
        await update.message.reply_text(
            "üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return PHONE
    
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        await cancel_request(update, context)
        return ConversationHandler.END
    
    valid_departments = ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞']
    if update.message.text not in valid_departments:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    context.user_data['department'] = update.message.text
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if update.message.text == 'üíª IT –æ—Ç–¥–µ–ª':
        await update.message.reply_text(
            "üíª *–®–∞–≥ 4 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT –ø—Ä–æ–±–ª–µ–º—ã*",
            reply_markup=ReplyKeyboardMarkup(it_systems_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    elif update.message.text == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        await update.message.reply_text(
            "üîß *–®–∞–≥ 4 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã*",
            reply_markup=ReplyKeyboardMarkup(mechanics_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    elif update.message.text == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        await update.message.reply_text(
            "‚ö° *–®–∞–≥ 4 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã*",
            reply_markup=ReplyKeyboardMarkup(electricity_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    return SYSTEM_TYPE

async def system_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('department', None)
        await update.message.reply_text(
            "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞':
        await department(update, context)
        return DEPARTMENT
    
    context.user_data['system_type'] = update.message.text
    
    await update.message.reply_text(
        "üìç *–®–∞–≥ 5 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

async def plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–∞—Å—Ç–∫–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('system_type', None)
        await update.message.reply_text(
            f"üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è {context.user_data.get('department')}:",
            reply_markup=ReplyKeyboardMarkup(
                it_systems_keyboard if context.user_data.get('department') == 'üíª IT –æ—Ç–¥–µ–ª' else
                mechanics_keyboard if context.user_data.get('department') == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞' else
                electricity_keyboard,
                resize_keyboard=True
            )
        )
        return SYSTEM_TYPE
    
    if update.message.text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
        await update.message.reply_text(
            "üìç *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞:*\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä: *–¶–µ—Ö ‚Ññ5, –°–∫–ª–∞–¥ –∑–∞–ø—á–∞—Å—Ç–µ–π, –û—Ñ–∏—Å –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏*",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return OTHER_PLOT
    
    valid_plots = ['üè¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å', 'üè≠ –ü—Ä–æduction', 'üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å', 'üõí –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª', 'üíª –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞']
    if update.message.text not in valid_plots:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['plot'] = update.message.text
    
    await update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8: –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É*\n\n"
        "‚úçÔ∏è *–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:*\n\n"
        "‚ö†Ô∏è *–ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤, –º–∞–∫—Å–∏–º—É–º 1000*",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

async def other_plot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫:",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    plot_name = update.message.text.strip()
    if len(plot_name) < 2 or len(plot_name) > 100:
        await update.message.reply_text(
            "‚ùå *–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤*\n\n"
            "üìç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return OTHER_PLOT
    
    context.user_data['plot'] = f"üìã {plot_name}"
    
    await update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8: –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É*\n\n"
        "‚úçÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å:",
        reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

async def problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('plot', None)
        await update.message.reply_text(
            "üìç –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫:",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    problem_text = update.message.text.strip()
    
    if not Validators.validate_problem(problem_text):
        await update.message.reply_text(
            "‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ!*\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PROBLEM
    
    context.user_data['problem'] = problem_text
    
    await update.message.reply_text(
        "‚è∞ *–®–∞–≥ 7 –∏–∑ 8: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

async def urgency(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('problem', None)
        await update.message.reply_text(
            "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True)
        )
        return PROBLEM
    
    valid_urgency = ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)', '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)', 'üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)']
    if update.message.text not in valid_urgency:
        await update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    
    context.user_data['urgency'] = update.message.text
    
    await update.message.reply_text(
        "üì∏ *–®–∞–≥ 8 –∏–∑ 8: –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ*",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

async def photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        context.user_data.pop('urgency', None)
        await update.message.reply_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    
    if update.message.text == '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return await show_request_summary(update, context)
    
    if update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        await update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã:*",
            reply_markup=ReplyKeyboardMarkup(back_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    
    if update.message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"photos/photo_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{update.message.from_user.id}.jpg"
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ—Ç
        os.makedirs('photos', exist_ok=True)
        
        await photo_file.download_to_drive(photo_path)
        context.user_data['photo'] = photo_path
        return await show_request_summary(update, context)
    
    await update.message.reply_text(
        "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
    )
    return PHOTO

async def show_request_summary(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_data = context.user_data
    
    summary_text = (
        "üìã *–ü–†–û–í–ï–†–¨–¢–ï –î–ê–ù–ù–´–ï –ó–ê–Ø–í–ö–ò*\n\n"
        f"üë§ *–§–ò–û:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data.get('phone')}\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {user_data.get('department')}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {user_data.get('system_type')}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n"
        f"üì∑ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if user_data.get('photo') else '‚ùå –ù–µ—Ç'}\n\n"
        "‚úÖ *–í—Å—ë –≤–µ—Ä–Ω–æ?*"
    )
    
    if user_data.get('photo'):
        try:
            with open(user_data['photo'], 'rb') as photo:
                await update.message.reply_photo(
                    photo=photo,
                    caption=summary_text,
                    reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text(
                summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        await update.message.reply_text(
            summary_text,
            reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    return ConversationHandler.END

async def confirm_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        await update.message.reply_text(
            "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
            "–ù–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∑–∞–Ω–æ–≤–æ",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(update.message.from_user.id) else
                admin_main_menu_keyboard if Config.is_admin(update.message.from_user.id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            )
        )
        return
    
    if update.message.text != 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        return
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É
        request_id = db.save_request(context.user_data)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        department = context.user_data.get('department')
        admin_ids = Config.get_admins_for_department(department)
        
        request_text = (
            f"üÜï *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
            f"üë§ *–§–ò–û:* {context.user_data.get('name')}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data.get('phone')}\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {department}\n"
            f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {context.user_data.get('system_type')}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data.get('plot')}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data.get('urgency')}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data.get('problem')}\n\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in admin_ids:
            try:
                if context.user_data.get('photo'):
                    with open(context.user_data['photo'], 'rb') as photo:
                        await context.bot.send_photo(
                            chat_id=admin_id,
                            photo=photo,
                            caption=request_text,
                            reply_markup=create_request_actions_keyboard(request_id),
                            parse_mode=ParseMode.MARKDOWN
                        )
                else:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=request_text,
                        reply_markup=create_request_actions_keyboard(request_id),
                        parse_mode=ParseMode.MARKDOWN
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        success_text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {department}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data.get('urgency')}\n"
            f"üìû *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:* {context.user_data.get('phone')}\n\n"
            f"üí° *–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'*"
        )
        
        await update.message.reply_text(
            success_text,
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(update.message.from_user.id) else
                admin_main_menu_keyboard if Config.is_admin(update.message.from_user.id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏*\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(update.message.from_user.id) else
                admin_main_menu_keyboard if Config.is_admin(update.message.from_user.id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            ),
            parse_mode=ParseMode.MARKDOWN
        )

async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()
    
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=ReplyKeyboardMarkup(
            super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
            admin_main_menu_keyboard if Config.is_admin(user_id) else
            user_main_menu_keyboard, 
            resize_keyboard=True
        )
    )
    return ConversationHandler.END

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ====================

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏: {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if data.startswith('take_'):
        await take_request_inline(update, context)
    elif data.startswith('complete_'):
        await complete_request_inline(update, context)
    elif data.startswith('comment_'):
        await add_comment_inline(update, context)
    elif data.startswith('add_comment_'):
        await start_comment_input(update, context)
    elif data.startswith('details_'):
        await show_request_details(update, context)
    elif data.startswith('back_to_request_'):
        await show_request_with_actions(update, context)

async def take_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request_cached(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if request['status'] != 'new':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            return
        
        # –ë–µ—Ä–µ–º –≤ —Ä–∞–±–æ—Ç—É
        admin_name = query.from_user.first_name
        db.update_request_status(
            request_id=request_id,
            status='in_progress',
            assigned_admin=admin_name
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        updated_request = db.get_request_cached(request_id)
        request_text = format_request_text(updated_request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            f"üîÑ *–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!*\n\n{request_text}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_about_request_status(
            update, context, request_id, 'in_progress', 
            assigned_admin=admin_name
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")

async def complete_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request_cached(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        if request['status'] != 'in_progress':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['completing_request_id'] = request_id
        context.user_data['completing_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üìù *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
            "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:*\n\n"
            "üí° –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –∏ —Ç.–¥.",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

async def add_comment_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request_cached(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['commenting_request_id'] = request_id
        context.user_data['commenting_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üí¨ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
            "üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–¥–µ–ª–∞",
            reply_markup=create_comment_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def start_comment_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    
    await query.edit_message_text(
        "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode=ParseMode.MARKDOWN
    )

async def show_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request_cached(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = db.get_request_comments(request_id)
        
        details_text = format_detailed_request_text(request, comments)
        
        await query.edit_message_text(
            details_text,
            reply_markup=create_request_actions_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π")

async def show_request_with_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[2])  # back_to_request_123
        request = db.get_request_cached(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ====================

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.message.from_user.id
    comment_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    if context.user_data.get('broadcasting'):
        await process_broadcast(update, context)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    commenting_request_id = context.user_data.get('commenting_request_id')
    completing_request_id = context.user_data.get('completing_request_id')
    
    if commenting_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await process_comment(update, context, commenting_request_id, user_id, comment_text, is_completion=False)
    
    elif completing_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        await process_comment(update, context, completing_request_id, user_id, comment_text, is_completion=True)
    
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await handle_text_messages(update, context)

async def process_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int, comment: str, is_completion: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        request = db.get_request_cached(request_id)
        if not request:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        admin_name = update.message.from_user.first_name
        
        if is_completion:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            db.update_request_status(
                request_id=request_id,
                status='completed',
                admin_comment=comment,
                assigned_admin=admin_name
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            db.add_comment_to_request(request_id, admin_id, admin_name, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {comment}")
            
            success_message = f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await notify_user_about_request_status(
                update, context, request_id, 'completed', 
                admin_comment=comment, assigned_admin=admin_name
            )
            
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.add_comment_to_request(request_id, admin_id, admin_name, comment)
            success_message = f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\nüìù *–¢–µ–∫—Å—Ç:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞
            await notify_admins_about_comment(update, context, request_id, admin_name, comment)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('commenting_request_id', None)
        context.user_data.pop('completing_request_id', None)
        context.user_data.pop('commenting_message_id', None)
        context.user_data.pop('completing_message_id', None)
        
        await update.message.reply_text(
            success_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(admin_id) else
                admin_main_menu_keyboard if Config.is_admin(admin_id) else
                user_main_menu_keyboard,
                resize_keyboard=True
            )
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def notify_admins_about_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_name: str, comment: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    try:
        request = db.get_request_cached(request_id)
        if not request:
            return
        
        department = request['department']
        admin_ids = Config.get_admins_for_department(department)
        
        notification_text = (
            f"üí¨ *–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {department}\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n\n"
            f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}"
        )
        
        for admin_id in admin_ids:
            if admin_id != update.message.from_user.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")

# ==================== –ü–û–ö–ê–ó –ó–ê–Ø–í–û–ö –° INLINE –ö–ù–û–ü–ö–ê–ú–ò ====================

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    department_map = {
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT': 'üíª IT –æ—Ç–¥–µ–ª',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏': 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'
    }
    
    if text not in department_map:
        return
    
    department = department_map[text]
    
    if not Config.is_admin(user_id, department):
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º {department}")
        return
    
    requests = db.get_requests_by_filter(department=department, status='new', limit=10)
    
    if not requests:
        await update.message.reply_text(
            f"üì≠ *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ {department} –Ω–µ—Ç*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üÜï *–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ {department}: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests:
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        if request.get('photo'):
            try:
                with open(request['photo'], 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=request_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except:
                await update.message.reply_text(
                    request_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            await update.message.reply_text(
                request_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )

async def show_requests_in_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –∏—Ö –æ—Ç–¥–µ–ª–æ–≤
    if Config.is_super_admin(user_id):
        requests = db.get_requests_by_filter(status='in_progress', limit=20)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        user_departments = []
        for department, admins in Config.ADMIN_CHAT_IDS.items():
            if user_id in admins:
                user_departments.append(department)
        
        requests = []
        for department in user_departments:
            dept_requests = db.get_requests_by_filter(
                department=department, 
                status='in_progress', 
                limit=10
            )
            requests.extend(dept_requests)
    
    if not requests:
        await update.message.reply_text(
            "üì≠ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç*\n\n"
            "–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! üéâ",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üîÑ *–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests[:10]:
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        await update.message.reply_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

async def notify_user_about_request_status(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    try:
        request = db.get_request_cached(request_id)
        if not request:
            return
        
        user_id = request['user_id']
        
        if status == 'in_progress':
            message_text = (
                f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
                f"üìã *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
                f"üîß *–¢–∏–ø:* {request['system_type']}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {assigned_admin or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
                f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {admin_comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
                f"_–ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤_"
            )
        elif status == 'completed':
            message_text = (
                f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                f"üìã *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
                f"üîß *–¢–∏–ø:* {request['system_type']}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {assigned_admin or '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}\n"
                f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {admin_comment or '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üíº"
            )
        else:
            return
        
        await context.bot.send_message(
            chat_id=user_id,
            text=message_text,
            parse_mode=ParseMode.MARKDOWN
        )
        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ –∑–∞—è–≤–∫–µ #{request_id}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞—è–≤–∫–µ #{request_id}: {e}")

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ====================

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        await start_request_creation(update, context)
    elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        await show_my_requests(update, context)
    elif text == 'üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏':
        await search_requests_menu(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_user_statistics(update, context)
    elif text == 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        await show_detailed_statistics(update, context)
    elif text == 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ':
        await show_requests_in_progress(update, context)
    elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
        await show_help(update, context)
    elif text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        await show_admin_panel(update, context)
    elif text == 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω':
        await show_super_admin_panel(update, context)
    elif text == 'üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        await broadcast_message(update, context)
    elif text == 'üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø':
        await create_backup_command(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        await show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ–π –æ—Ç–¥–µ–ª–æ–≤
    elif text in ['üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']:
        await show_department_admin_panel(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
    elif text in ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏']:
        await show_new_requests(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–¥–µ–ª–æ–≤
    elif text in ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏']:
        await show_detailed_statistics(update, context)
    
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
                admin_main_menu_keyboard if Config.is_admin(user_id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            )
        )

async def show_department_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    department_map = {
        'üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': 'üíª IT –æ—Ç–¥–µ–ª',
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', 
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å': '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'
    }
    
    if text not in department_map:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞")
        return
    
    department = department_map[text]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not Config.is_admin(user_id, department):
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ {department}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_map = {
        'üíª IT –æ—Ç–¥–µ–ª': it_admin_panel_keyboard,
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': mechanics_admin_panel_keyboard,
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': electricity_admin_panel_keyboard
    }
    
    await update.message.reply_text(
        f"üëë *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ {department}*\n\n"
        f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –≤–∞—à–µ–≥–æ –æ—Ç–¥–µ–ª–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard_map[department], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.validate_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        BackupManager.create_backup()
        BackupManager.cleanup_old_backups()
        
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("help", show_help))
        application.add_handler(CommandHandler("statistics", show_detailed_statistics))
        application.add_handler(CommandHandler("backup", create_backup_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_inline_buttons))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–æ–≤ –∏ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND,
            handle_admin_comment
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
                DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, department)],
                SYSTEM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, system_type)],
                PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot)],
                OTHER_PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_plot)],
                PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, problem)],
                URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, urgency)],
                PHOTO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, photo),
                    MessageHandler(filters.PHOTO, photo)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(filters.Regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
        )
        
        application.add_handler(conv_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞—è–≤–æ–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üéØ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
        print("   ‚Ä¢ üíæ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –±—ç–∫–∞–ø—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö") 
        print("   ‚Ä¢ üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º")
        print("   ‚Ä¢ üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤")
        print("   ‚Ä¢ üîÑ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ë–î")
        print("   ‚Ä¢ üöÄ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ üí¨ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
        
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
