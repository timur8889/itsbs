import logging
import os
import sys
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
ADMIN_IDS = []
db = None

def is_admin(user_id: int, admin_ids: list) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    is_admin_user = user_id in admin_ids
    print(f"üîê Admin check: User {user_id} -> {is_admin_user}")
    return is_admin_user

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    from dotenv import load_dotenv
    load_dotenv()
    
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '')
    DB_URL = os.getenv('DATABASE_URL', 'sqlite:///it_requests.db')
    
    # –ü–∞—Ä—Å–∏–Ω–≥ ADMIN_IDS
    ADMIN_IDS = []
    if ADMIN_IDS_STR:
        try:
            ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip()]
            print(f"‚úÖ Parsed ADMIN_IDS: {ADMIN_IDS}")
        except ValueError as e:
            print(f"‚ùå Error parsing ADMIN_IDS: {e}")
            ADMIN_IDS = []
    
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN not set in .env file")
    
    return BOT_TOKEN, ADMIN_IDS, DB_URL

async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    user = update.effective_user
    debug_text = f"""
üîç –î–ï–ë–ê–ì –ò–ù–§–û–†–ú–ê–¶–ò–Ø:

üë§ –í–∞—à ID: {user.id}
üë§ –í–∞—à–µ –∏–º—è: {user.full_name}
üîê –ê–¥–º–∏–Ω: {is_admin(user.id, ADMIN_IDS)}
üìã Admin IDs: {ADMIN_IDS}
"""
    await update.message.reply_text(debug_text)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )
    return ConversationHandler.END

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"Exception while handling an update: {context.error}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and update.effective_user:
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as e:
            logger.error(f"Error sending error message: {e}")

def main():
    global ADMIN_IDS, db
    
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler, ContextTypes
    except ImportError as e:
        logger.error(f"Import error: {e}")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    try:
        BOT_TOKEN, ADMIN_IDS, DB_URL = load_config()
        print(f"ü§ñ Starting IT Support Bot...")
        print(f"üîë Token: {BOT_TOKEN[:10]}...")
        print(f"üë®‚Äçüíº Admins: {ADMIN_IDS}")
        print(f"üíæ Database: {DB_URL}")
    except Exception as e:
        logger.error(f"Config error: {e}")
        print(f"‚ùå Configuration error: {e}")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        from database.models import Database
        db = Database(DB_URL)
        print("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"Database error: {e}")
        print("‚ùå Database initialization failed")
        return
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user_sessions = {}
        
        # ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ ====================
        
        async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
            user = update.effective_user
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            is_admin_user = is_admin(user.id, ADMIN_IDS)
            print(f"üë§ User: {user.id} ({user.full_name}), Admin: {is_admin_user}")
            
            welcome_text = f"""üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ –Ø - –±–æ—Ç IT-–æ—Ç–¥–µ–ª–∞ –∑–∞–≤–æ–¥–∞ "–ö–æ–Ω—Ç–∞–∫—Ç". 
–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
            
            keyboard = [
                [InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_request")],
                [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_requests")],
                [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help")]
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if is_admin_user:
                keyboard.append([InlineKeyboardButton("üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
                print(f"‚úÖ Admin panel button ADDED for user {user.id}")
            else:
                print(f"‚ùå Admin panel button NOT added for user {user.id}")
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            if update.message:
                await update.message.reply_text(welcome_text, reply_markup=reply_markup)
            else:
                await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup)
        
        async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
            help_text = """üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞—è–≤–æ–∫:
üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ—Ö–Ω–∏–∫–æ–π
üíª –ü–û - –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã  
üåê –°–µ—Ç—å - –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Å–µ—Ç–µ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ - –¥–æ—Å—Ç—É–ø—ã –∏ –ø–∞—Ä–æ–ª–∏
‚ùì –î—Ä—É–≥–æ–µ - –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª."""
            
            if update.message:
                await update.message.reply_text(help_text)
            else:
                await update.callback_query.edit_message_text(help_text)
        
        # ==================== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================
        
        async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            print(f"üõ†Ô∏è Admin panel requested by user {user_id}")
            
            if not is_admin(user_id, ADMIN_IDS):
                await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
                print(f"‚ùå Access DENIED for user {user_id}")
                return
            
            print(f"‚úÖ Access GRANTED for user {user_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                total = session.query(ITRequest).count()
                new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
                in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
                
                stats_text = f"""üë®‚Äçüíº –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {new}
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"""
                
            except Exception as e:
                logger.error(f"Error getting stats: {e}")
                stats_text = "üë®‚Äçüíº –ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
            finally:
                session.close()
            
            keyboard = [
                [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", callback_data="admin_new_requests")],
                [InlineKeyboardButton("üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ", callback_data="admin_in_progress")],
                [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
                [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(stats_text, reply_markup=reply_markup)
        
        async def admin_all_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏"""
            query = update.callback_query
            await query.answer()
            
            if not is_admin(query.from_user.id, ADMIN_IDS):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                requests = session.query(ITRequest).order_by(ITRequest.created_at.desc()).limit(10).all()
                
                if not requests:
                    text = "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
                else:
                    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
                    for req in requests:
                        status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ', 'on_hold': '‚è∏Ô∏è', 'resolved': '‚úÖ', 'closed': 'üìã'}
                        priority_icons = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üî¥', 'critical': 'üí•'}
                        
                        status_icon = status_icons.get(req.status.value, '‚ùì')
                        priority_icon = priority_icons.get(req.priority.value, '‚ö™')
                        
                        text += f"{status_icon}{priority_icon} #{req.id}: {req.title}\n"
                        text += f"   üë§ {req.full_name} | {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                    
                    keyboard = []
                    for req in requests[:3]:
                        keyboard.append([InlineKeyboardButton(f"üìù #{req.id} - {req.title[:20]}...", callback_data=f"admin_view_{req.id}")])
                    
                    keyboard.extend([
                        [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ", callback_data="admin_new_requests")],
                        [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                    ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()
        
        async def admin_view_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏"""
            query = update.callback_query
            await query.answer()
            
            if not is_admin(query.from_user.id, ADMIN_IDS):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            request_id = int(query.data.replace('admin_view_', ''))
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if not request:
                    await query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
                status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ', 'on_hold': '‚è∏Ô∏è', 'resolved': '‚úÖ', 'closed': 'üìã'}
                priority_icons = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üî¥', 'critical': 'üí•'}
                
                text = f"""üìã –ó–ê–Ø–í–ö–ê #{request.id}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {request.full_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request.contact_phone}
üè¢ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {request.location}

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {request.category.value}
üö® –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_icons.get(request.priority.value)} {request.priority.value}
üìä –°—Ç–∞—Ç—É—Å: {status_icons.get(request.status.value)} {request.status.value}

üìù –¢–µ–º–∞: {request.title}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ:
{request.description}"""
                
                if request.assigned_to:
                    text += f"\n\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {request.assigned_to}"
                
                if request.solution:
                    text += f"\n\nüí° –†–µ—à–µ–Ω–∏–µ:\n{request.solution}"
                
                text += f"\n\n‚è∞ –°–æ–∑–¥–∞–Ω–∞: {request.created_at.strftime('%d.%m.%Y %H:%M')}"
                
                # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                keyboard = []
                
                if request.status.value == 'new':
                    keyboard.append([InlineKeyboardButton("üîÑ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"admin_take_{request.id}")])
                
                keyboard.append([InlineKeyboardButton("‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ", callback_data=f"admin_solution_{request.id}")])
                keyboard.append([
                    InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests"),
                    InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error viewing request: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")
            finally:
                session.close()
        
        async def admin_take_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
            query = update.callback_query
            await query.answer()
            
            if not is_admin(query.from_user.id, ADMIN_IDS):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            request_id = int(query.data.replace('admin_take_', ''))
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
                
                if request:
                    request.status = Status.IN_PROGRESS
                    request.assigned_to = query.from_user.full_name
                    session.commit()
                    
                    await query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–∫–∏
                    await admin_view_request(update, context)
                else:
                    await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    
            except Exception as e:
                logger.error(f"Error taking request: {e}")
                await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)
            finally:
                session.close()
        
        async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            query = update.callback_query
            await query.answer()
            
            if not is_admin(query.from_user.id, ADMIN_IDS):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status, Category
                from sqlalchemy import func
                
                # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                total = session.query(ITRequest).count()
                new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
                in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
                resolved = session.query(ITRequest).filter(ITRequest.status == Status.RESOLVED).count()
                closed = session.query(ITRequest).filter(ITRequest.status == Status.CLOSED).count()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                categories = {}
                for category in Category:
                    count = session.query(ITRequest).filter(ITRequest.category == category).count()
                    categories[category.value] = count
                
                stats_text = f"""üìà –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {new}
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–æ: {resolved}
‚Ä¢ üìã –ó–∞–∫—Ä—ã—Ç–æ: {closed}

üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:
‚Ä¢ üñ•Ô∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {categories.get('hardware', 0)}
‚Ä¢ üíª –ü–û: {categories.get('software', 0)}
‚Ä¢ üåê –°–µ—Ç—å: {categories.get('network', 0)}
‚Ä¢ üë§ –£—á–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏: {categories.get('account', 0)}
‚Ä¢ ‚ùì –î—Ä—É–≥–æ–µ: {categories.get('other', 0)}"""
                
                keyboard = [
                    [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                    [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(stats_text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting stats: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            finally:
                session.close()
        
        async def admin_filtered_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
            query = update.callback_query
            await query.answer()
            
            if not is_admin(query.from_user.id, ADMIN_IDS):
                await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
                return
            
            filter_type = query.data.replace('admin_', '').replace('_requests', '')
            
            status_map = {
                'new': 'new',
                'in_progress': 'in_progress'
            }
            
            filter_names = {
                'new': 'üÜï –ù–æ–≤—ã–µ',
                'in_progress': 'üîÑ –í —Ä–∞–±–æ—Ç–µ'
            }
            
            if filter_type not in status_map:
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä")
                return
            
            session = db.get_session()
            try:
                from database.models import ITRequest, Status
                
                requests = session.query(ITRequest).filter(
                    ITRequest.status == Status(status_map[filter_type])
                ).order_by(ITRequest.created_at.desc()).limit(10).all()
                
                text = f"{filter_names[filter_type]} –∑–∞—è–≤–∫–∏:\n\n"
                
                if not requests:
                    text += "–ó–∞—è–≤–æ–∫ –Ω–µ—Ç"
                else:
                    for req in requests:
                        status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ'}
                        priority_icons = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üî¥', 'critical': 'üí•'}
                        
                        text += f"{status_icons[req.status.value]}{priority_icons[req.priority.value]} #{req.id}: {req.title}\n"
                        text += f"   üë§ {req.full_name} | {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                
                keyboard = []
                for req in requests[:3]:
                    keyboard.append([InlineKeyboardButton(f"üìù #{req.id}", callback_data=f"admin_view_{req.id}")])
                
                keyboard.extend([
                    [InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="admin_all_requests")],
                    [InlineKeyboardButton("üîô –í –∞–¥–º–∏–Ω–∫—É", callback_data="admin_panel")]
                ])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting filtered requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()
        
        # ==================== –°–ò–°–¢–ï–ú–ê –ó–ê–Ø–í–û–ö ====================
        
        async def show_my_requests(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            query = update.callback_query
            await query.answer()
            
            user_id = query.from_user.id
            
            session = db.get_session()
            try:
                from database.models import ITRequest
                requests = session.query(ITRequest).filter(
                    ITRequest.user_id == user_id
                ).order_by(ITRequest.created_at.desc()).limit(5).all()
                
                if not requests:
                    text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫"
                else:
                    text = "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
                    for req in requests:
                        status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ', 'resolved': '‚úÖ', 'closed': 'üìã'}
                        text += f"{status_icons.get(req.status.value, '‚ùì')} #{req.id}: {req.title}\n"
                        text += f"   –°—Ç–∞—Ç—É—Å: {req.status.value}\n"
                        text += f"   –°–æ–∑–¥–∞–Ω–∞: {req.created_at.strftime('%d.%m %H:%M')}\n\n"
                
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(text, reply_markup=reply_markup)
                
            except Exception as e:
                logger.error(f"Error getting user requests: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫")
            finally:
                session.close()
        
        # ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ====================
        
        async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
            """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫"""
            query = update.callback_query
            await query.answer()
            
            print(f"Button pressed: {query.data} by user {query.from_user.id}")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            if query.data == "main_menu":
                await start(update, context)
            elif query.data == "help":
                await help_command(update, context)
            elif query.data == "my_requests":
                await show_my_requests(update, context)
            
            # –ê–¥–º–∏–Ω –∫–Ω–æ–ø–∫–∏
            elif query.data == "admin_panel":
                await admin_panel(update, context)
            elif query.data == "admin_all_requests":
                await admin_all_requests(update, context)
            elif query.data == "admin_new_requests":
                await admin_filtered_requests(update, context)
            elif query.data == "admin_in_progress":
                await admin_filtered_requests(update, context)
            elif query.data == "admin_stats":
                await admin_stats(update, context)
            elif query.data.startswith("admin_view_"):
                await admin_view_request(update, context)
            elif query.data.startswith("admin_take_"):
                await admin_take_request(update, context)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ)
            elif query.data == "create_request":
                await query.edit_message_text(
                    "üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                    "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª –Ω–∞–ø—Ä—è–º—É—é.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
                    ]])
                )
        
        # ==================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("debug", debug_command))
        application.add_handler(CommandHandler("cancel", cancel))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        print("‚úÖ Bot initialized successfully")
        print("üîÑ Starting polling...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        print(f"‚ùå Critical error: {e}")

if __name__ == '__main__':
    main()
