import logging
import sqlite3
import os
import json
import re
import time
import asyncio
import gspread
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ .env —Ñ–∞–π–ª –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
    GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS', 'credentials.json')
    
    # ID —Ç–∞–±–ª–∏—Ü –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞
    GOOGLE_SHEETS_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': os.getenv('IT_SHEET_ID'),
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': os.getenv('MECHANICS_SHEET_ID'), 
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': os.getenv('ELECTRICITY_SHEET_ID')
    }
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º + –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    SUPER_ADMIN_IDS = [5024165375]
    
    # –ê–¥–º–∏–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375, 123456789],
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375, 987654321],
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375, 555555555]
    }
    
    DB_PATH = "requests.db"
    LOG_LEVEL = logging.INFO
    REQUEST_TIMEOUT_HOURS = 48

    @classmethod
    def get_google_sheet_id(cls, department: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç ID Google Sheets –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
        return cls.GOOGLE_SHEETS_IDS.get(department, '')

# ==================== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

class GoogleSheetsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets"""
    
    def __init__(self):
        self.credentials_file = Config.GOOGLE_SHEETS_CREDENTIALS
        self.client = None
        self._connect()
    
    def _connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ Google Sheets API"""
        try:
            if os.path.exists(self.credentials_file):
                self.client = gspread.service_account(filename=self.credentials_file)
                logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets API")
            else:
                logger.warning("‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω. Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω.")
                self.client = None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.client = None
    
    def add_request_to_sheet(self, department: str, request_data: Dict) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞"""
        try:
            if not self.client:
                return False
            
            sheet_id = Config.get_google_sheet_id(department)
            if not sheet_id:
                logger.warning(f"‚ùå ID —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –æ—Ç–¥–µ–ª–∞ {department} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            spreadsheet = self.client.open_by_key(sheet_id)
            worksheet = spreadsheet.sheet1
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
            row_data = [
                request_data['id'],
                request_data['created_at'][:16],
                request_data['name'],
                request_data['phone'],
                request_data['system_type'],
                request_data['plot'],
                request_data['urgency'],
                request_data['problem'],
                request_data['status'],
                request_data.get('assigned_admin', ''),
                request_data.get('admin_comment', ''),
                request_data.get('completed_at', '')
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
            worksheet.append_row(row_data)
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_data['id']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets –æ—Ç–¥–µ–ª–∞ {department}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Google Sheets: {e}")
            return False
    
    def update_request_in_sheet(self, department: str, request_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google Sheets"""
        try:
            if not self.client:
                return False
            
            sheet_id = Config.get_google_sheet_id(department)
            if not sheet_id:
                return False
            
            spreadsheet = self.client.open_by_key(sheet_id)
            worksheet = spreadsheet.sheet1
            
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞—è–≤–∫–æ–π
            cells = worksheet.find(str(request_data['id']))
            if not cells:
                return False
            
            row_num = cells.row
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            update_data = [
                request_data['id'],
                request_data['created_at'][:16],
                request_data['name'],
                request_data['phone'],
                request_data['system_type'],
                request_data['plot'],
                request_data['urgency'],
                request_data['problem'],
                request_data['status'],
                request_data.get('assigned_admin', ''),
                request_data.get('admin_comment', ''),
                request_data.get('completed_at', '')
            ]
            
            for i, value in enumerate(update_data, 1):
                worksheet.update_cell(row_num, i, value)
            
            logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_data['id']} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Google Sheets")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ Google Sheets: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets –º–µ–Ω–µ–¥–∂–µ—Ä–∞
gsheets_manager = GoogleSheetsManager()

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        department TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT,
                        assigned_at TEXT,
                        completed_at TEXT
                    )
                ''')
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS request_comments (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        request_id INTEGER,
                        admin_id INTEGER,
                        admin_name TEXT,
                        comment TEXT,
                        created_at TEXT,
                        FOREIGN KEY (request_id) REFERENCES requests (id)
                    )
                ''')
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, department, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('department'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                conn.commit()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ Google Sheets
                request_data = self.get_request(request_id)
                if request_data:
                    gsheets_manager.add_request_to_sheet(user_data.get('department'), request_data)
                
                return request_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                update_data = {
                    'status': status,
                    'updated_at': datetime.now().isoformat()
                }
                
                if admin_comment:
                    update_data['admin_comment'] = admin_comment
                
                if assigned_admin:
                    update_data['assigned_admin'] = assigned_admin
                    update_data['assigned_at'] = datetime.now().isoformat()
                
                if status == 'completed':
                    update_data['completed_at'] = datetime.now().isoformat()
                
                set_parts = []
                parameters = []
                for field, value in update_data.items():
                    set_parts.append(f"{field} = ?")
                    parameters.append(value)
                
                parameters.append(request_id)
                sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                cursor.execute(sql, parameters)
                
                conn.commit()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤ Google Sheets
                request_data = self.get_request(request_id)
                if request_data:
                    gsheets_manager.update_request_in_sheet(request_data['department'], request_data)
                
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

    def add_comment_to_request(self, request_id: int, admin_id: int, admin_name: str, comment: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO request_comments (request_id, admin_id, admin_name, comment, created_at)
                    VALUES (?, ?, ?, ?, ?)
                ''', (request_id, admin_id, admin_name, comment, datetime.now().isoformat()))
                conn.commit()
                logger.info(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}: {e}")
            raise

    def get_request_comments(self, request_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞—è–≤–∫–µ"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM request_comments 
                    WHERE request_id = ? 
                    ORDER BY created_at DESC
                ''', (request_id,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return []

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –í–ò–ó–£–ê–õ–¨–ù–´–ï –ö–ù–û–ü–ö–ò ====================

def create_request_actions_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{request_id}"),
            InlineKeyboardButton("üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request_id}")
        ],
        [
            InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"complete_{request_id}"),
            InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def create_comment_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    keyboard = [
        [
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{request_id}"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_request_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò INLINE –ö–ù–û–ü–û–ö ====================

async def handle_inline_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–∫–∏: {data} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
    
    if data.startswith('take_'):
        await take_request_inline(update, context)
    elif data.startswith('complete_'):
        await complete_request_inline(update, context)
    elif data.startswith('comment_'):
        await add_comment_inline(update, context)
    elif data.startswith('add_comment_'):
        await start_comment_input(update, context)
    elif data.startswith('details_'):
        await show_request_details(update, context)
    elif data.startswith('back_to_request_'):
        await show_request_with_actions(update, context)

async def take_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        if request['status'] != 'new':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            return
        
        # –ë–µ—Ä–µ–º –≤ —Ä–∞–±–æ—Ç—É
        admin_name = query.from_user.first_name
        db.update_request_status(
            request_id=request_id,
            status='in_progress',
            assigned_admin=admin_name
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            f"üîÑ *–í–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É!*\n\n{request_text}",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user_about_request_status(
            update, context, request_id, 'in_progress', 
            assigned_admin=admin_name
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏")

async def complete_request_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∏ —Å—Ç–∞—Ç—É—Å
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        if request['status'] != 'in_progress':
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['completing_request_id'] = request_id
        context.user_data['completing_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üìù *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
            "üí¨ *–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é:*\n\n"
            "üí° –û–ø–∏—à–∏—Ç–µ —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –∫–∞–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –∏ —Ç.–¥.",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")

async def add_comment_inline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    user_id = query.from_user.id
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not Config.is_admin(user_id, request['department']):
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∑–∞—è–≤–∫–µ")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞—è–≤–∫–∏ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        context.user_data['commenting_request_id'] = request_id
        context.user_data['commenting_message_id'] = query.message.message_id
        
        await query.edit_message_text(
            f"üí¨ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
            "üí° –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–¥–µ–ª–∞",
            reply_markup=create_comment_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def start_comment_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    
    await query.edit_message_text(
        "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n\n"
        "üìù –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        parse_mode=ParseMode.MARKDOWN
    )

async def show_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[1])
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        comments = db.get_request_comments(request_id)
        
        details_text = format_detailed_request_text(request, comments)
        
        await query.edit_message_text(
            details_text,
            reply_markup=create_request_actions_keyboard(request_id),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π")

async def show_request_with_actions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π"""
    query = update.callback_query
    
    try:
        request_id = int(query.data.split('_')[2])  # back_to_request_123
        request = db.get_request(request_id)
        
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request_id)
        
        await query.edit_message_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∑–∞—è–≤–∫–µ: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–∫–∏")

# ==================== –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –¢–ï–ö–°–¢–ê ====================

def format_request_text(request: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏"""
    status_emoji = {
        'new': 'üÜï',
        'in_progress': 'üîÑ',
        'completed': '‚úÖ'
    }.get(request['status'], '‚ùì')
    
    return (
        f"üìã *–ó–∞—è–≤–∫–∞ #{request['id']}* {status_emoji}\n\n"
        f"üë§ *–§–ò–û:* {request['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request['phone']}\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem'][:200]}...\n"
        f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {request.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
        f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}\n"
        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {request.get('admin_comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}"
    )

def format_detailed_request_text(request: Dict, comments: List[Dict]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏"""
    base_text = format_request_text(request)
    
    comments_text = "\n\nüí¨ *–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:*\n"
    if comments:
        for comment in comments:
            comments_text += f"\nüë§ {comment['admin_name']} ({comment['created_at'][:16]}):\n{comment['comment']}\n"
    else:
        comments_text += "\nüì≠ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–∫–∞ –Ω–µ—Ç"
    
    return base_text + comments_text

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í ====================

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.message.from_user.id
    comment_text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    commenting_request_id = context.user_data.get('commenting_request_id')
    completing_request_id = context.user_data.get('completing_request_id')
    
    if commenting_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
        await process_comment(update, context, commenting_request_id, user_id, comment_text, is_completion=False)
    
    elif completing_request_id:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
        await process_comment(update, context, completing_request_id, user_id, comment_text, is_completion=True)
    
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞—è–≤–∫–µ.",
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
                admin_main_menu_keyboard if Config.is_admin(user_id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            )
        )

async def process_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int, comment: str, is_completion: bool = False):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        request = db.get_request(request_id)
        if not request:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        admin_name = update.message.from_user.first_name
        
        if is_completion:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞—è–≤–∫—É —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            db.update_request_status(
                request_id=request_id,
                status='completed',
                admin_comment=comment,
                assigned_admin=admin_name
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            db.add_comment_to_request(request_id, admin_id, admin_name, f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {comment}")
            
            success_message = f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await notify_user_about_request_status(
                update, context, request_id, 'completed', 
                admin_comment=comment, assigned_admin=admin_name
            )
            
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.add_comment_to_request(request_id, admin_id, admin_name, comment)
            success_message = f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\nüìù *–¢–µ–∫—Å—Ç:* {comment}"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞
            await notify_admins_about_comment(update, context, request_id, admin_name, comment)
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context.user_data.pop('commenting_request_id', None)
        context.user_data.pop('completing_request_id', None)
        context.user_data.pop('commenting_message_id', None)
        context.user_data.pop('completing_message_id', None)
        
        await update.message.reply_text(
            success_message,
            reply_markup=ReplyKeyboardMarkup(
                super_admin_main_menu_keyboard if Config.is_super_admin(admin_id) else
                admin_main_menu_keyboard if Config.is_admin(admin_id) else
                user_main_menu_keyboard, 
                resize_keyboard=True
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")

async def notify_admins_about_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_name: str, comment: str):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–¥–µ–ª–∞ –æ –Ω–æ–≤–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏"""
    try:
        request = db.get_request(request_id)
        if not request:
            return
        
        department = request['department']
        admin_ids = Config.get_admins_for_department(department)
        
        notification_text = (
            f"üí¨ *–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {department}\n"
            f"üë§ *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:* {admin_name}\n"
            f"üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {comment}\n\n"
            f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}"
        )
        
        for admin_id in admin_ids:
            if admin_id != update.message.from_user.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–≤—Ç–æ—Ä–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {e}")

# ==================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–û–ö–ê–ó–ê –ó–ê–Ø–í–û–ö ====================

async def show_new_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª–∞ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    department_map = {
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT': 'üíª IT –æ—Ç–¥–µ–ª',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏': 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'
    }
    
    if text not in department_map:
        return
    
    department = department_map[text]
    
    if not Config.is_admin(user_id, department):
        await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º {department}")
        return
    
    requests = db.get_requests_by_filter(department=department, status='new', limit=10)
    
    if not requests:
        await update.message.reply_text(
            f"üì≠ *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ {department} –Ω–µ—Ç*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üÜï *–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ {department}: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests:
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        if request.get('photo'):
            try:
                with open(request['photo'], 'rb') as photo:
                    await update.message.reply_photo(
                        photo=photo,
                        caption=request_text,
                        reply_markup=keyboard,
                        parse_mode=ParseMode.MARKDOWN
                    )
            except:
                await update.message.reply_text(
                    request_text,
                    reply_markup=keyboard,
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            await update.message.reply_text(
                request_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )

async def show_requests_in_progress(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å inline –∫–Ω–æ–ø–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ –∏—Ö –æ—Ç–¥–µ–ª–æ–≤
    if Config.is_super_admin(user_id):
        requests = db.get_requests_by_filter(status='in_progress', limit=20)
    else:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–¥–µ–ª—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        user_departments = []
        for department, admins in Config.ADMIN_CHAT_IDS.items():
            if user_id in admins:
                user_departments.append(department)
        
        requests = []
        for department in user_departments:
            dept_requests = db.get_requests_by_filter(
                department=department, 
                status='in_progress', 
                limit=10
            )
            requests.extend(dept_requests)
    
    if not requests:
        await update.message.reply_text(
            "üì≠ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç*\n\n"
            "–í—Å–µ –∑–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! üéâ",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    await update.message.reply_text(
        f"üîÑ *–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ: {len(requests)}*\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏:",
        parse_mode=ParseMode.MARKDOWN
    )
    
    for request in requests[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        request_text = format_request_text(request)
        keyboard = create_request_actions_keyboard(request['id'])
        
        await update.message.reply_text(
            request_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ ====================

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
        welcome_text = "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
        welcome_text = "üë®‚Äçüíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–† –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = "üíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*"
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–õ–ê–í–ò–ê–¢–£–† ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_main_menu_keyboard = [
    ['üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    try:
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("menu", show_main_menu))
        application.add_handler(CommandHandler("help", show_help))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(handle_inline_buttons))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–æ–≤
        application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND & filters.Regex(r'^(?!üéØ|üìÇ|üîç|‚ÑπÔ∏è|üëë|üìä|üîÑ|üîô)'),
            handle_admin_comment
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
                DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, department)],
                SYSTEM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, system_type)],
                PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot)],
                OTHER_PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_plot)],
                PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, problem)],
                URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, urgency)],
                PHOTO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, photo),
                    MessageHandler(filters.PHOTO, photo)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(filters.Regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
        )
        
        application.add_handler(conv_handler)
        
        logger.info("ü§ñ –ë–æ—Ç –∑–∞—è–≤–æ–∫ –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!")
        print("üéØ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
        print("   ‚Ä¢ üìä –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–¥–µ–ª–∞")
        print("   ‚Ä¢ üîò –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏") 
        print("   ‚Ä¢ üí¨ –°–∏—Å—Ç–µ–º–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤")
        print("   ‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
