import logging
import sqlite3
import os
import json
import re
import time
import asyncio
import shutil
import aiohttp
import pandas as pd
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã matplotlib –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Tuple, Set, Any
from functools import lru_cache
from enum import Enum
from dataclasses import dataclass
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

class ColoredFormatter(logging.Formatter):
    """–¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[41m', # Red background
        'RESET': '\033[0m'      # Reset
    }

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        message = super().format(record)
        return f"{log_color}{message}{self.COLORS['RESET']}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('bot.log', encoding='utf-8')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

setup_logging()
logger = logging.getLogger(__name__)

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    SUPER_ADMIN_IDS = [int(x) for x in os.getenv('SUPER_ADMIN_IDS', '5024165375').split(',')]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª–æ–≤
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375],
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375],
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375],
        'üè¢ –û–±—â–∏–µ': [5024165375]
    }
    
    DB_PATH = "requests.db"
    
    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ENABLE_AI_ANALYSIS = True
    ENABLE_RATINGS = True
    AUTO_BACKUP_HOURS = 24
    NOTIFICATION_HOURS_START = 9
    NOTIFICATION_HOURS_END = 22
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return any(user_id in admins for admins in Config.ADMIN_CHAT_IDS.values()) or user_id in Config.SUPER_ADMIN_IDS
    
    @staticmethod
    def validate_config():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not Config.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        required_vars = ['BOT_TOKEN']
        for var in required_vars:
            if not getattr(Config, var):
                raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class EnhancedDatabase:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_enhanced_db()
    
    def init_enhanced_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    phone TEXT,
                    department TEXT,
                    problem TEXT,
                    photo_id TEXT,
                    status TEXT DEFAULT 'new',
                    urgency TEXT DEFAULT 'üí§ –ù–ï –°–†–û–ß–ù–û',
                    created_at TEXT,
                    assigned_at TEXT,
                    assigned_admin TEXT,
                    completed_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admins (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    department TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS request_ratings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    user_id INTEGER,
                    admin_id INTEGER,
                    admin_name TEXT,
                    rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                    comment TEXT,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    description TEXT,
                    updated_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS response_templates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    department TEXT,
                    title TEXT,
                    template_text TEXT,
                    created_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ SLA –º–µ—Ç—Ä–∏–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sla_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    response_time_minutes INTEGER,
                    resolution_time_minutes INTEGER,
                    met_sla BOOLEAN,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            default_settings = [
                ('enable_ai_analysis', 'true', '–í–∫–ª—é—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫', datetime.now().isoformat()),
                ('enable_ratings', 'true', '–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤', datetime.now().isoformat()),
                ('auto_backup_hours', '24', '–ß–∞—Å—Ç–æ—Ç–∞ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–æ–≤ (—á–∞—Å—ã)', datetime.now().isoformat()),
                ('work_hours_start', '9', '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è', datetime.now().isoformat()),
                ('work_hours_end', '22', '–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è', datetime.now().isoformat()),
            ]
            
            cursor.executemany('''
                INSERT OR REPLACE INTO bot_settings (key, value, description, updated_at)
                VALUES (?, ?, ?, ?)
            ''', default_settings)
            
            conn.commit()
    
    def add_request(self, user_id: int, username: str, phone: str, department: str, 
                   problem: str, photo_id: str = None, urgency: str = 'üí§ –ù–ï –°–†–û–ß–ù–û') -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, phone, department, problem, photo_id, urgency, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, username, phone, department, problem, photo_id, urgency, datetime.now().isoformat()))
            conn.commit()
            return cursor.lastrowid
    
    def get_requests(self, status: str = None, department: str = None, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            query = "SELECT * FROM requests WHERE 1=1"
            params = []
            
            if status:
                query += " AND status = ?"
                params.append(status)
            
            if department:
                query += " AND department = ?"
                params.append(department)
            
            query += " ORDER BY created_at DESC LIMIT ?"
            params.append(limit)
            
            cursor.execute(query, params)
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    @lru_cache(maxsize=100)
    def get_request_cached(self, request_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        return self.get_request(request_id)
    
    def get_request(self, request_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return None
    
    def update_request_status(self, request_id: int, status: str, admin_name: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if status == 'in_progress' and admin_name:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, assigned_at = ?, assigned_admin = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), admin_name, request_id))
            elif status == 'completed':
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?
                    WHERE id = ?
                ''', (status, request_id))
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
            self.get_request_cached.cache_clear()
            conn.commit()
    
    def get_user_requests(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC
            ''', (user_id,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def get_advanced_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        basic_stats = self.get_statistics()
        
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            cursor.execute('''
                SELECT AVG(
                    (julianday(completed_at) - julianday(created_at)) * 24 * 60
                ) as avg_completion_time
                FROM requests 
                WHERE status = 'completed' AND completed_at IS NOT NULL
            ''')
            avg_time_result = cursor.fetchone()
            avg_time = avg_time_result[0] or 0 if avg_time_result else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
            cursor.execute('''
                SELECT urgency, COUNT(*), 
                       SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                FROM requests 
                GROUP BY urgency
            ''')
            urgency_stats = {}
            for row in cursor.fetchall():
                urgency_stats[row[0]] = {'total': row[1], 'completed': row[2]}
            
            # –†–µ–π—Ç–∏–Ω–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute('''
                SELECT assigned_admin, COUNT(*), 
                       AVG((julianday(completed_at) - julianday(assigned_at)) * 24 * 60)
                FROM requests 
                WHERE status = 'completed' AND assigned_admin IS NOT NULL
                GROUP BY assigned_admin
            ''')
            admin_stats = {}
            for row in cursor.fetchall():
                admin_stats[row[0]] = {
                    'completed_requests': row[1], 
                    'avg_completion_time': row[2] or 0
                }
        
        basic_stats.update({
            'avg_completion_time_minutes': round(avg_time, 1),
            'urgency_stats': urgency_stats,
            'admin_stats': admin_stats,
            'efficiency': (basic_stats['completed'] / basic_stats['total'] * 100) if basic_stats['total'] > 0 else 0
        })
        
        return basic_stats
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞—è–≤–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('''
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                    SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                    SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                FROM requests
            ''')
            total_stats = cursor.fetchone()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
            cursor.execute('''
                SELECT 
                    department,
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                    SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                    SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                FROM requests
                GROUP BY department
            ''')
            
            department_stats = {}
            for row in cursor.fetchall():
                department_stats[row[0]] = {
                    'total': row[1],
                    'new': row[2],
                    'in_progress': row[3],
                    'completed': row[4]
                }
            
            return {
                'total': total_stats[0],
                'new': total_stats[1],
                'in_progress': total_stats[2],
                'completed': total_stats[3],
                'by_department': department_stats
            }

# ==================== –†–ï–ô–¢–ò–ù–ì–ò –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================

class EnhancedRatingSystem:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤"""
    
    @staticmethod
    def save_rating(db_path: str, request_id: int, user_id: int, admin_id: int, admin_name: str, rating: int, comment: str = ""):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO request_ratings (request_id, user_id, admin_id, admin_name, rating, comment, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (request_id, user_id, admin_id, admin_name, rating, comment, datetime.now().isoformat()))
            conn.commit()

    @staticmethod
    def get_admin_rating(db_path: str, admin_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_ratings,
                    AVG(rating) as avg_rating,
                    SUM(CASE WHEN rating = 5 THEN 1 ELSE 0 END) as five_stars,
                    SUM(CASE WHEN rating = 4 THEN 1 ELSE 0 END) as four_stars,
                    SUM(CASE WHEN rating = 3 THEN 1 ELSE 0 END) as three_stars,
                    SUM(CASE WHEN rating = 2 THEN 1 ELSE 0 END) as two_stars,
                    SUM(CASE WHEN rating = 1 THEN 1 ELSE 0 END) as one_stars
                FROM request_ratings 
                WHERE admin_id = ?
            ''', (admin_id,))
            result = cursor.fetchone()
            
            return {
                'total_ratings': result[0],
                'avg_rating': round(result[1], 2) if result[1] else 0,
                'five_stars': result[2],
                'four_stars': result[3],
                'three_stars': result[4],
                'two_stars': result[5],
                'one_stars': result[6]
            }

    @staticmethod
    def get_rating_stats(db_path: str, days: int = 30) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        with sqlite3.connect(db_path) as conn:
            cursor = conn.cursor()
            since_date = (datetime.now() - timedelta(days=days)).isoformat()
            
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_ratings,
                    AVG(rating) as avg_rating,
                    admin_id,
                    admin_name
                FROM request_ratings 
                WHERE created_at > ?
                GROUP BY admin_id, admin_name
                ORDER BY avg_rating DESC
            ''', (since_date,))
            
            results = cursor.fetchall()
            return {
                'period_ratings': [
                    {
                        'admin_id': row[2],
                        'admin_name': row[3] or f"Admin_{row[2]}",
                        'total_ratings': row[0],
                        'avg_rating': round(row[1], 2) if row[1] else 0
                    }
                    for row in results
                ],
                'overall_avg': round(sum(row[1] for row in results) / len(results), 2) if results else 0
            }

# ==================== –£–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

class NotificationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, bot):
        self.bot = bot
        self.user_preferences = {}  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        
    async def send_smart_notification(self, user_id: int, message: str, priority: str = "normal"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            current_hour = datetime.now().hour
            if priority == "low" and (current_hour < 9 or current_hour > 22):
                return False  # –ù–µ –±–µ—Å–ø–æ–∫–æ–∏–º –≤ –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∏–∑–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            
            await self.bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False

# ==================== AI –ê–ù–ê–õ–ò–ó –ó–ê–Ø–í–û–ö ====================

class AIAnalyzer:
    """AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–æ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    KEYWORDS = {
        'üíª IT –æ—Ç–¥–µ–ª': ['–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–∏–Ω—Ç–µ—Ä', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '1—Å', '–±–∞–∑–∞', '—Å–µ—Ç—å', 'email', '–ø–æ—á—Ç–∞', '–º—ã—à—å', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–º–æ–Ω–∏—Ç–æ—Ä'],
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': ['—Å—Ç–∞–Ω–æ–∫', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '—Ä–µ–º–æ–Ω—Ç', '—Å–º–∞–∑–∫–∞', '–≥–∏–¥—Ä–∞–≤–ª–∏–∫–∞', '–ø–Ω–µ–≤–º–∞—Ç–∏–∫–∞', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–º–µ—Ö–∞–Ω–∏–∑–º', '–ø–æ–¥—à–∏–ø–Ω–∏–∫'],
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': ['—Å–≤–µ—Ç', '–ø—Ä–æ–≤–æ–¥–∫–∞', '—Ä–æ–∑–µ—Ç–∫–∞', '—â–∏—Ç', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–∞–≤—Ç–æ–º–∞—Ç', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '—ç–ª–µ–∫—Ç—Ä–∏–∫', '–∫–∞–±–µ–ª—å']
    }
    
    URGENCY_KEYWORDS = {
        'üî• –°–†–û–ß–ù–û': ['—Å—Ä–æ—á–Ω–æ', '–∞–≤–∞—Ä–∏—è', '—Å–ª–æ–º–∞–ª–æ—Å—å', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—Å—Ä–æ—á–Ω–∞—è', '–∞–≤–∞—Ä–∏–π–Ω–∞—è', '–≥–æ—Ä—è—â–µ–µ', '–∫—Ä–∏—Ç–∏—á–Ω–æ'],
        '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø': ['—Å–µ–≥–æ–¥–Ω—è', '—Å–µ–π—á–∞—Å', '–±—ã—Å—Ç—Ä–æ', '–Ω—É–∂–Ω–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–Ω–µ–æ—Ç–ª–æ–∂–Ω–æ'],
        'üí§ –ù–ï –°–†–û–ß–ù–û': ['–Ω–µ —Å—Ä–æ—á–Ω–æ', '–∫–æ–≥–¥–∞ –±—É–¥–µ—Ç', '–ø–ª–∞–Ω–æ–≤–æ', '–º–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å', '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è']
    }
    
    @classmethod
    def analyze_problem_text(cls, text: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        text_lower = text.lower()
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª–∞
        department_scores = {}
        for dept, keywords in cls.KEYWORDS.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                department_scores[dept] = score
        
        # –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
        urgency_scores = {}
        for urgency, keywords in cls.URGENCY_KEYWORDS.items():
            score = sum(1 for keyword in keywords if keyword in text_lower)
            if score > 0:
                urgency_scores[urgency] = score
        
        return {
            'suggested_department': max(department_scores, key=department_scores.get) if department_scores else 'üè¢ –û–±—â–∏–µ',
            'suggested_urgency': max(urgency_scores, key=urgency_scores.get) if urgency_scores else 'üí§ –ù–ï –°–†–û–ß–ù–û',
            'confidence_score': len([s for s in department_scores.values() if s > 0]) / len(cls.KEYWORDS),
            'department_scores': department_scores,
            'urgency_scores': urgency_scores
        }

# ==================== –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–ê–ë–û–ß–ò–• –ü–†–û–¶–ï–°–°–û–í ====================

class WorkflowAutomator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        
    async def check_timeout_requests(self, bot):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                timeout_threshold = (datetime.now() - timedelta(hours=48)).isoformat()
                
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE status = 'in_progress' AND assigned_at < ?
                ''', (timeout_threshold,))
                
                timeout_requests = cursor.fetchall()
                
                for request in timeout_requests:
                    await self.notify_timeout(bot, request)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")
    
    async def notify_timeout(self, bot, request):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–µ"""
        try:
            request_dict = dict(zip(['id', 'user_id', 'username', 'phone', 'department', 'problem', 'photo_id', 'status', 'urgency', 'created_at', 'assigned_at', 'assigned_admin', 'completed_at'], request))
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º
            admin_message = (
                f"‚è∞ *–ü–†–û–°–†–û–ß–ï–ù–ê –ó–ê–Ø–í–ö–ê #{request_dict['id']}*\n\n"
                f"üïí –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ –±–æ–ª–µ–µ 48 —á–∞—Å–æ–≤!\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {request_dict['username']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {request_dict['phone']}\n"
                f"üè¢ –û—Ç–¥–µ–ª: {request_dict['department']}\n"
                f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {request_dict['assigned_admin']}\n"
                f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {request_dict['problem'][:100]}..."
            )
            
            for super_admin_id in Config.SUPER_ADMIN_IDS:
                await bot.send_message(
                    chat_id=super_admin_id,
                    text=admin_message,
                    parse_mode=ParseMode.MARKDOWN
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º–∞—É—Ç–µ: {e}")

# ==================== –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –î–ê–ù–ù–´–• ====================

class DataVisualizer:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –æ—Ç—á–µ—Ç–æ–≤"""
    
    @staticmethod
    def create_statistics_plot(stats: Dict[str, Any]) -> BytesIO:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            plt.style.use('seaborn-v0_8')
            fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 10))
            
            # –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            status_data = [stats['new'], stats['in_progress'], stats['completed']]
            status_labels = ['–ù–æ–≤—ã–µ', '–í —Ä–∞–±–æ—Ç–µ', '–í—ã–ø–æ–ª–Ω–µ–Ω–æ']
            colors = ['#ff6b6b', '#4ecdc4', '#45b7d1']
            ax1.pie(status_data, labels=status_labels, colors=colors, autopct='%1.1f%%')
            ax1.set_title('–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫')
            
            # –ì—Ä–∞—Ñ–∏–∫ 2: –ü–æ –æ—Ç–¥–µ–ª–∞–º
            departments = list(stats['by_department'].keys())
            completed = [stats['by_department'][dept]['completed'] for dept in departments]
            total = [stats['by_department'][dept]['total'] for dept in departments]
            
            x = range(len(departments))
            ax2.bar(x, total, label='–í—Å–µ–≥–æ', alpha=0.7)
            ax2.bar(x, completed, label='–í—ã–ø–æ–ª–Ω–µ–Ω–æ', alpha=0.9)
            ax2.set_xticks(x)
            ax2.set_xticklabels([dept.replace(' –æ—Ç–¥–µ–ª', '') for dept in departments], rotation=45)
            ax2.set_title('–ó–∞—è–≤–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º')
            ax2.legend()
            
            # –ì—Ä–∞—Ñ–∏–∫ 3: –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª–æ–≤
            efficiency = []
            for dept in departments:
                dept_stats = stats['by_department'][dept]
                eff = (dept_stats['completed'] / dept_stats['total'] * 100) if dept_stats['total'] > 0 else 0
                efficiency.append(eff)
            
            ax3.bar(range(len(departments)), efficiency, color='lightgreen')
            ax3.set_xticks(range(len(departments)))
            ax3.set_xticklabels([dept.replace(' –æ—Ç–¥–µ–ª', '') for dept in departments], rotation=45)
            ax3.set_ylabel('–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (%)')
            ax3.set_title('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ—Ç–¥–µ–ª–æ–≤')
            
            # –ì—Ä–∞—Ñ–∏–∫ 4: –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            avg_time = stats.get('avg_completion_time_minutes', 0)
            ax4.text(0.5, 0.6, f'–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è\n–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n{avg_time:.1f} –º–∏–Ω.', 
                    fontsize=14, ha='center', va='center')
            ax4.axis('off')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buffer = BytesIO()
            plt.savefig(buffer, format='png', dpi=100, bbox_inches='tight')
            buffer.seek(0)
            plt.close()
            
            return buffer
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None

# ==================== –ú–ï–ù–ï–î–ñ–ï–† –ë–≠–ö–ê–ü–û–í ====================

class BackupManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @staticmethod
    def create_backup() -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_file = f"backup/requests_backup_{timestamp}.db"
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç
            os.makedirs("backup", exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            shutil.copy2(Config.DB_PATH, backup_file)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
            return backup_file
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None
    
    @staticmethod
    def cleanup_old_backups(max_backups: int = 10):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""
        try:
            backup_dir = "backup"
            if not os.path.exists(backup_dir):
                return
            
            backups = []
            for file in os.listdir(backup_dir):
                if file.startswith("requests_backup_") and file.endswith(".db"):
                    file_path = os.path.join(backup_dir, file)
                    backups.append((file_path, os.path.getctime(file_path)))
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            backups.sort(key=lambda x: x[1], reverse=True)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            for backup_path, _ in backups[max_backups:]:
                os.remove(backup_path)
                logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤: {e}")

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ====================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = EnhancedDatabase(Config.DB_PATH)

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    welcome_text = (
        "üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞—è–≤–æ–∫!*\n\n"
        "‚ú® *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
        "‚Ä¢ ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n"
        "‚Ä¢ ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤\n"
        "‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ üíæ –ê–≤—Ç–æ-–±—ç–∫–∞–ø—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
    )
    
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ["üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìä –ú–æ–∏ –∑–∞—è–≤–∫–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "ü§ñ AI –ê–Ω–∞–ª–∏–∑"],
        ["‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏", "üÜò –ü–æ–º–æ—â—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫*",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø ====================

async def enhanced_statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.")
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await update.message.reply_text("üìä *–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...*", parse_mode=ParseMode.MARKDOWN)
        
        stats = db.get_advanced_statistics()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        plot_buffer = DataVisualizer.create_statistics_plot(stats)
        
        if plot_buffer:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            await update.message.reply_photo(
                photo=InputFile(plot_buffer, filename='statistics.png'),
                caption="üìä *–í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò*",
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        
        # –¢–µ–∫—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_text = (
            f"üìà *–†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
            f"üìä *–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {stats.get('efficiency', 0):.1f}%\n"
            f"‚è±Ô∏è *–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {stats.get('avg_completion_time_minutes', 0):.1f} –º–∏–Ω.\n\n"
            f"üè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
        )
        
        for dept, dept_stats in stats.get('by_department', {}).items():
            total = dept_stats.get('total', 0)
            completed = dept_stats.get('completed', 0)
            efficiency = (completed / total * 100) if total > 0 else 0
            stats_text += f"‚Ä¢ {dept}: {completed}/{total} ({efficiency:.1f}%)\n"
        
        if stats.get('admin_stats'):
            stats_text += f"\nüë®‚Äçüíº *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
            for admin, admin_stats in stats['admin_stats'].items():
                completed = admin_stats.get('completed_requests', 0)
                avg_time = admin_stats.get('avg_completion_time', 0)
                stats_text += f"‚Ä¢ {admin}: {completed} –∑–∞—è–≤–æ–∫, {avg_time:.1f} –º–∏–Ω.\n"
        
        await update.message.reply_text(
            stats_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await context.bot.delete_message(
            chat_id=update.message.chat_id,
            message_id=loading_msg.message_id
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def ai_analysis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    if not context.args:
        await update.message.reply_text(
            "ü§ñ *AI –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ai_analysis –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/ai_analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ –ø—Ä–∏–Ω—Ç–µ—Ä, —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å`",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    text = ' '.join(context.args)
    analysis = AIAnalyzer.analyze_problem_text(text)
    
    analysis_text = (
        f"ü§ñ *AI –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê*\n\n"
        f"üìù *–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:* {text}\n\n"
        f"üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
    )
    
    if analysis['suggested_department']:
        analysis_text += f"üè¢ *–û—Ç–¥–µ–ª:* {analysis['suggested_department']}\n"
        analysis_text += f"üéØ *–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:* {analysis['confidence_score']:.1%}\n\n"
    
    analysis_text += f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {analysis['suggested_urgency']}\n\n"
    
    if analysis['department_scores']:
        analysis_text += "üîç *–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:*\n"
        for dept, score in analysis['department_scores'].items():
            if score > 0:
                analysis_text += f"‚Ä¢ {dept}: {score} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π\n"
    
    await update.message.reply_text(
        analysis_text,
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–û–í ====================

async def request_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('rate_'):
        _, request_id, rating = data.split('_')
        request_id = int(request_id)
        rating = int(rating)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        request = db.get_request_cached(request_id)
        if request and request['user_id'] == user_id:
            EnhancedRatingSystem.save_rating(
                Config.DB_PATH, request_id, user_id, 
                request.get('assigned_admin', 'Unknown'),
                request.get('assigned_admin', 'Unknown'), 
                rating
            )
            
            await query.edit_message_text(
                f"‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!*\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚òÖ' * rating}{'‚òÜ' * (5 - rating)}\n\n"
                f"–í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å! üíº",
                parse_mode=ParseMode.MARKDOWN
            )

async def ratings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
        return
    
    try:
        rating_stats = EnhancedRatingSystem.get_rating_stats(Config.DB_PATH)
        
        if not rating_stats['period_ratings']:
            await update.message.reply_text("üìä –†–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        ratings_text = "‚≠ê *–†–ï–ô–¢–ò–ù–ì–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í* (–∑–∞ 30 –¥–Ω–µ–π)\n\n"
        
        for admin in rating_stats['period_ratings']:
            stars = "‚òÖ" * int(admin['avg_rating']) + "‚òÜ" * (5 - int(admin['avg_rating']))
            ratings_text += (
                f"üë§ *{admin['admin_name']}*\n"
                f"‚≠ê {stars} ({admin['avg_rating']}/5)\n"
                f"üìä –û—Ü–µ–Ω–æ–∫: {admin['total_ratings']}\n\n"
            )
        
        ratings_text += f"üìà *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {rating_stats['overall_avg']}/5"
        
        await update.message.reply_text(
            ratings_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")

def create_rating_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏"""
    keyboard = []
    for i in range(1, 6):
        keyboard.append([
            InlineKeyboardButton(
                "‚òÖ" * i + "‚òÜ" * (5 - i), 
                callback_data=f"rate_{request_id}_{i}"
            )
        ])
    return InlineKeyboardMarkup(keyboard)

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

async def send_enhanced_notification(context: ContextTypes.DEFAULT_TYPE, user_id: int, 
                                   request_id: int, status: str, admin_name: str = None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
    
    status_messages = {
        'in_progress': {
            'title': 'üîÑ –ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É',
            'message': f'–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}',
            'emoji': 'üë®‚Äçüíº'
        },
        'completed': {
            'title': '‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞',
            'message': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã',
            'emoji': '‚≠ê'
        }
    }
    
    if status not in status_messages:
        return
    
    msg_info = status_messages[status]
    
    message_text = (
        f"{msg_info['emoji']} *{msg_info['title']}*\n\n"
        f"üìã *–ó–∞—è–≤–∫–∞ #{request_id}*\n"
        f"{msg_info['message']}\n\n"
    )
    
    if status == 'completed':
        message_text += "‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:*"
    
    try:
        if status == 'completed':
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                reply_markup=create_rating_keyboard(request_id),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

# ==================== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ====================

async def scheduled_backup(context: ContextTypes.DEFAULT_TYPE):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–æ–≤"""
    try:
        backup_file = BackupManager.create_backup()
        if backup_file:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
            for admin_id in Config.SUPER_ADMIN_IDS:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üîÑ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω*\n\nüìÅ –§–∞–π–ª: `{backup_file}`",
                    parse_mode=ParseMode.MARKDOWN
                )
            BackupManager.cleanup_old_backups()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞: {e}")

async def check_timeouts(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"""
    try:
        automator = WorkflowAutomator(Config.DB_PATH)
        await automator.check_timeout_requests(context.bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤: {e}")

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

async def show_user_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    requests = db.get_user_requests(user_id)
    
    if not requests:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    requests_text = "üìã *–í–ê–®–ò –ó–ê–Ø–í–ö–ò*\n\n"
    
    for req in requests[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(req['status'], '‚ùì')
        
        requests_text += (
            f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üè¢ {req['department']}\n"
            f"üìù {req['problem'][:50]}...\n"
            f"‚è∞ {req['created_at'][:10]}\n"
            f"üî∏ –°—Ç–∞—Ç—É—Å: {req['status']}\n\n"
        )
    
    await update.message.reply_text(requests_text, parse_mode=ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üÜò *–ü–û–ú–û–©–¨ –ü–û –ö–û–ú–ê–ù–î–ê–ú*\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /new_request - –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ /my_requests - –ú–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ /help - –ü–æ–º–æ—â—å\n\n"
        "ü§ñ *–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
        "‚Ä¢ /ai_analysis [—Ç–µ–∫—Å—Ç] - AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã\n"
        "‚Ä¢ /advanced_stats - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "‚Ä¢ /ratings - –†–µ–π—Ç–∏–Ω–≥–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n"
        "üìä *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
        "‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /requests - –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /assign [id] - –í–∑—è—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ /complete [id] - –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await enhanced_statistics_command(update, context)
    elif text == "ü§ñ AI –ê–Ω–∞–ª–∏–∑":
        await update.message.reply_text(
            "ü§ñ *AI –ê–ù–ê–õ–ò–ó –¢–ï–ö–°–¢–ê*\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/ai_analysis –≤–∞—à —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/ai_analysis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä –∏ –ø—Ä–∏–Ω—Ç–µ—Ä, —Å—Ä–æ—á–Ω–æ –Ω—É–∂–Ω–æ –ø–æ—á–∏–Ω–∏—Ç—å`",
            parse_mode=ParseMode.MARKDOWN
        )
    elif text == "‚≠ê –†–µ–π—Ç–∏–Ω–≥–∏":
        await ratings_command(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏":
        await show_user_requests(update, context)
    elif text == "üìã –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        await update.message.reply_text("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_request")
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================

async def admin_requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    requests = db.get_requests(status='new')
    if not requests:
        await update.message.reply_text("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    
    requests_text = "üÜï *–ù–û–í–´–ï –ó–ê–Ø–í–ö–ò*\n\n"
    
    for req in requests[:10]:
        requests_text += (
            f"üìã *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üë§ {req['username']} | üìû {req['phone']}\n"
            f"üè¢ {req['department']}\n"
            f"üîß {req['problem'][:80]}...\n"
            f"‚è∞ {req['urgency']}\n"
            f"üïí {req['created_at'][:16]}\n\n"
        )
    
    await update.message.reply_text(requests_text, parse_mode=ParseMode.MARKDOWN)

async def assign_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∑—è—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /assign <id –∑–∞—è–≤–∫–∏>")
        return
    
    try:
        request_id = int(context.args[0])
        request = db.get_request(request_id)
        
        if not request:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'new':
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        admin_name = update.message.from_user.full_name
        db.update_request_status(request_id, 'in_progress', admin_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_enhanced_notification(
            context, request['user_id'], request_id, 'in_progress', admin_name
        )
        
        await update.message.reply_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!\n"
            f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}"
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏.")

async def complete_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /complete <id –∑–∞—è–≤–∫–∏>")
        return
    
    try:
        request_id = int(context.args[0])
        request = db.get_request(request_id)
        
        if not request:
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'in_progress':
            await update.message.reply_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –≤ —Ä–∞–±–æ—Ç–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        db.update_request_status(request_id, 'completed')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –æ—Ü–µ–Ω–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_enhanced_notification(
            context, request['user_id'], request_id, 'completed'
        )
        
        await update.message.reply_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================

def setup_handlers(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_requests", show_user_requests))
    
    # AI –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    application.add_handler(CommandHandler("ai_analysis", ai_analysis_command))
    application.add_handler(CommandHandler("advanced_stats", enhanced_statistics_command))
    application.add_handler(CommandHandler("ratings", ratings_command))
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("stats", enhanced_statistics_command))
    application.add_handler(CommandHandler("requests", admin_requests_command))
    application.add_handler(CommandHandler("assign", assign_request_command))
    application.add_handler(CommandHandler("complete", complete_request_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback (—Ä–µ–π—Ç–∏–Ω–≥–∏)
    application.add_handler(CallbackQueryHandler(request_rating_callback, pattern="^rate_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

def setup_automated_tasks(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    job_queue = application.job_queue
    
    if job_queue:
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±—ç–∫–∞–ø –≤ 2:00
        job_queue.run_daily(
            scheduled_backup,
            time=time(hour=2, minute=0),
            name="daily_backup"
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        job_queue.run_repeating(
            check_timeouts,
            interval=timedelta(hours=6),
            first=10
        )

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def enhanced_main() -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        Config.validate_config()
        
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            return
        
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–¥–∞—á –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setup_automated_tasks(application)
        setup_handlers(application)
        
        logger.info("üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ô –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üéØ –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   ‚Ä¢ ü§ñ AI –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–æ–∫")
        print("   ‚Ä¢ üìä –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏") 
        print("   ‚Ä¢ ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤")
        print("   ‚Ä¢ üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ üíæ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–æ–≤")
        print("   ‚Ä¢ ‚è∞ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ üìà –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        print("   ‚Ä¢ üîß –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
        print("   ‚Ä¢ üóÉÔ∏è –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ üë®‚Äçüíº –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    enhanced_main()
