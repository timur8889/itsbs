import logging
import sqlite3
import os
import json
import re
import time
import asyncio
import shutil
from io import BytesIO
from datetime import datetime, timedelta, time
from typing import Dict, List, Optional, Tuple, Set, Any
from functools import lru_cache
from enum import Enum
from dataclasses import dataclass
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputFile,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    ContextTypes,
    JobQueue,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

# ==================== –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

class ColoredFormatter(logging.Formatter):
    """üé® –¶–≤–µ—Ç–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤"""
    COLORS = {
        'DEBUG': '\033[36m',    # Cyan
        'INFO': '\033[32m',     # Green
        'WARNING': '\033[33m',  # Yellow
        'ERROR': '\033[31m',    # Red
        'CRITICAL': '\033[41m', # Red background
        'RESET': '\033[0m'      # Reset
    }

    def format(self, record):
        log_color = self.COLORS.get(record.levelname, self.COLORS['RESET'])
        message = super().format(record)
        return f"{log_color}{message}{self.COLORS['RESET']}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler('bot.log', encoding='utf-8')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ü–≤–µ—Ç–∞–º–∏
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(ColoredFormatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    logger.addHandler(file_handler)
    logger.addHandler(console_handler)

setup_logging()
logger = logging.getLogger(__name__)

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    SUPER_ADMIN_IDS = [int(x) for x in os.getenv('SUPER_ADMIN_IDS', '5024165375').split(',')]
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–¥–µ–ª–æ–≤ (—É–±—Ä–∞–ª–∏ –º–µ—Ö–∞–Ω–∏–∫—É –∏ —ç–ª–µ–∫—Ç—Ä–∏–∫—É)
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375],
        'üè¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã': [5024165375]
    }
    
    DB_PATH = "requests.db"
    
    # –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    ENABLE_AI_ANALYSIS = True
    ENABLE_RATINGS = True
    AUTO_BACKUP_HOURS = 24
    NOTIFICATION_HOURS_START = 9
    NOTIFICATION_HOURS_END = 22
    
    @staticmethod
    def is_admin(user_id: int) -> bool:
        """üîê –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        return any(user_id in admins for admins in Config.ADMIN_CHAT_IDS.values()) or user_id in Config.SUPER_ADMIN_IDS
    
    @staticmethod
    def validate_config():
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        if not Config.BOT_TOKEN:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        required_vars = ['BOT_TOKEN']
        for var in required_vars:
            if not getattr(Config, var):
                raise ValueError(f"–ù–µ –∑–∞–¥–∞–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: {var}")

# ==================== –ú–ò–ì–†–ê–¶–ò–ò –ë–ê–ó–´ –î–ê–ù–ù–´–• ====================

class DatabaseMigrator:
    """üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    MIGRATIONS = [
        # –ú–∏–≥—Ä–∞—Ü–∏—è 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        '''
        CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status);
        CREATE INDEX IF NOT EXISTS idx_requests_department ON requests(department);
        CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at);
        CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id);
        ''',
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        '''
        CREATE TABLE IF NOT EXISTS request_history (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            changed_by INTEGER,
            change_type TEXT,
            old_value TEXT,
            new_value TEXT,
            changed_at TEXT,
            FOREIGN KEY (request_id) REFERENCES requests (id)
        );
        ''',
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        '''
        CREATE TABLE IF NOT EXISTS user_settings (
            user_id INTEGER PRIMARY KEY,
            notification_preferences TEXT DEFAULT 'all',
            language TEXT DEFAULT 'ru',
            created_at TEXT,
            updated_at TEXT
        );
        ''',
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        '''
        ALTER TABLE requests ADD COLUMN admin_comment TEXT;
        ''',
        
        # –ú–∏–≥—Ä–∞—Ü–∏—è 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
        '''
        CREATE TABLE IF NOT EXISTS request_media (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            request_id INTEGER,
            file_id TEXT,
            file_type TEXT,
            created_at TEXT,
            FOREIGN KEY (request_id) REFERENCES requests (id)
        );
        '''
    ]
    
    @classmethod
    def run_migrations(cls, db_path: str):
        """üöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ pending –º–∏–≥—Ä–∞—Ü–∏–∏"""
        try:
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS migrations (
                        id INTEGER PRIMARY KEY,
                        migration_name TEXT,
                        applied_at TEXT
                    )
                ''')
                
                # –ü–æ–ª—É—á–∞–µ–º applied –º–∏–≥—Ä–∞—Ü–∏–∏
                cursor.execute('SELECT id FROM migrations')
                applied_migrations = set(row[0] for row in cursor.fetchall())
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
                for i, migration_sql in enumerate(cls.MIGRATIONS, 1):
                    if i not in applied_migrations:
                        try:
                            cursor.executescript(migration_sql)
                            cursor.execute(
                                'INSERT INTO migrations (id, migration_name, applied_at) VALUES (?, ?, ?)',
                                (i, f'migration_{i}', datetime.now().isoformat())
                            )
                            logger.info(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è #{i}")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ #{i}: {e}")
                            raise
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π: {e}")

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class EnhancedDatabase:
    """üóÉÔ∏è –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_enhanced_db()
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        DatabaseMigrator.run_migrations(db_path)
    
    def init_enhanced_db(self):
        """üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –∑–∞—è–≤–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    phone TEXT,
                    department TEXT,
                    problem TEXT,
                    photo_id TEXT,
                    status TEXT DEFAULT 'new',
                    urgency TEXT DEFAULT 'üí§ –ù–ï –°–†–û–ß–ù–û',
                    created_at TEXT,
                    assigned_at TEXT,
                    assigned_admin TEXT,
                    completed_at TEXT,
                    admin_comment TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admins (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    full_name TEXT,
                    department TEXT,
                    is_active BOOLEAN DEFAULT TRUE,
                    created_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS request_ratings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    user_id INTEGER,
                    admin_id INTEGER,
                    admin_name TEXT,
                    rating INTEGER CHECK(rating >= 1 AND rating <= 5),
                    comment TEXT,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS request_media (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    file_id TEXT,
                    file_type TEXT,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT,
                    description TEXT,
                    updated_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS response_templates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    department TEXT,
                    title TEXT,
                    template_text TEXT,
                    created_at TEXT
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ SLA –º–µ—Ç—Ä–∏–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sla_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    request_id INTEGER,
                    response_time_minutes INTEGER,
                    resolution_time_minutes INTEGER,
                    met_sla BOOLEAN,
                    created_at TEXT,
                    FOREIGN KEY (request_id) REFERENCES requests (id)
                )
            ''')
            
            # –ù–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            default_settings = [
                ('enable_ai_analysis', 'true', '–í–∫–ª—é—á–∏—Ç—å AI –∞–Ω–∞–ª–∏–∑ –∑–∞—è–≤–æ–∫', datetime.now().isoformat()),
                ('enable_ratings', 'true', '–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–π—Ç–∏–Ω–≥–æ–≤', datetime.now().isoformat()),
                ('auto_backup_hours', '24', '–ß–∞—Å—Ç–æ—Ç–∞ –∞–≤—Ç–æ-–±—ç–∫–∞–ø–æ–≤ (—á–∞—Å—ã)', datetime.now().isoformat()),
                ('work_hours_start', '9', '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è', datetime.now().isoformat()),
                ('work_hours_end', '22', '–ö–æ–Ω–µ—Ü —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è', datetime.now().isoformat()),
            ]
            
            cursor.executemany('''
                INSERT OR REPLACE INTO bot_settings (key, value, description, updated_at)
                VALUES (?, ?, ?, ?)
            ''', default_settings)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
            initial_templates = [
                ('üíª IT –æ—Ç–¥–µ–ª', 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', 'üñ•Ô∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–º–ø—å—é—Ç–µ—Ä. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º.', datetime.now().isoformat()),
                ('üíª IT –æ—Ç–¥–µ–ª', 'üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏', 'üì° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–±–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω.', datetime.now().isoformat()),
                ('üè¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã', 'üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞', 'üõ†Ô∏è –ü—Ä–æ–≤–æ–¥–∏–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É. –û–∂–∏–¥–∞–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.', datetime.now().isoformat()),
            ]
            
            cursor.executemany('''
                INSERT OR REPLACE INTO response_templates (department, title, template_text, created_at)
                VALUES (?, ?, ?, ?)
            ''', initial_templates)
            
            conn.commit()
    
    def add_request(self, user_id: int, username: str, phone: str, department: str, 
                   problem: str, photo_id: str = None, urgency: str = 'üí§ –ù–ï –°–†–û–ß–ù–û') -> int:
        """üìù –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, phone, department, problem, photo_id, urgency, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, username, phone, department, problem, photo_id, urgency, datetime.now().isoformat()))
            request_id = cursor.lastrowid
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute('''
                INSERT INTO request_history 
                (request_id, changed_by, change_type, old_value, new_value, changed_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (request_id, user_id, 'created', None, 'new', datetime.now().isoformat()))
            
            conn.commit()
            return request_id
    
    def add_media_to_request(self, request_id: int, file_id: str, file_type: str):
        """üìé –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª –∫ –∑–∞—è–≤–∫–µ"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO request_media (request_id, file_id, file_type, created_at)
                VALUES (?, ?, ?, ?)
            ''', (request_id, file_id, file_type, datetime.now().isoformat()))
            conn.commit()
    
    def get_request_media(self, request_id: int) -> List[Dict]:
        """üìÇ –ü–æ–ª—É—á–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM request_media 
                WHERE request_id = ? 
                ORDER BY created_at
            ''', (request_id,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    def update_admin_comment(self, request_id: int, comment: str):
        """üí¨ –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                UPDATE requests 
                SET admin_comment = ?
                WHERE id = ?
            ''', (comment, request_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            cursor.execute('''
                INSERT INTO request_history 
                (request_id, changed_by, change_type, old_value, new_value, changed_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (request_id, 'system', 'admin_comment', None, comment, datetime.now().isoformat()))
            
            conn.commit()
    
    def get_requests(self, status: str = None, department: str = None, limit: int = 50) -> List[Dict]:
        """üìã –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            query = "SELECT * FROM requests WHERE 1=1"
            params = []
            
            if status:
                query += " AND status = ?"
                params.append(status)
            
            if department:
                query += " AND department = ?"
                params.append(department)
            
            query += " ORDER BY created_at DESC LIMIT ?"
            params.append(limit)
            
            cursor.execute(query, params)
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]
    
    @lru_cache(maxsize=100)
    def get_request_cached(self, request_id: int) -> Optional[Dict]:
        """‚ö° –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        return self.get_request(request_id)
    
    def get_request(self, request_id: int) -> Optional[Dict]:
        """üîç –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return None
    
    def update_request_status(self, request_id: int, status: str, admin_name: str = None):
        """üîÑ –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            old_status = None
            cursor.execute('SELECT status FROM requests WHERE id = ?', (request_id,))
            result = cursor.fetchone()
            if result:
                old_status = result[0]
            
            if status == 'in_progress' and admin_name:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, assigned_at = ?, assigned_admin = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), admin_name, request_id))
            elif status == 'completed':
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests 
                    SET status = ?
                    WHERE id = ?
                ''', (status, request_id))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            if old_status != status:
                cursor.execute('''
                    INSERT INTO request_history 
                    (request_id, changed_by, change_type, old_value, new_value, changed_at)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', (request_id, admin_name or 'system', 'status_changed', old_status, status, datetime.now().isoformat()))
            
            # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π –∑–∞—è–≤–∫–∏
            self.get_request_cached.cache_clear()
            conn.commit()
    
    def get_user_requests(self, user_id: int) -> List[Dict]:
        """üìÇ –ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC
            ''', (user_id,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–ê–ó–´ –î–ê–ù–ù–´–• ====================

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = EnhancedDatabase(Config.DB_PATH)

# ==================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ====================

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await show_main_menu(update, context)

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üè† –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        ["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏"],
        ["üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üÜò –ü–æ–º–æ—â—å"]
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if Config.is_admin(update.message.from_user.id):
        keyboard.insert(1, ["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", "üìã –í—Å–µ –∑–∞—è–≤–∫–∏"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéØ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã –∑–∞—è–≤–æ–∫*",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ü–†–û–¶–ï–°–° –°–û–ó–î–ê–ù–ò–Ø –ó–ê–Ø–í–ö–ò ====================

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
REQUEST_PHONE, REQUEST_DEPARTMENT, REQUEST_PROBLEM, REQUEST_MEDIA = range(4)

async def new_request_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìù –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    
    context.user_data['request'] = {
        'user_id': user.id,
        'username': user.username or user.full_name,
        'media_files': []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    }
    
    await update.message.reply_text(
        "üìã *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_PHONE

async def request_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìû –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone = update.message.text
    context.user_data['request']['phone'] = phone
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç–¥–µ–ª–∞ (—É–±—Ä–∞–ª–∏ –º–µ—Ö–∞–Ω–∏–∫—É –∏ —ç–ª–µ–∫—Ç—Ä–∏–∫—É)
    keyboard = [
        ["üíª IT –æ—Ç–¥–µ–ª", "üè¢ –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –∑–∞—è–≤–∫–∏:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_DEPARTMENT

async def request_department(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üè¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞"""
    department = update.message.text
    context.user_data['request']['department'] = department
    
    await update.message.reply_text(
        "üîß –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ—Å–ª–µ –æ–ø–∏—Å–∞–Ω–∏—è.",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_PROBLEM

async def request_problem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üîß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    problem = update.message.text
    context.user_data['request']['problem'] = problem
    
    keyboard = [
        ["üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üìé –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –∑–∞—è–≤–∫–µ?",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_MEDIA

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã"""
    message = update.message
    
    if message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–µ–∑ –º–µ–¥–∏–∞":
        return await create_request_final(update, context)
    
    if message.photo:
        # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        file_type = "video"
    elif message.document:
        file_id = message.document.file_id
        file_type = "document"
    else:
        await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
        return REQUEST_MEDIA
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    context.user_data['request']['media_files'].append({
        'file_id': file_id,
        'file_type': file_type
    })
    
    keyboard = [
        ["üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ", "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await message.reply_text(
        f"‚úÖ { '–§–æ—Ç–æ' if file_type == 'photo' else '–í–∏–¥–µ–æ' } –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ!\n"
        f"üìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['request']['media_files'])}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )
    
    return REQUEST_MEDIA

async def create_request_final(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    try:
        request_data = context.user_data['request']
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        request_id = db.add_request(
            user_id=request_data['user_id'],
            username=request_data['username'],
            phone=request_data['phone'],
            department=request_data['department'],
            problem=request_data['problem'],
            urgency=request_data.get('urgency', 'üí§ –ù–ï –°–†–û–ß–ù–û')
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        for media_file in request_data.get('media_files', []):
            db.add_media_to_request(
                request_id, 
                media_file['file_id'], 
                media_file['file_type']
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_new_request(context, request_id, request_data)
        
        success_text = (
            f"üéâ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {request_data['department']}\n"
            f"üìû *–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:* {request_data['phone']}\n"
            f"üìé *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:* {len(request_data.get('media_files', []))}\n\n"
            f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {request_data['problem']}\n\n"
            f"üìä –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ \"üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏\""
        )
        
        await context.bot.send_message(
            chat_id=request_data['user_id'],
            text=success_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
        
        await show_main_menu(update, context)
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return ConversationHandler.END

async def notify_admins_new_request(context: ContextTypes.DEFAULT_TYPE, request_id: int, request_data: Dict):
    """üë• –£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    message = (
        f"üÜï *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üë§ {request_data['username']} | üìû {request_data['phone']}\n"
        f"üè¢ {request_data['department']}\n"
        f"üîß {request_data['problem'][:100]}...\n"
        f"üìé –ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤: {len(request_data.get('media_files', []))}\n"
        f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–¥–µ–ª–∞
    admin_ids = Config.ADMIN_CHAT_IDS.get(request_data['department'], [])
    for admin_id in admin_ids:
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
            keyboard = [
                [
                    InlineKeyboardButton("üë®‚Äçüíº –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{request_id}"),
                    InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{request_id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_message(
                chat_id=admin_id,
                text=message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

async def cancel_request(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‚ùå –û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    await update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([["üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"]], resize_keyboard=True)
    )
    return ConversationHandler.END

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í ====================

async def handle_admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üë®‚Äçüíº –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not Config.is_admin(user_id):
        await query.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    data = query.data
    
    if data.startswith('take_'):
        request_id = int(data.split('_')[1])
        await take_request_in_work(update, context, request_id, user_id)
    
    elif data.startswith('details_'):
        request_id = int(data.split('_')[1])
        await show_request_details(update, context, request_id)
    
    elif data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        await complete_request_with_comment(update, context, request_id, user_id)
    
    elif data.startswith('add_comment_'):
        request_id = int(data.split('_')[2])
        context.user_data['waiting_comment_for'] = request_id
        await query.message.reply_text(
            f"üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏ #{request_id}:",
            reply_markup=ReplyKeyboardRemove()
        )

async def take_request_in_work(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int):
    """üë®‚Äçüíº –ë–µ—Ä–µ—Ç –∑–∞—è–≤–∫—É –≤ —Ä–∞–±–æ—Ç—É"""
    query = update.callback_query
    
    try:
        request = db.get_request(request_id)
        if not request:
            await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        if request['status'] != 'new':
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ!", show_alert=True)
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
        admin_name = query.from_user.full_name
        db.update_request_status(request_id, 'in_progress', admin_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = query.message.text + f"\n\n‚úÖ *–í–ó–Ø–¢–ê –í –†–ê–ë–û–¢–£*\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"complete_{request_id}"),
                InlineKeyboardButton("üí¨ –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"add_comment_{request_id}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=request['user_id'],
            text=f"üîÑ *–ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É*\n\nüë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}",
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç—É: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏!", show_alert=True)

async def complete_request_with_comment(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int, admin_id: int):
    """‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞—è–≤–∫—É —Å –∑–∞–ø—Ä–æ—Å–æ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    
    context.user_data['completing_request'] = request_id
    context.user_data['completing_admin'] = query.from_user.full_name
    
    await query.message.reply_text(
        f"üí¨ *–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:",
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_admin_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ–º –ª–∏ –º—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
    if 'completing_request' in context.user_data:
        request_id = context.user_data['completing_request']
        admin_name = context.user_data['completing_admin']
        comment = update.message.text
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            db.update_request_status(request_id, 'completed')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            db.update_admin_comment(request_id, comment)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            request = db.get_request(request_id)
            if request:
                await context.bot.send_message(
                    chat_id=request['user_id'],
                    text=(
                        f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                        f"üë®‚Äçüíº –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {admin_name}\n"
                        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n\n"
                        f"‚≠ê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã:"
                    ),
                    reply_markup=create_rating_keyboard(request_id),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º!",
                reply_markup=ReplyKeyboardMarkup([["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
            )
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop('completing_request', None)
            context.user_data.pop('completing_admin', None)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏)
    elif 'waiting_comment_for' in context.user_data:
        request_id = context.user_data['waiting_comment_for']
        comment = update.message.text
        
        try:
            db.update_admin_comment(request_id, comment)
            await update.message.reply_text(
                f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –∫ –∑–∞—è–≤–∫–µ #{request_id}!",
                reply_markup=ReplyKeyboardMarkup([["üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"]], resize_keyboard=True)
            )
            context.user_data.pop('waiting_comment_for', None)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.")

async def show_request_details(update: Update, context: ContextTypes.DEFAULT_TYPE, request_id: int):
    """üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    
    try:
        request = db.get_request(request_id)
        if not request:
            await query.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã
        media_files = db.get_request_media(request_id)
        
        details_text = (
            f"üìã *–î–ï–¢–ê–õ–ò –ó–ê–Ø–í–ö–ò #{request_id}*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* {request['username']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {request['phone']}\n"
            f"üè¢ *–û—Ç–¥–µ–ª:* {request['department']}\n"
            f"üîß *–ü—Ä–æ–±–ª–µ–º–∞:* {request['problem']}\n"
            f"üìä *–°—Ç–∞—Ç—É—Å:* {request['status']}\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {request['created_at'][:16]}\n"
        )
        
        if request['assigned_admin']:
            details_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {request['assigned_admin']}\n"
        
        if request['admin_comment']:
            details_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {request['admin_comment']}\n"
        
        if media_files:
            details_text += f"üìé *–ú–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤:* {len(media_files)}\n"
        
        await query.message.reply_text(
            details_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        for media in media_files:
            try:
                if media['file_type'] == 'photo':
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=media['file_id'],
                        caption=f"üìé –§–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
                elif media['file_type'] == 'video':
                    await context.bot.send_video(
                        chat_id=query.message.chat_id,
                        video=media['file_id'],
                        caption=f"üìé –í–∏–¥–µ–æ –∫ –∑–∞—è–≤–∫–µ #{request_id}"
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞—è–≤–∫–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π!", show_alert=True)

# ==================== –°–ò–°–¢–ï–ú–ê –†–ï–ô–¢–ò–ù–ì–û–í ====================

async def request_rating_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‚≠ê –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('rate_'):
        _, request_id, rating = data.split('_')
        request_id = int(request_id)
        rating = int(rating)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
        request = db.get_request(request_id)
        if request and request['user_id'] == user_id:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                f"‚≠ê *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!*\n\n"
                f"üìã –ó–∞—è–≤–∫–∞ #{request_id}\n"
                f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚òÖ' * rating}{'‚òÜ' * (5 - rating)}\n\n"
                f"üíº –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º —É–ª—É—á—à–∞—Ç—å —Å–µ—Ä–≤–∏—Å!",
                parse_mode=ParseMode.MARKDOWN
            )

def create_rating_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """‚≠ê –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∑–∞—è–≤–∫–∏"""
    keyboard = []
    for i in range(1, 6):
        keyboard.append([
            InlineKeyboardButton(
                "‚òÖ" * i + "‚òÜ" * (5 - i), 
                callback_data=f"rate_{request_id}_{i}"
            )
        ])
    return InlineKeyboardMarkup(keyboard)

# ==================== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ ====================

async def admin_panel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üë®‚Äçüíº –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    admin_text = (
        "üë®‚Äçüíº *–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨*\n\n"
        "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏:*\n"
        "‚Ä¢ /requests - üìã –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /stats - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üí° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:*"
    )
    
    keyboard = [
        ["üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        admin_text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def admin_requests_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    if not Config.is_admin(user_id):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    requests = db.get_requests(status='new')
    if not requests:
        await update.message.reply_text("üì≠ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.")
        return
    
    requests_text = "üÜï *–ù–û–í–´–ï –ó–ê–Ø–í–ö–ò*\n\n"
    
    for req in requests[:10]:
        requests_text += (
            f"üìã *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üë§ {req['username']} | üìû {req['phone']}\n"
            f"üè¢ {req['department']}\n"
            f"üîß {req['problem'][:80]}...\n"
            f"üïí {req['created_at'][:16]}\n\n"
        )
    
    await update.message.reply_text(requests_text, parse_mode=ParseMode.MARKDOWN)

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

async def show_user_requests(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üìÇ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    requests = db.get_user_requests(user_id)
    
    if not requests:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
        return
    
    requests_text = "üìÇ *–í–ê–®–ò –ó–ê–Ø–í–ö–ò*\n\n"
    
    for req in requests[:10]:
        status_emoji = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }.get(req['status'], '‚ùì')
        
        requests_text += (
            f"{status_emoji} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üè¢ {req['department']}\n"
            f"üìù {req['problem'][:50]}...\n"
            f"‚è∞ {req['created_at'][:10]}\n"
            f"üî∏ –°—Ç–∞—Ç—É—Å: {req['status']}\n\n"
        )
    
    await update.message.reply_text(requests_text, parse_mode=ParseMode.MARKDOWN)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üÜò –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üÜò *–ü–û–ú–û–©–¨ –ü–û –ö–û–ú–ê–ù–î–ê–ú*\n\n"
        "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ /start - üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /new_request - üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É\n"
        "‚Ä¢ /my_requests - üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ /help - üÜò –ü–æ–º–æ—â—å\n\n"
        "üë®‚Äçüíº *–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*\n"
        "‚Ä¢ /admin - üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n"
        "‚Ä¢ /requests - üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫\n"
        "‚Ä¢ /stats - üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!"
    )
    
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """üí¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await update.message.reply_text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    elif text == "üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏":
        await show_user_requests(update, context)
    elif text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É":
        await new_request_command(update, context)
    elif text == "üÜò –ü–æ–º–æ—â—å":
        await help_command(update, context)
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    elif text == "üë®‚Äçüíº –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å" and Config.is_admin(user_id):
        await admin_panel_command(update, context)
    elif text == "üìã –í—Å–µ –∑–∞—è–≤–∫–∏" and Config.is_admin(user_id):
        await admin_requests_command(update, context)
    elif text == "üìã –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏" and Config.is_admin(user_id):
        await admin_requests_command(update, context)
    elif text == "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await show_main_menu(update, context)
    else:
        await update.message.reply_text("ü§î –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# ==================== –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ====================

def setup_handlers(application: Application):
    """üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (ConversationHandler)
    request_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("new_request", new_request_command),
                     MessageHandler(filters.Text("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), new_request_command)],
        states={
            REQUEST_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, request_phone)],
            REQUEST_DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, request_department)],
            REQUEST_PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, request_problem)],
            REQUEST_MEDIA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_media),
                MessageHandler(filters.PHOTO | filters.VIDEO | filters.Document.ALL, handle_media)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel_request)]
    )
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("my_requests", show_user_requests))
    application.add_handler(CommandHandler("admin", admin_panel_command))
    application.add_handler(CommandHandler("requests", admin_requests_command))
    application.add_handler(request_conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback (–∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    application.add_handler(CallbackQueryHandler(handle_admin_buttons, pattern="^(take_|details_|complete_|add_comment_)"))
    application.add_handler(CallbackQueryHandler(request_rating_callback, pattern="^rate_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_comment))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

# ==================== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ====================

def main() -> None:
    """üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Config.validate_config()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
        
        if not Config.BOT_TOKEN:
            logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            print("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        print("ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
        setup_handlers(application)
        print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("üéâ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("‚ú® –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
        print("   ‚Ä¢ üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Å –º–µ–¥–∏–∞ —Ñ–∞–π–ª–∞–º–∏")
        print("   ‚Ä¢ üë®‚Äçüíº –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        print("   ‚Ä¢ üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º")
        print("   ‚Ä¢ ‚≠ê –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        print("   ‚Ä¢ üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏")
        print("\nüöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        print("üîÑ –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞...")
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
