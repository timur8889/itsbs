from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
from database.models import Database, Category, Priority, Status, ITRequest
from keyboards.inline import get_categories_keyboard, get_priorities_keyboard, get_main_menu, get_confirmation_keyboard
from utils.validators import format_request_text, validate_phone
import re

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CATEGORY, PRIORITY, TITLE, DESCRIPTION, LOCATION, PHONE, CONFIRM = range(7)

class RequestHandlers:
    def __init__(self, db: Database):
        self.db = db
    
    async def create_request_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        await query.edit_message_text(
            "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—Ä–æ–±–ª–µ–º—ã:</b>",
            reply_markup=get_categories_keyboard(),
            parse_mode='HTML'
        )
        return CATEGORY
    
    async def category_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        category = query.data.replace('category_', '')
        context.user_data['category'] = category
        
        await query.edit_message_text(
            "üö® <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞—è–≤–∫–∏:</b>",
            reply_markup=get_priorities_keyboard(),
            parse_mode='HTML'
        )
        return PRIORITY
    
    async def priority_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == 'back_to_categories':
            return await self.create_request_start(update, context)
        
        priority = query.data.replace('priority_', '')
        context.user_data['priority'] = priority
        
        await query.edit_message_text(
            "üìù <b>–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):</b>\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º—ã—à—å –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ'</i>",
            parse_mode='HTML'
        )
        return TITLE
    
    async def title_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        title = update.message.text.strip()
        if len(title) > 200:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return TITLE
        
        context.user_data['title'] = title
        
        await update.message.reply_text(
            "üìÑ <b>–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:</b>\n\n"
            "<i>–£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É</i>",
            parse_mode='HTML'
        )
        return DESCRIPTION
    
    async def description_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        description = update.message.text.strip()
        if len(description) < 10:
            await update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return DESCRIPTION
        
        context.user_data['description'] = description
        
        await update.message.reply_text(
            "üè¢ <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b>\n\n"
            "<i>–ü—Ä–∏–º–µ—Ä: '–¶–µ—Ö ‚Ññ5, –∫–∞–±–∏–Ω–µ—Ç 203' –∏–ª–∏ '–ì–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å, 3 —ç—Ç–∞–∂'</i>",
            parse_mode='HTML'
        )
        return LOCATION
    
    async def location_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        location = update.message.text.strip()
        context.user_data['location'] = location
        
        await update.message.reply_text(
            "üìû <b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:</b>\n\n"
            "<i>–§–æ—Ä–º–∞—Ç: +7 XXX XXX-XX-XX –∏–ª–∏ 8 XXX XXX-XX-XX</i>",
            parse_mode='HTML'
        )
        return PHONE
    
    async def phone_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        phone = update.message.text.strip()
        
        if not validate_phone(phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:\n\n"
                "<i>–ü—Ä–∏–º–µ—Ä: +7 912 345-67-89 –∏–ª–∏ 8 (912) 345-67-89</i>",
                parse_mode='HTML'
            )
            return PHONE
        
        context.user_data['contact_phone'] = phone
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        request_data = {
            'id': 'NEW',
            'category': context.user_data['category'],
            'priority': context.user_data['priority'],
            'title': context.user_data['title'],
            'description': context.user_data['description'],
            'location': context.user_data['location'],
            'contact_phone': phone,
            'full_name': update.effective_user.full_name,
            'username': update.effective_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω',
            'status': 'new',
            'created_at': '–°–µ–π—á–∞—Å'
        }
        
        confirmation_text = format_request_text(request_data)
        confirmation_text += "\n\n‚úÖ <b>–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:</b>"
        
        await update.message.reply_text(
            confirmation_text,
            reply_markup=get_confirmation_keyboard(),
            parse_mode='HTML'
        )
        return CONFIRM
    
    async def confirm_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        if query.data == 'confirm_request':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            session = self.db.get_session()
            try:
                new_request = ITRequest(
                    user_id=query.from_user.id,
                    username=query.from_user.username,
                    full_name=query.from_user.full_name,
                    category=Category(context.user_data['category']),
                    priority=Priority(context.user_data['priority']),
                    title=context.user_data['title'],
                    description=context.user_data['description'],
                    location=context.user_data['location'],
                    contact_phone=context.user_data['contact_phone']
                )
                
                session.add(new_request)
                session.commit()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                await self.notify_admins(context, new_request)
                
                await query.edit_message_text(
                    f"‚úÖ <b>–ó–∞—è–≤–∫–∞ #{new_request.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                    f"–ú—ã —É–≤–µ–¥–æ–º–∏–ª–∏ IT-–æ—Ç–¥–µ–ª. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                    f"–î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'",
                    parse_mode='HTML',
                    reply_markup=get_main_menu()
                )
                
            except Exception as e:
                session.rollback()
                await query.edit_message_text(
                    "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT-–æ—Ç–¥–µ–ª –Ω–∞–ø—Ä—è–º—É—é.",
                    parse_mode='HTML',
                    reply_markup=get_main_menu()
                )
            finally:
                session.close()
        else:
            await query.edit_message_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_main_menu()
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END
    
    async def notify_admins(self, context: ContextTypes.DEFAULT_TYPE, request):
        from config import BotConfig
        from keyboards.inline import get_request_actions
        
        notification_text = f"üÜï <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request.id}</b>\n\n"
        notification_text += format_request_text(request.to_dict())
        
        for admin_id in BotConfig.admin_ids:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    reply_markup=get_request_actions(request.id, 'new'),
                    parse_mode='HTML'
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    async def cancel_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        context.user_data.clear()
        await query.edit_message_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_main_menu()
        )
        return ConversationHandler.END
    
    def get_conversation_handler(self):
        return ConversationHandler(
            entry_points=[CallbackQueryHandler(self.create_request_start, pattern='^create_request$')],
            states={
                CATEGORY: [CallbackQueryHandler(self.category_handler, pattern='^category_')],
                PRIORITY: [CallbackQueryHandler(self.priority_handler, pattern='^priority_|back_to_categories')],
                TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.title_handler)],
                DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.description_handler)],
                LOCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.location_handler)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.phone_handler)],
                CONFIRM: [CallbackQueryHandler(self.confirm_request, pattern='^confirm_request|cancel_request$')]
            },
            fallbacks=[CallbackQueryHandler(self.cancel_request, pattern='^cancel$')]
        )
