from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, MessageHandler, filters
from database.models import Database, Status
from keyboards.inline import get_admin_keyboard, get_request_actions
from utils.validators import format_request_text
from config import BotConfig
from sqlalchemy import func

class AdminHandlers:
    def __init__(self, db: Database):
        self.db = db
    
    def is_admin(self, user_id: int) -> bool:
        return str(user_id) in BotConfig.admin_ids
    
    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=True)
            return
        
        stats_text = await self.get_stats_text()
        
        await update.callback_query.edit_message_text(
            f"üë®‚Äçüíº <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ IT-–æ—Ç–¥–µ–ª–∞</b>\n\n{stats_text}",
            reply_markup=get_admin_keyboard(),
            parse_mode='HTML'
        )
    
    async def get_stats_text(self) -> str:
        session = self.db.get_session()
        try:
            total = session.query(ITRequest).count()
            new = session.query(ITRequest).filter(ITRequest.status == Status.NEW).count()
            in_progress = session.query(ITRequest).filter(ITRequest.status == Status.IN_PROGRESS).count()
            resolved_today = session.query(ITRequest).filter(
                ITRequest.status == Status.RESOLVED,
                func.date(ITRequest.updated_at) == func.current_date()
            ).count()
            
            return f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>
‚Ä¢ üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}
‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {new}
‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress}
‚Ä¢ ‚úÖ –†–µ—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {resolved_today}"""
        
        finally:
            session.close()
    
    async def show_all_requests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        session = self.db.get_session()
        try:
            requests = session.query(ITRequest).order_by(ITRequest.created_at.desc()).limit(10).all()
            
            if not requests:
                await update.callback_query.edit_message_text(
                    "üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫",
                    reply_markup=get_admin_keyboard()
                )
                return
            
            text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫:</b>\n\n"
            for req in requests:
                status_icon = {
                    'new': 'üÜï',
                    'in_progress': 'üîÑ', 
                    'on_hold': '‚è∏Ô∏è',
                    'resolved': '‚úÖ',
                    'closed': 'üìã'
                }
                
                priority_icon = {
                    'low': 'üü¢',
                    'medium': 'üü°',
                    'high': 'üî¥', 
                    'critical': 'üí•'
                }
                
                text += f"{status_icon[req.status.value]} #{req.id} {priority_icon[req.priority.value]} {req.title}\n"
                text += f"   üë§ {req.full_name} | üè¢ {req.location}\n"
                text += f"   ‚è∞ {req.created_at.strftime('%d.%m %H:%M')}\n\n"
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=get_admin_keyboard()
            )
            
        finally:
            session.close()
    
    async def show_request_detail(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        request_id = int(update.callback_query.data.split('_')[1])
        
        session = self.db.get_session()
        try:
            request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
            
            if not request:
                await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            text = format_request_text(request.to_dict())
            
            await update.callback_query.edit_message_text(
                text,
                reply_markup=get_request_actions(request_id, request.status.value),
                parse_mode='HTML'
            )
            
        finally:
            session.close()
    
    async def update_request_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        action, request_id = update.callback_query.data.split('_')
        request_id = int(request_id)
        
        session = self.db.get_session()
        try:
            request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
            
            if not request:
                await update.callback_query.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                return
            
            admin_name = update.effective_user.full_name
            
            if action == 'take':
                request.status = Status.IN_PROGRESS
                request.assigned_to = admin_name
            elif action == 'hold':
                request.status = Status.ON_HOLD
            elif action == 'resolve':
                request.status = Status.RESOLVED
            elif action == 'retake':
                request.status = Status.IN_PROGRESS
            elif action == 'close':
                request.status = Status.CLOSED
            
            session.commit()
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.notify_user_status_change(context, request)
            
            await update.callback_query.answer(f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {request.status.value}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = format_request_text(request.to_dict())
            await update.callback_query.edit_message_text(
                text,
                reply_markup=get_request_actions(request_id, request.status.value),
                parse_mode='HTML'
            )
            
        finally:
            session.close()
    
    async def notify_user_status_change(self, context: ContextTypes.DEFAULT_TYPE, request):
        status_messages = {
            'in_progress': f"üîÑ –ó–∞—è–≤–∫–∞ #{request.id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É",
            'on_hold': f"‚è∏Ô∏è –ó–∞—è–≤–∫–∞ #{request.id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", 
            'resolved': f"‚úÖ –ó–∞—è–≤–∫–∞ #{request.id} —Ä–µ—à–µ–Ω–∞",
            'closed': f"üìã –ó–∞—è–≤–∫–∞ #{request.id} –∑–∞–∫—Ä—ã—Ç–∞"
        }
        
        message = status_messages.get(request.status.value)
        if message and request.assigned_to:
            message += f" –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–º {request.assigned_to}"
        
        try:
            await context.bot.send_message(
                chat_id=request.user_id,
                text=message
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}: {e}")
    
    async def request_solution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not self.is_admin(update.effective_user.id):
            await update.callback_query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        
        request_id = int(update.callback_query.data.split('_')[1])
        context.user_data['editing_request'] = request_id
        
        await update.callback_query.message.reply_text(
            "üí° <b>–í–≤–µ–¥–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ:</b>",
            parse_mode='HTML'
        )
    
    async def save_solution(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if 'editing_request' not in context.user_data:
            return
        
        request_id = context.user_data['editing_request']
        solution = update.message.text
        
        session = self.db.get_session()
        try:
            request = session.query(ITRequest).filter(ITRequest.id == request_id).first()
            if request:
                request.solution = solution
                session.commit()
                
                await update.message.reply_text("‚úÖ –†–µ—à–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=request.user_id,
                        text=f"üí° –ü–æ –≤–∞—à–µ–π –∑–∞—è–≤–∫–µ #{request_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ:\n\n{solution}"
                    )
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            
        finally:
            session.close()
            context.user_data.pop('editing_request', None)
    
    def get_handlers(self):
        return [
            CallbackQueryHandler(self.admin_panel, pattern='^admin_panel$'),
            CallbackQueryHandler(self.show_all_requests, pattern='^admin_all_requests$'),
            CallbackQueryHandler(self.show_request_detail, pattern='^detail_'),
            CallbackQueryHandler(self.update_request_status, pattern='^(take|hold|resolve|retake|close)_'),
            CallbackQueryHandler(self.request_solution, pattern='^solution_'),
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_solution)
        ]
