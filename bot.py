import logging
import sqlite3
import os
import json
import re
import time
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN', '7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw')
    
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω (–∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º + –º–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)
    SUPER_ADMIN_IDS = [5024165375]
    
    # –ê–¥–º–∏–Ω—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º
    ADMIN_CHAT_IDS = {
        'üíª IT –æ—Ç–¥–µ–ª': [5024165375, 123456789],  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω IT
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': [5024165375, 987654321],  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω –º–µ—Ö–∞–Ω–∏–∫–∏
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': [5024165375, 555555555]  # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω + –∞–¥–º–∏–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫–∏
    }
    
    DB_PATH = "requests.db"
    LOG_LEVEL = logging.INFO

    @classmethod
    def get_admins_for_department(cls, department: str) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–¥–µ–ª–∞"""
        return cls.ADMIN_CHAT_IDS.get(department, [])
    
    @classmethod
    def get_all_admins(cls) -> List[int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤"""
        all_admins = set()
        for admins in cls.ADMIN_CHAT_IDS.values():
            all_admins.update(admins)
        return list(all_admins)
    
    @classmethod
    def is_super_admin(cls, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º"""
        return user_id in cls.SUPER_ADMIN_IDS
    
    @classmethod
    def is_admin(cls, user_id: int, department: str = None) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º (–æ—Ç–¥–µ–ª–∞ –∏–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º)"""
        if cls.is_super_admin(user_id):
            return True
        if department:
            return user_id in cls.ADMIN_CHAT_IDS.get(department, [])
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –ª—é–±–æ–≥–æ –æ—Ç–¥–µ–ª–∞
        for dept_admins in cls.ADMIN_CHAT_IDS.values():
            if user_id in dept_admins:
                return True
        return False

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=Config.LOG_LEVEL,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, DEPARTMENT, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD, OTHER_PLOT, SELECT_REQUEST = range(12)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
BROADCAST_AUDIENCE, BROADCAST_MESSAGE, BROADCAST_CONFIRM = range(12, 15)

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class Validators:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        return bool(re.match(pattern, phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏"""
        return len(name.strip()) >= 2 and len(name.strip()) <= 50 and name.replace(' ', '').isalpha()
    
    @staticmethod
    def validate_problem(problem: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        return 10 <= len(problem.strip()) <= 1000

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É', '‚ÑπÔ∏è –ü–æ–º–æ—â—å']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_main_menu_keyboard = [
    ['üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# üëë –ü–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
super_admin_panel_keyboard = [
    ['üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏'],
    ['üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏', 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üì¢ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
broadcast_keyboard = [
    ['üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'üë• –í—Å–µ–º –∞–¥–º–∏–Ω–∞–º'],
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞'],
    ['üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# üë• –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏
admin_management_keyboard = [
    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞'],
    ['üìã –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', 'üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# üè¢ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º
it_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT', 'üîÑ –í —Ä–∞–±–æ—Ç–µ IT'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

mechanics_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

electricity_admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –û–±—â–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
admin_department_select_keyboard = [
    ['üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

# üè¢ –í—ã–±–æ—Ä –æ—Ç–¥–µ–ª–∞
department_keyboard = [
    ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# üíª –¢–∏–ø—ã IT —Å–∏—Å—Ç–µ–º
it_systems_keyboard = [
    ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã'],
    ['üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è'],
    ['üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã'],
    ['üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ'],
    ['üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# üîß –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è –º–µ—Ö–∞–Ω–∏–∫–∏
mechanics_keyboard = [
    ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'],
    ['‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞', 'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
    ['üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏'],
    ['‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚ö° –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º –¥–ª—è —ç–ª–µ–∫—Ç—Ä–∏–∫–∏
electricity_keyboard = [
    ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞'],
    ['‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è'],
    ['üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã'],
    ['üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']
]

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    ['üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# üì∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ
photo_keyboard = [
    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚è∞ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
urgency_keyboard = [
    ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)'],
    ['‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)'],
    ['üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]

# üè¢ –¢–∏–ø—ã —É—á–∞—Å—Ç–∫–æ–≤
plot_type_keyboard = [
    ['üè¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å', 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    ['üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å', 'üõí –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª'],
    ['üíª –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞', 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚úèÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üë§ –ò–º—è', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'üè¢ –û—Ç–¥–µ–ª'],
    ['üìç –£—á–∞—Å—Ç–æ–∫', 'üîß –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'],
    ['‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å', 'üì∑ –§–æ—Ç–æ', '‚úÖ –ì–æ—Ç–æ–≤–æ'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# ‚óÄÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
edit_field_keyboard = [['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        department TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS statistics (
                        date TEXT PRIMARY KEY,
                        requests_count INTEGER DEFAULT 0,
                        completed_count INTEGER DEFAULT 0
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        created_at TEXT,
                        request_count INTEGER DEFAULT 0
                    )
                ''')
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_user_id ON requests(user_id)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_status ON requests(status)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_created_at ON requests(created_at)')
                cursor.execute('CREATE INDEX IF NOT EXISTS idx_requests_department ON requests(department)')
                
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, department, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('department'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                
                today = datetime.now().strftime('%Y-%m-%d')
                cursor.execute('''
                    INSERT OR REPLACE INTO statistics (date, requests_count)
                    VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
                ''', (today, today))
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count)
                    VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('first_name', ''),
                    user_data.get('last_name', ''),
                    datetime.now().isoformat(),
                    user_data.get('user_id')
                ))
                
                conn.commit()
                logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id')}")
                return request_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
                status_conditions = {
                    'new': "status = 'new'",
                    'in_progress': "status = 'in_progress'", 
                    'completed': "status = 'completed'",
                    'all': "status IN ('new', 'in_progress', 'completed')"
                }
                
                status_filter = status_conditions.get(filter_type, "status IN ('new', 'in_progress')")
                
                query = f'''
                    SELECT * FROM requests 
                    WHERE {status_filter}
                    ORDER BY 
                        CASE urgency 
                            WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                            WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                            ELSE 3
                        END,
                        created_at DESC
                    LIMIT ?
                '''
                
                cursor.execute(query, (limit,))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}'")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}': {e}")
            return []

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return {}

    def update_request(self, request_id: int, update_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                set_parts = []
                parameters = []
                
                for field, value in update_data.items():
                    if field in ['name', 'phone', 'department', 'plot', 'system_type', 'problem', 'photo', 'urgency']:
                        set_parts.append(f"{field} = ?")
                        parameters.append(value)
                
                set_parts.append("updated_at = ?")
                parameters.append(datetime.now().isoformat())
                parameters.append(request_id)
                
                if set_parts:
                    sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                    cursor.execute(sql, parameters)
                    conn.commit()
                    logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return False

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if admin_comment and assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
                elif admin_comment:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, datetime.now().isoformat(), request_id))
                elif assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
                else:
                    cursor.execute('''
                        UPDATE requests SET status = ?, updated_at = ? WHERE id = ?
                    ''', (status, datetime.now().isoformat(), request_id))
                
                conn.commit()
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================

def start_request_creation(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    context.user_data.clear()
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    update.message.reply_text(
        "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "üìù *–®–∞–≥ 1 –∏–∑ 8*\n"
        "üë§ –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    name_text = update.message.text.strip()
    
    if not Validators.validate_name(name_text):
        update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏!*\n\n"
            "üë§ –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return NAME
    
    context.user_data['name'] = name_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 2 –∏–∑ 8*\n"
        "üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n"
        "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ +7 999 123-45-67\n"
        "‚Ä¢ 8 999 123-45-67\n"
        "‚Ä¢ 79991234567",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    phone_text = update.message.text.strip()
    
    if not Validators.validate_phone(phone_text):
        update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!*\n\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ +7 999 123-45-67\n"
            "‚Ä¢ 8 999 123-45-67\n"
            "‚Ä¢ 79991234567\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHONE
    
    context.user_data['phone'] = phone_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 3 –∏–∑ 8*\n"
        "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –∑–∞—è–≤–∫–∏:*\n\n"
        "üíª *IT –æ—Ç–¥–µ–ª* - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
        "üîß *–ú–µ—Ö–∞–Ω–∏–∫–∞* - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "‚ö° *–≠–ª–µ–∫—Ç—Ä–∏–∫–∞* - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞",
        reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return DEPARTMENT

def department(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return show_main_menu(update, context)
    
    valid_departments = ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞']
    if update.message.text not in valid_departments:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    context.user_data['department'] = update.message.text
    
    # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
    if update.message.text == 'üíª IT –æ—Ç–¥–µ–ª':
        problem_keyboard = it_systems_keyboard
        problem_description = "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*"
    elif update.message.text == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        problem_keyboard = mechanics_keyboard
        problem_description = "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
    elif update.message.text == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        problem_keyboard = electricity_keyboard
        problem_description = "‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
    
    update.message.reply_text(
        f"üìù *–®–∞–≥ 4 –∏–∑ 8*\n{problem_description}",
        reply_markup=ReplyKeyboardMarkup(problem_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞':
        update.message.reply_text(
            "üè¢ *–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –¥–ª—è –∑–∞—è–≤–∫–∏:*",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
        )
        return DEPARTMENT
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
    department = context.user_data.get('department')
    if department == 'üíª IT –æ—Ç–¥–µ–ª':
        valid_systems = ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã', 'üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 
                        'üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã', 'üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ']
    elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        valid_systems = ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞',
                        'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏', '‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)']
    elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        valid_systems = ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
                        'üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', 'üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)']
    
    if update.message.text not in valid_systems:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            keyboard = it_systems_keyboard
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            keyboard = mechanics_keyboard
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            keyboard = electricity_keyboard
        
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SYSTEM_TYPE
    
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 5 –∏–∑ 8*\n"
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        department = context.user_data.get('department')
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            keyboard = it_systems_keyboard
            description = "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*"
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            keyboard = mechanics_keyboard
            description = "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            keyboard = electricity_keyboard
            description = "‚ö° *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–±–ª–µ–º—ã:*"
        
        update.message.reply_text(
            description,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return SYSTEM_TYPE
    
    if update.message.text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            "üìù *–®–∞–≥ 5 –∏–∑ 8*\n"
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª–∞:*\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è\n"
            "‚Ä¢ –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö ‚Ññ1\n"
            "‚Ä¢ –°–∫–ª–∞–¥ –≥–æ—Ç–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ü–∏–∏",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return OTHER_PLOT
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8*\n"
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
        "üí° *–ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:*\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'\n"
        "‚Ä¢ '–°—Ç–∞–Ω–æ–∫ –ß–ü–£ –∏–∑–¥–∞–µ—Ç –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —à—É–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ'\n"
        "‚Ä¢ '–ù–∞ —É—á–∞—Å—Ç–∫–µ –º–∏–≥–∞–µ—Ç —Å–≤–µ—Ç, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ'\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def other_plot(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 8*\n"
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'\n"
        "‚Ä¢ '–°—Ç–∞–Ω–æ–∫ –ß–ü–£ –∏–∑–¥–∞–µ—Ç –Ω–µ—Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–π —à—É–º –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ'\n"
        "‚Ä¢ '–ù–∞ —É—á–∞—Å—Ç–∫–µ –º–∏–≥–∞–µ—Ç —Å–≤–µ—Ç, –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ'\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    problem_text = update.message.text.strip()
    
    if not Validators.validate_problem(problem_text):
        update.message.reply_text(
            "‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ!*\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PROBLEM
    
    context.user_data['problem'] = problem_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 7 –∏–∑ 8*\n"
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

def urgency(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*",
            reply_markup=ReplyKeyboardRemove()
        )
        return PROBLEM
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    valid_urgency = ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)', '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)', 'üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)']
    if update.message.text not in valid_urgency:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    
    context.user_data['urgency'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 8 –∏–∑ 8*\n"
        "üì∏ *–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n"
        "üñºÔ∏è –§–æ—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n"
        "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ñ–æ—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    elif update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç:*\n\n"
            "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return show_request_summary(update, context)
    elif update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return show_request_summary(update, context)
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
        )
        return PHOTO

def show_request_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    
    if context.user_data.get('editing_mode'):
        return edit_request_choice(update, context)
    else:
        summary_text = (
            f"{context.user_data['summary']}\n\n"
            "üéØ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n"
            "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É\n"
            "‚úèÔ∏è –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\n"
            "üîô –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        )
        
        if context.user_data.get('photo'):
            update.message.reply_photo(
                photo=context.user_data['photo'],
                caption=summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        return ConversationHandler.END

def update_summary(context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –≤ user_data"""
    photo_status = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if context.user_data.get('photo') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üë§ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {context.user_data['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {context.user_data['timestamp']}"
    )
    
    context.user_data['summary'] = summary

def confirm_request(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        user = update.message.from_user
        
        try:
            request_id = db.save_request(context.user_data)
            send_admin_notification(context, context.user_data, request_id)
            
            department_contacts = {
                'üíª IT –æ—Ç–¥–µ–ª': 'üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç IT –æ—Ç–¥–µ–ª–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.*',
                'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': 'üîß *–ú–µ—Ö–∞–Ω–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.*',
                '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': '‚ö° *–≠–ª–µ–∫—Ç—Ä–∏–∫ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.*'
            }
            
            contact_text = department_contacts.get(context.user_data['department'], 'üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.*')
            
            confirmation_text = (
                f"üéâ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n"
                f"‚Ä¢ üè¢ –û—Ç–¥–µ–ª: {context.user_data['department']}\n"
                f"‚Ä¢ üîß –¢–∏–ø: {context.user_data['system_type']}\n"
                f"‚Ä¢ üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n"
                f"‚Ä¢ ‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n\n"
                f"{contact_text}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üíº"
            )
            
            if Config.is_super_admin(user.id):
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif Config.is_admin(user.id):
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username} –≤ –æ—Ç–¥–µ–ª {context.user_data['department']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            error_message = (
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ—Ç–¥–µ–ª –Ω–∞–ø—Ä—è–º—É—é."
            )
            
            if Config.is_super_admin(user.id):
                update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            elif Config.is_admin(user.id):
                update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    elif update.message.text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        context.user_data['editing_mode'] = True
        return edit_request_choice(update, context)
    
    elif update.message.text == 'üîô –û—Ç–º–µ–Ω–∏—Ç—å':
        return cancel_request(update, context)
    
    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ConversationHandler.END

def send_admin_notification(context: CallbackContext, user_data: Dict, request_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {user_data.get('department')}\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data.get('phone')}`\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {user_data.get('system_type')}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' if user_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {user_data.get('timestamp')}"
    )
    
    department = user_data.get('department')
    admin_ids = Config.get_admins_for_department(department)
    
    for admin_id in admin_ids:
        try:
            if user_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –≤ –æ—Ç–¥–µ–ª {department}"
                )
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e2}")

def cancel_request(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    if Config.is_super_admin(user_id):
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(super_admin_main_menu_keyboard, resize_keyboard=True)
        )
    elif Config.is_admin(user_id):
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True)
        )
    else:
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–û–ö ====================

def start_edit_request(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    requests = db.get_user_requests(user_id, 20)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    active_requests = [req for req in requests if req['status'] != 'completed']
    
    if not active_requests:
        update.message.reply_text(
            "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "üìã –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:\n"
            "‚Ä¢ üÜï –ù–æ–≤–∞—è\n"
            "‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    context.user_data['editable_requests'] = active_requests
    
    keyboard = []
    for req in active_requests:
        status_icon = 'üÜï' if req['status'] == 'new' else 'üîÑ'
        button_text = f"{status_icon} #{req['id']} - {req['system_type']} ({req['department']})"
        keyboard.append([button_text])
    
    keyboard.append(['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    
    update.message.reply_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return SELECT_REQUEST

def select_request_for_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = update.message.text
    
    if text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return cancel_edit(update, context)
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    editable_requests = context.user_data.get('editable_requests', [])
    selected_request = None
    
    for req in editable_requests:
        expected_text = f"{'üÜï' if req['status'] == 'new' else 'üîÑ'} #{req['id']} - {req['system_type']} ({req['department']})"
        if text == expected_text:
            selected_request = req
            break
    
    if not selected_request:
        update.message.reply_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup([['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        )
        return SELECT_REQUEST
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ context
    context.user_data['editing_request_id'] = selected_request['id']
    context.user_data['editing_request_data'] = selected_request
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ user_data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.update({
        'name': selected_request['name'],
        'phone': selected_request['phone'],
        'department': selected_request['department'],
        'plot': selected_request['plot'],
        'system_type': selected_request['system_type'],
        'problem': selected_request['problem'],
        'urgency': selected_request['urgency'],
        'photo': selected_request['photo'],
        'user_id': selected_request['user_id'],
        'username': selected_request['username'],
        'editing_existing': True  # –§–ª–∞–≥ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
    })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return show_edit_summary(update, context)

def show_edit_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞—è–≤–∫–∏"""
    request_data = context.user_data
    request_id = context.user_data.get('editing_request_id')
    
    photo_status = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if request_data.get('photo') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    summary = (
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
        f"üë§ *–ò–º—è:* {request_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request_data['phone']}`\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {request_data['department']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request_data['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request_data['plot']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {photo_status}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    update.message.reply_text(
        f"{summary}\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return EDIT_CHOICE

def edit_request_choice(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏)"""
    summary = context.user_data.get('summary', '')
    
    update.message.reply_text(
        f"{summary}\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return EDIT_CHOICE

def handle_edit_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    choice = update.message.text
    context.user_data['editing_field'] = choice
    
    if choice == 'üë§ –ò–º—è':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:*\n–¢–µ–∫—É—â–µ–µ: {context.user_data['name']}",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìû –¢–µ–ª–µ—Ñ–æ–Ω':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['phone']}\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üè¢ –û—Ç–¥–µ–ª':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['department']}",
            reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìç –£—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['plot']}",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üîß –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–¥–µ–ª–∞
        department = context.user_data.get('department')
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            keyboard = it_systems_keyboard
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            keyboard = mechanics_keyboard
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            keyboard = electricity_keyboard
        else:
            keyboard = it_systems_keyboard  # fallback
            
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['system_type']}",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìù –û–ø–∏—Å–∞–Ω–∏–µ':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n–¢–µ–∫—É—â–µ–µ: {context.user_data['problem']}",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å:*\n–¢–µ–∫—É—â–∞—è: {context.user_data['urgency']}",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üì∑ –§–æ—Ç–æ':
        photo_status = "–µ—Å—Ç—å —Ñ–æ—Ç–æ" if context.user_data.get('photo') else "–Ω–µ—Ç —Ñ–æ—Ç–æ"
        update.message.reply_text(
            f"‚úèÔ∏è *–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ:*\n–¢–µ–∫—É—â–µ–µ: {photo_status}",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚úÖ –ì–æ—Ç–æ–≤–æ':
        if context.user_data.get('editing_existing'):
            return save_edited_request(update, context)
        else:
            return show_request_summary(update, context)
    
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        return EDIT_CHOICE

def handle_edit_field(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è"""
    editing_field = context.user_data.get('editing_field')
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if editing_field == 'üë§ –ò–º—è':
        if not Validators.validate_name(text):
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 –±—É–∫–≤.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['name'] = text
        update.message.reply_text(
            "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìû –¢–µ–ª–µ—Ñ–æ–Ω':
        if not Validators.validate_phone(text):
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['phone'] = text
        update.message.reply_text(
            "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üè¢ –û—Ç–¥–µ–ª':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        
        valid_departments = ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞']
        if text not in valid_departments:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=ReplyKeyboardMarkup(department_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
        context.user_data['department'] = text
        update.message.reply_text(
            "‚úÖ –û—Ç–¥–µ–ª –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìç –£—á–∞—Å—Ç–æ–∫':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        
        if text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
            update.message.reply_text(
                "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞:*",
                reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']], resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['editing_other_plot'] = True
            return OTHER_PLOT
        
        context.user_data['plot'] = text
        update.message.reply_text(
            "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üîß –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ç–¥–µ–ª–∞']:
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
        department = context.user_data.get('department')
        if department == 'üíª IT –æ—Ç–¥–µ–ª':
            valid_systems = ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã', 'üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 
                            'üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã', 'üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ']
        elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
            valid_systems = ['üî© –°—Ç–∞–Ω–∫–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', 'üõ†Ô∏è –†—É—á–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç', '‚öôÔ∏è –ì–∏–¥—Ä–∞–≤–ª–∏–∫–∞/–ü–Ω–µ–≤–º–∞—Ç–∏–∫–∞',
                            'üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', 'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', 'üèóÔ∏è –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏', '‚ö° –î—Ä—É–≥–æ–µ (–º–µ—Ö–∞–Ω–∏–∫–∞)']
        elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
            valid_systems = ['üí° –û—Å–≤–µ—â–µ–Ω–∏–µ', 'üîå –≠–ª–µ–∫—Ç—Ä–æ–ø—Ä–æ–≤–æ–¥–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–æ—â–∏—Ç–æ–≤–æ–µ', 'üîã –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–∏—Ç–∞–Ω–∏—è',
                            'üéõÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞ –∏ –ö–ò–ü', 'üõë –ê–≤–∞—Ä–∏–π–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã', 'üîß –î—Ä—É–≥–æ–µ (—ç–ª–µ–∫—Ç—Ä–∏–∫–∞)']
        
        if text not in valid_systems:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if department == 'üíª IT –æ—Ç–¥–µ–ª':
                keyboard = it_systems_keyboard
            elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
                keyboard = mechanics_keyboard
            elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
                keyboard = electricity_keyboard
            
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
        context.user_data['system_type'] = text
        update.message.reply_text(
            "‚úÖ –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìù –û–ø–∏—Å–∞–Ω–∏–µ':
        if not Validators.validate_problem(text):
            update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤!",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['problem'] = text
        update.message.reply_text(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == '‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å':
        if text == 'üîô –ù–∞–∑–∞–¥':
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        context.user_data['urgency'] = text
        update.message.reply_text(
            "‚úÖ –°—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üì∑ –§–æ—Ç–æ':
        if text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ':
            update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
            context.user_data['photo'] = None
            update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup([
                    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                    ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
                ], resize_keyboard=True)
            )
            return EDIT_FIELD
    
    if context.user_data.get('editing_existing'):
        return show_edit_summary(update, context)
    else:
        return edit_request_choice(update, context)

def save_edited_request(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É"""
    request_id = context.user_data.get('editing_request_id')
    
    if not request_id:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        'name': context.user_data.get('name'),
        'phone': context.user_data.get('phone'),
        'department': context.user_data.get('department'),
        'plot': context.user_data.get('plot'),
        'system_type': context.user_data.get('system_type'),
        'problem': context.user_data.get('problem'),
        'urgency': context.user_data.get('urgency'),
        'photo': context.user_data.get('photo')
    }
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = db.update_request(request_id, update_data)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
            send_edit_notification(context, request_id, update_data)
            
            update.message.reply_text(
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n"
                f"üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–≤–∏–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {context.user_data.get('user_id')}")
        else:
            update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
        update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_request_id', None)
    context.user_data.pop('editing_request_data', None)
    context.user_data.pop('editing_existing', None)
    context.user_data.pop('editing_field', None)
    
    return ConversationHandler.END

def send_edit_notification(context: CallbackContext, request_id: int, update_data: Dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    notification_text = (
        f"‚úèÔ∏è *–ó–ê–Ø–í–ö–ê #{request_id} –û–ë–ù–û–í–õ–ï–ù–ê*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{context.user_data.get('username', 'N/A')}\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {update_data['department']}\n"
        f"üìõ *–ò–º—è:* {update_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{update_data['phone']}`\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {update_data['system_type']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {update_data['plot']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {update_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' if update_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {update_data['problem']}\n\n"
        f"üïí *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    department = update_data['department']
    admin_ids = Config.get_admins_for_department(department)
    
    for admin_id in admin_ids:
        try:
            if update_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=update_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def cancel_edit(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_request_id', None)
    context.user_data.pop('editing_request_data', None)
    context.user_data.pop('editing_existing', None)
    context.user_data.pop('editing_field', None)
    context.user_data.pop('editable_requests', None)
    
    update.message.reply_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
    )
    
    return ConversationHandler.END

def other_plot_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if update.message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
    )
    
    if context.user_data.get('editing_existing'):
        return show_edit_summary(update, context)
    else:
        return edit_request_choice(update, context)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.message.from_user
    user_id = user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
        welcome_text = (
            "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*\n\n"
            "üéØ *–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º\n"
            "‚Ä¢ üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏\n"
            "‚Ä¢ üè¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –æ—Ç–¥–µ–ª–∞–º\n\n"
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:*"
        )
    elif Config.is_admin(user_id):
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–¥–µ–ª—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
        user_departments = []
        for department, admins in Config.ADMIN_CHAT_IDS.items():
            if user_id in admins:
                user_departments.append(department)
        
        keyboard = admin_main_menu_keyboard
        welcome_text = (
            f"üë®‚Äçüíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†!*\n\n"
            f"üè¢ *–í–∞—à–∏ –æ—Ç–¥–µ–ª—ã:* {', '.join(user_departments)}\n\n"
            f"üéØ *–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            f"‚Ä¢ üè¢ –î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—è–º –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–æ–≤\n"
            f"‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞—à–∏–º –æ—Ç–¥–µ–ª–∞–º\n"
            f"‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –≤–∞—à–∏—Ö –æ—Ç–¥–µ–ª–æ–≤\n\n"
            f"üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:*"
        )
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = (
            "üíº *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫!*\n\n"
            "üõ†Ô∏è *–ú—ã –ø–æ–º–æ–∂–µ–º —Å:*\n"
            "‚Ä¢ üíª IT –ø—Ä–æ–±–ª–µ–º–∞–º–∏ - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
            "‚Ä¢ üîß –ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–º–∏ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏ - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ\n"
            "‚Ä¢ ‚ö° –≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ\n\n"
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
        )
    
    update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_my_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    requests = db.get_user_requests(user_id, 50)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "üéØ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    active_requests = [req for req in requests if req['status'] != 'completed']
    completed_requests = [req for req in requests if req['status'] == 'completed']
    
    if not active_requests and not completed_requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "üéØ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    if active_requests:
        update.message.reply_text(
            f"üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({len(active_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in active_requests:
            status_icons = {
                'new': 'üÜï –ù–û–í–ê–Ø',
                'in_progress': 'üîÑ –í –†–ê–ë–û–¢–ï', 
                'completed': '‚úÖ –í–´–ü–û–õ–ù–ï–ù–ê'
            }
            
            status_text = status_icons.get(req['status'], req['status'])
            
            request_text = (
                f"{status_icons.get(req['status'], 'üìã')} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {req['department']}\n"
                f"üîß *–¢–∏–ø:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin') and req['status'] == 'in_progress':
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    if completed_requests:
        update.message.reply_text(
            f"‚úÖ *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ({len(completed_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in completed_requests:
            request_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í–´–ü–û–õ–ù–ï–ù–ê*\n"
                f"üè¢ *–û—Ç–¥–µ–ª:* {req['department']}\n"
                f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem'][:100]}{'...' if len(req['problem']) > 100 else ''}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin'):
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    total_text = f"üìä *–ò—Ç–æ–≥–æ:* {len(active_requests)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {len(completed_requests)} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
    update.message.reply_text(
        total_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if Config.is_super_admin(user_id):
        if text == 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω':
            return show_super_admin_panel(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            return show_statistics(update, context)
        elif text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_request_creation(update, context)
        elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            return show_my_requests(update, context)
    elif Config.is_admin(user_id):
        if text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
            return show_admin_department_select(update, context)
        elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            return show_statistics(update, context)
        elif text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_request_creation(update, context)
        elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            return show_my_requests(update, context)
    else:
        if text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_request_creation(update, context)
        elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            return show_my_requests(update, context)
        elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_edit_request(update, context)
        elif text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å':
            return show_help(update, context)
    
    update.message.reply_text(
        "üéØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(
            super_admin_main_menu_keyboard if Config.is_super_admin(user_id) else
            admin_main_menu_keyboard if Config.is_admin(user_id) else
            user_main_menu_keyboard, 
            resize_keyboard=True
        )
    )

def show_help(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "üíº *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –∑–∞—è–≤–æ–∫*\n\n"
        "üéØ *–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É:*\n"
        "1. –ù–∞–∂–º–∏—Ç–µ '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª (IT, –ú–µ—Ö–∞–Ω–∏–∫–∞, –≠–ª–µ–∫—Ç—Ä–∏–∫–∞)\n"
        "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —à–∞–≥–∏ —Ñ–æ—Ä–º—ã\n"
        "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ\n\n"
        "üè¢ *–û—Ç–¥–µ–ª—ã:*\n"
        "‚Ä¢ üíª IT –æ—Ç–¥–µ–ª - –∫–æ–º–ø—å—é—Ç–µ—Ä—ã, –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–µ—Ç–∏\n"
        "‚Ä¢ üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ - —Å—Ç–∞–Ω–∫–∏, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç\n"
        "‚Ä¢ ‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ - –ø—Ä–æ–≤–æ–¥–∫–∞, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∞\n\n"
        "üìã *–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—è–≤–æ–∫:*\n"
        "‚Ä¢ '–ú–æ–∏ –∑–∞—è–≤–∫–∏' - –≤—Å–µ –≤–∞—à–∏ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—å–Ω–æ\n\n"
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:*\n"
        "‚Ä¢ –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ª—é–±—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
        "‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:*\n"
        "‚Ä¢ üî• –°–†–û–ß–ù–û - 1-2 —á–∞—Å–∞\n"
        "‚Ä¢ ‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø - –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è\n"
        "‚Ä¢ üí§ –ù–ï –°–†–û–ß–ù–û - 1-3 –¥–Ω—è\n\n"
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–¥–µ–ª–æ–≤:*\n"
        "‚Ä¢ IT –æ—Ç–¥–µ–ª: +7 XXX XXX-XX-XX\n"
        "‚Ä¢ –ú–µ—Ö–∞–Ω–∏–∫–∞: +7 XXX XXX-XX-XX\n"
        "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–∏–∫–∞: +7 XXX XXX-XX-XX"
    )
    
    user_id = update.message.from_user.id
    if Config.is_super_admin(user_id):
        keyboard = super_admin_main_menu_keyboard
    elif Config.is_admin(user_id):
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    update.message.reply_text(
        help_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –°–£–ü–ï–†-–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ====================

def show_super_admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return show_main_menu(update, context)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞
    all_requests = db.get_requests_by_filter('all', 1000)  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º
    department_stats = {}
    status_stats = {'new': 0, 'in_progress': 0, 'completed': 0}
    
    for req in all_requests:
        dept = req['department']
        status = req['status']
        
        department_stats[dept] = department_stats.get(dept, 0) + 1
        status_stats[status] = status_stats.get(status, 0) + 1
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∞–º
    admin_stats = {}
    for department, admins in Config.ADMIN_CHAT_IDS.items():
        for admin_id in admins:
            if admin_id not in Config.SUPER_ADMIN_IDS:
                admin_stats[admin_id] = admin_stats.get(admin_id, []) + [department]
    
    super_admin_text = (
        "üëë *–ü–ê–ù–ï–õ–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n\n"
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:*\n"
        f"üÜï –ù–æ–≤—ã—Ö: {status_stats['new']}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {status_stats['in_progress']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {status_stats['completed']}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(all_requests)}\n\n"
        f"üè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
    )
    
    for dept, count in sorted(department_stats.items()):
        super_admin_text += f"‚Ä¢ {dept}: {count}\n"
    
    super_admin_text += f"\nüë• *–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–∏—Å—Ç–µ–º—ã:* {len(admin_stats)}\n"
    
    update.message.reply_text(
        super_admin_text,
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def handle_super_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        return show_main_menu(update, context)
    
    if text == 'üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞':
        return start_broadcast(update, context)
    elif text == 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏':
        return show_admin_management(update, context)
    elif text == 'üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏':
        return show_all_requests(update, context)
    elif text == 'üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_complete_statistics(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)

def show_admin_management(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∞–º–∏.")
        return
    
    admin_list_text = "üë• *–°–ü–ò–°–û–ö –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í*\n\n"
    
    for department, admins in Config.ADMIN_CHAT_IDS.items():
        admin_list_text += f"üè¢ *{department}:*\n"
        for admin_id in admins:
            if admin_id in Config.SUPER_ADMIN_IDS:
                admin_list_text += f"  üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {admin_id}\n"
            else:
                admin_list_text += f"  üë®‚Äçüíº –ê–¥–º–∏–Ω: {admin_id}\n"
        admin_list_text += "\n"
    
    update.message.reply_text(
        admin_list_text,
        reply_markup=ReplyKeyboardMarkup(admin_management_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_all_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏.")
        return
    
    all_requests = db.get_requests_by_filter('all', 100)
    
    if not all_requests:
        update.message.reply_text(
            "üì≠ –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
            reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True)
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ç–¥–µ–ª–∞–º
    departments = {}
    for req in all_requests:
        dept = req['department']
        if dept not in departments:
            departments[dept] = []
        departments[dept].append(req)
    
    for department, requests in departments.items():
        update.message.reply_text(
            f"üè¢ *{department} - {len(requests)} –∑–∞—è–≤–æ–∫:*",
            parse_mode=ParseMode.MARKDOWN
        )
        
        for req in requests:
            show_request_for_admin(update, context, req)
    
    update.message.reply_text(
        f"üìä *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(all_requests)}*",
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_complete_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return
    
    all_requests = db.get_requests_by_filter('all', 1000)
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    department_stats = {}
    status_stats = {'new': 0, 'in_progress': 0, 'completed': 0}
    urgency_stats = {}
    system_type_stats = {}
    
    for req in all_requests:
        dept = req['department']
        status = req['status']
        urgency = req['urgency']
        system_type = req['system_type']
        
        department_stats[dept] = department_stats.get(dept, 0) + 1
        status_stats[status] = status_stats.get(status, 0) + 1
        urgency_stats[urgency] = urgency_stats.get(urgency, 0) + 1
        system_type_stats[system_type] = system_type_stats.get(system_type, 0) + 1
    
    stats_text = (
        "üìà *–ü–û–õ–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´*\n\n"
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ üÜï –ù–æ–≤—ã—Ö: {status_stats['new']}\n"
        f"‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {status_stats['in_progress']}\n"
        f"‚Ä¢ ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {status_stats['completed']}\n"
        f"‚Ä¢ üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(all_requests)}\n\n"
    )
    
    stats_text += "üè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
    for dept, count in sorted(department_stats.items()):
        stats_text += f"‚Ä¢ {dept}: {count}\n"
    
    stats_text += "\n‚è∞ *–ü–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏:*\n"
    for urgency, count in sorted(urgency_stats.items()):
        stats_text += f"‚Ä¢ {urgency}: {count}\n"
    
    stats_text += "\nüîß *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–±–ª–µ–º:*\n"
    for system_type, count in sorted(system_type_stats.items(), key=lambda x: x[1], reverse=True)[:10]:
        stats_text += f"‚Ä¢ {system_type}: {count}\n"
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_request_for_admin(update: Update, context: CallbackContext, req: Dict) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    status_icons = {
        'new': 'üÜï',
        'in_progress': 'üîÑ',
        'completed': '‚úÖ'
    }
    
    request_text = (
        f"{status_icons.get(req['status'])} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
        f"üè¢ *–û—Ç–¥–µ–ª:* {req['department']}\n"
        f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
        f"üîß *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
        f"üîÑ *–°—Ç–∞—Ç—É—Å:* {req['status']}\n"
        f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}"
    )
    
    if req.get('assigned_admin'):
        request_text += f"\nüë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if req.get('photo'):
        update.message.reply_photo(
            photo=req['photo'],
            caption=request_text,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        update.message.reply_text(
            request_text,
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê ====================

def start_broadcast(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = update.message.from_user.id
    
    if not Config.is_super_admin(user_id):
        update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.")
        return ConversationHandler.END
    
    context.user_data['broadcast_data'] = {}
    
    update.message.reply_text(
        "üì¢ *–ú–ê–°–°–û–í–ê–Ø –†–ê–°–°–´–õ–ö–ê*\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n"
        "‚Ä¢ üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - –≤—Å–µ–º –∫—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º\n"
        "‚Ä¢ üë®‚Äçüíº –í—Å–µ –∞–¥–º–∏–Ω—ã - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≤—Å–µ—Ö –æ—Ç–¥–µ–ª–æ–≤\n"
        "‚Ä¢ üè¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–¥–µ–ª - –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–¥–µ–ª–∞\n\n"
        "_–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç_",
        reply_markup=ReplyKeyboardMarkup(broadcast_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return BROADCAST_AUDIENCE

def handle_broadcast_audience(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    audience = update.message.text
    context.user_data['broadcast_data']['audience'] = audience
    
    audience_names = {
        'üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º': '–í–°–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú —Å–∏—Å—Ç–µ–º—ã',
        'üë• –í—Å–µ–º –∞–¥–º–∏–Ω–∞–º': '–í–°–ï–ú –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê–ú', 
        'üíª IT –æ—Ç–¥–µ–ª': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º IT –û–¢–î–ï–õ–ê',
        'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ú–ï–•–ê–ù–ò–ö–ò',
        '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞': '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≠–õ–ï–ö–¢–†–ò–ö–ò'
    }
    
    audience_name = audience_names.get(audience, audience)
    
    update.message.reply_text(
        f"üì¢ *–†–∞—Å—Å–ª—ã–ª–∫–∞ –¥–ª—è: {audience_name}*\n\n"
        "üí¨ *–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n"
        "üìù –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown\n"
        "üñºÔ∏è –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é\n"
        "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç\n\n"
        "‚ùå *–û—Ç–º–µ–Ω–∞:* /cancel",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return BROADCAST_MESSAGE

def handle_broadcast_message(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    broadcast_data = context.user_data['broadcast_data']
    
    if update.message.text:
        broadcast_data['message_type'] = 'text'
        broadcast_data['text'] = update.message.text
        broadcast_data['parse_mode'] = ParseMode.MARKDOWN
    elif update.message.photo:
        broadcast_data['message_type'] = 'photo'
        broadcast_data['photo'] = update.message.photo[-1].file_id
        broadcast_data['caption'] = update.message.caption
        broadcast_data['parse_mode'] = ParseMode.MARKDOWN
    elif update.message.document:
        broadcast_data['message_type'] = 'document'
        broadcast_data['document'] = update.message.document.file_id
        broadcast_data['caption'] = update.message.caption
        broadcast_data['parse_mode'] = ParseMode.MARKDOWN
    else:
        update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã.")
        return BROADCAST_MESSAGE
    
    # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    recipients_count = calculate_recipients_count(broadcast_data['audience'])
    
    # –ü–æ–∫–∞–∑ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    preview_text = (
        f"üì¢ *–ü–†–ï–î–ü–†–û–°–ú–û–¢–† –†–ê–°–°–´–õ–ö–ò*\n\n"
        f"üë• *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {broadcast_data['audience']}\n"
        f"üìä *–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π:* {recipients_count}\n\n"
        f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n"
    )
    
    if broadcast_data['message_type'] == 'text':
        preview_text += f"{broadcast_data['text']}\n\n"
        update.message.reply_text(
            preview_text,
            reply_markup=ReplyKeyboardMarkup([
                ['üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
                ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    elif broadcast_data['message_type'] == 'photo':
        preview_text += f"üñºÔ∏è –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: {broadcast_data['caption'] or '–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∏'}\n\n"
        update.message.reply_photo(
            photo=broadcast_data['photo'],
            caption=preview_text,
            reply_markup=ReplyKeyboardMarkup([
                ['üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
                ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    elif broadcast_data['message_type'] == 'document':
        preview_text += f"üìé –î–æ–∫—É–º–µ–Ω—Ç: {broadcast_data['caption'] or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
        update.message.reply_document(
            document=broadcast_data['document'],
            caption=preview_text,
            reply_markup=ReplyKeyboardMarkup([
                ['üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
                ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    return BROADCAST_CONFIRM

def calculate_recipients_count(audience: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if audience == 'üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã
        try:
            with sqlite3.connect(Config.DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT COUNT(DISTINCT user_id) FROM requests')
                return cursor.fetchone()[0] or 0
        except:
            return 0
    elif audience == 'üë• –í—Å–µ–º –∞–¥–º–∏–Ω–∞–º':
        return len(Config.get_all_admins())
    elif audience == 'üíª IT –æ—Ç–¥–µ–ª':
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π IT –æ—Ç–¥–µ–ª–∞
        return get_users_count_by_department('üíª IT –æ—Ç–¥–µ–ª')
    elif audience == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        return get_users_count_by_department('üîß –ú–µ—Ö–∞–Ω–∏–∫–∞')
    elif audience == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        return get_users_count_by_department('‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞')
    return 0

def get_users_count_by_department(department: str) -> int:
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª—É"""
    try:
        with sqlite3.connect(Config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT COUNT(DISTINCT user_id) FROM requests WHERE department = ?',
                (department,)
            )
            return cursor.fetchone()[0] or 0
    except:
        return 0

def get_users_by_department(department: str) -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª—É"""
    try:
        with sqlite3.connect(Config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                'SELECT DISTINCT user_id FROM requests WHERE department = ?',
                (department,)
            )
            return [row[0] for row in cursor.fetchall()]
    except:
        return []

def confirm_broadcast(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    if update.message.text == 'üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        return execute_broadcast(update, context)
    elif update.message.text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        return start_broadcast(update, context)
    else:
        return cancel_broadcast(update, context)

def execute_broadcast(update: Update, context: CallbackContext) -> int:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    broadcast_data = context.user_data['broadcast_data']
    audience = broadcast_data['audience']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    if audience == 'üì¢ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º':
        recipients = get_all_users()
    elif audience == 'üë• –í—Å–µ–º –∞–¥–º–∏–Ω–∞–º':
        recipients = Config.get_all_admins()
    elif audience == 'üíª IT –æ—Ç–¥–µ–ª':
        recipients = get_users_by_department('üíª IT –æ—Ç–¥–µ–ª')
    elif audience == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        recipients = get_users_by_department('üîß –ú–µ—Ö–∞–Ω–∏–∫–∞')
    elif audience == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        recipients = get_users_by_department('‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞')
    else:
        recipients = []
    
    successful = 0
    failed = 0
    
    update.message.reply_text(
        f"üîÑ *–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...*\n\n"
        f"üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(recipients)}\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    for user_id in recipients:
        try:
            if broadcast_data['message_type'] == 'text':
                context.bot.send_message(
                    chat_id=user_id,
                    text=broadcast_data['text'],
                    parse_mode=broadcast_data.get('parse_mode')
                )
            elif broadcast_data['message_type'] == 'photo':
                context.bot.send_photo(
                    chat_id=user_id,
                    photo=broadcast_data['photo'],
                    caption=broadcast_data.get('caption'),
                    parse_mode=broadcast_data.get('parse_mode')
                )
            elif broadcast_data['message_type'] == 'document':
                context.bot.send_document(
                    chat_id=user_id,
                    document=broadcast_data['document'],
                    caption=broadcast_data.get('caption'),
                    parse_mode=broadcast_data.get('parse_mode')
                )
            successful += 1
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
            time.sleep(0.1)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1
    
    # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = (
        f"‚úÖ *–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!*\n\n"
        f"üë• *–ê—É–¥–∏—Ç–æ—Ä–∏—è:* {audience}\n"
        f"‚úÖ *–£—Å–ø–µ—à–Ω–æ:* {successful}\n"
        f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å:* {failed}\n"
        f"üìä *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {successful/(successful+failed)*100:.1f}%\n\n"
        f"_–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞_ üì¢"
    )
    
    update.message.reply_text(
        report_text,
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    logger.info(f"–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω {update.message.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: {audience}, —É—Å–ø–µ—à–Ω–æ: {successful}, –æ—à–∏–±–æ–∫: {failed}")
    
    context.user_data.clear()
    return ConversationHandler.END

def get_all_users() -> List[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞"""
    try:
        with sqlite3.connect(Config.DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT DISTINCT user_id FROM requests')
            return [row[0] for row in cursor.fetchall()]
    except:
        return []

def cancel_broadcast(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    context.user_data.clear()
    update.message.reply_text(
        "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup(super_admin_panel_keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

# ==================== –†–ê–ó–î–ï–õ–¨–ù–´–ï –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ====================

def show_admin_department_select(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id):
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—è–º.")
        return show_main_menu(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫ –∫–∞–∫–∏–º –æ—Ç–¥–µ–ª–∞–º –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
    available_departments = []
    keyboard = []
    
    for department in ['üíª IT –æ—Ç–¥–µ–ª', 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞']:
        if Config.is_admin(user_id, department):
            available_departments.append(department)
            if department == 'üíª IT –æ—Ç–¥–µ–ª':
                keyboard.append(['üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
            elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
                keyboard.append(['üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
            elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
                keyboard.append(['‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'])
    
    keyboard.append(['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    
    if not available_departments:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –Ω–∏ –∫ –æ–¥–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return show_main_menu(update, context)
    
    update.message.reply_text(
        f"üë®‚Äçüíº *–í–´–ë–û–† –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò*\n\n"
        f"üè¢ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–¥–µ–ª—ã:* {', '.join(available_departments)}\n\n"
        f"üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã:*",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_department_admin_panel(update: Update, context: CallbackContext, department: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç–¥–µ–ª–∞"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id, department):
        update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ {department}.")
        return show_admin_department_select(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–¥–µ–ª–∞
    all_requests = db.get_requests_by_filter('all', 1000)
    department_requests = [req for req in all_requests if req['department'] == department]
    
    status_stats = {'new': 0, 'in_progress': 0, 'completed': 0}
    for req in department_requests:
        status_stats[req['status']] += 1
    
    # –í—ã–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç–¥–µ–ª–∞
    if department == 'üíª IT –æ—Ç–¥–µ–ª':
        keyboard = it_admin_panel_keyboard
        dept_icon = 'üíª'
    elif department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞':
        keyboard = mechanics_admin_panel_keyboard
        dept_icon = 'üîß'
    elif department == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞':
        keyboard = electricity_admin_panel_keyboard
        dept_icon = '‚ö°'
    
    admin_text = (
        f"{dept_icon} *–ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ {department.upper()}*\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–¥–µ–ª–∞:*\n"
        f"üÜï –ù–æ–≤—ã—Ö: {status_stats['new']}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {status_stats['in_progress']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {status_stats['completed']}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(department_requests)}\n\n"
        f"üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:*"
    )
    
    update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def handle_department_admin_panel(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –æ—Ç–¥–µ–ª–∞"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if text == 'üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_department_admin_panel(update, context, 'üíª IT –æ—Ç–¥–µ–ª')
    elif text == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_department_admin_panel(update, context, 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞')
    elif text == '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_department_admin_panel(update, context, '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞')
    elif text.endswith('IT'):
        return handle_it_admin_requests(update, context, text)
    elif text.endswith('–º–µ—Ö–∞–Ω–∏–∫–∏'):
        return handle_mechanics_admin_requests(update, context, text)
    elif text.endswith('—ç–ª–µ–∫—Ç—Ä–∏–∫–∏'):
        return handle_electricity_admin_requests(update, context, text)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)

def handle_it_admin_requests(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ IT –æ—Ç–¥–µ–ª–∞"""
    return show_department_requests_by_filter(update, context, 'üíª IT –æ—Ç–¥–µ–ª', filter_type)

def handle_mechanics_admin_requests(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏"""
    return show_department_requests_by_filter(update, context, 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞', filter_type)

def handle_electricity_admin_requests(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏"""
    return show_department_requests_by_filter(update, context, '‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', filter_type)

def show_department_requests_by_filter(update: Update, context: CallbackContext, department: str, filter_text: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    user_id = update.message.from_user.id
    
    if not Config.is_admin(user_id, department):
        update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—è–≤–∫–∞–º {department}.")
        return
    
    filter_map = {
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT': 'new',
        'üîÑ –í —Ä–∞–±–æ—Ç–µ IT': 'in_progress', 
        '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT': 'completed',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏': 'new',
        'üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏': 'in_progress',
        '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏': 'completed',
        'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': 'new',
        'üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': 'in_progress',
        '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏': 'completed'
    }
    
    filter_type = filter_map.get(filter_text, 'new')
    all_requests = db.get_requests_by_filter(filter_type, 100)
    department_requests = [req for req in all_requests if req['department'] == department]
    
    if not department_requests:
        update.message.reply_text(
            f"üì≠ –ó–∞—è–≤–∫–∏ {department} —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_text}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=ReplyKeyboardMarkup(
                it_admin_panel_keyboard if department == 'üíª IT –æ—Ç–¥–µ–ª' else
                mechanics_admin_panel_keyboard if department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞' else
                electricity_admin_panel_keyboard
            , resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        f"üìã {filter_text} ({len(department_requests)})",
        reply_markup=ReplyKeyboardMarkup(
            it_admin_panel_keyboard if department == 'üíª IT –æ—Ç–¥–µ–ª' else
            mechanics_admin_panel_keyboard if department == 'üîß –ú–µ—Ö–∞–Ω–∏–∫–∞' else
            electricity_admin_panel_keyboard
        , resize_keyboard=True)
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏
    for req in department_requests:
        show_request_for_admin(update, context, req)

def show_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    
    if Config.is_super_admin(user_id):
        return show_complete_statistics(update, context)
    
    all_requests = db.get_requests_by_filter('all', 1000)
    
    # –ï—Å–ª–∏ –æ–±—ã—á–Ω—ã–π –∞–¥–º–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –æ—Ç–¥–µ–ª—ã
    if Config.is_admin(user_id):
        user_departments = []
        for department, admins in Config.ADMIN_CHAT_IDS.items():
            if user_id in admins:
                user_departments.append(department)
        
        department_requests = [req for req in all_requests if req['department'] in user_departments]
        
        department_stats = {}
        status_stats = {'new': 0, 'in_progress': 0, 'completed': 0}
        
        for req in department_requests:
            dept = req['department']
            status = req['status']
            
            department_stats[dept] = department_stats.get(dept, 0) + 1
            status_stats[status] = status_stats.get(status, 0) + 1
        
        stats_text = (
            f"üìä *–°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–®–ò–• –û–¢–î–ï–õ–û–í*\n\n"
            f"üè¢ *–í–∞—à–∏ –æ—Ç–¥–µ–ª—ã:* {', '.join(user_departments)}\n\n"
            f"üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"üÜï –ù–æ–≤—ã—Ö: {status_stats['new']}\n"
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {status_stats['in_progress']}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {status_stats['completed']}\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(department_requests)}\n\n"
        )
        
        stats_text += "üè¢ *–ü–æ –æ—Ç–¥–µ–ª–∞–º:*\n"
        for dept, count in sorted(department_stats.items()):
            stats_text += f"‚Ä¢ {dept}: {count}\n"
        
        if Config.is_super_admin(user_id):
            keyboard = super_admin_main_menu_keyboard
        elif Config.is_admin(user_id):
            keyboard = admin_main_menu_keyboard
        else:
            keyboard = user_main_menu_keyboard
            
        update.message.reply_text(
            stats_text,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        user_requests = db.get_user_requests(user_id)
        active_count = len([req for req in user_requests if req['status'] != 'completed'])
        completed_count = len([req for req in user_requests if req['status'] == 'completed'])
        
        stats_text = (
            f"üìä *–í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
            f"üìà *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n"
            f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_count}\n"
            f"üìä –í—Å–µ–≥–æ: {len(user_requests)}\n\n"
            f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!_ üíº"
        )
        
        update.message.reply_text(
            stats_text,
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if Config.BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Application –≤–º–µ—Å—Ç–æ Updater –¥–ª—è –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
        from telegram.ext import Application
        
        application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, name)],
                PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
                DEPARTMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, department)],
                SYSTEM_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, system_type)],
                PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plot)],
                OTHER_PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_plot)],
                PROBLEM: [MessageHandler(filters.TEXT & ~filters.COMMAND, problem)],
                URGENCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, urgency)],
                PHOTO: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, photo),
                    MessageHandler(filters.PHOTO, photo)
                ],
                EDIT_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_field),
                    MessageHandler(filters.PHOTO, handle_edit_field)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(filters.Regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
            allow_reentry=True
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        edit_conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_edit_request),
            ],
            states={
                SELECT_REQUEST: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_request_for_edit)],
                EDIT_CHOICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_edit_field),
                    MessageHandler(filters.PHOTO, handle_edit_field)
                ],
                OTHER_PLOT: [MessageHandler(filters.TEXT & ~filters.COMMAND, other_plot_edit)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_edit),
                MessageHandler(filters.Regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), cancel_edit),
            ],
            allow_reentry=True
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        broadcast_conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(filters.Regex('^(üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞)$'), start_broadcast),
            ],
            states={
                BROADCAST_AUDIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_audience)],
                BROADCAST_MESSAGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_broadcast_message),
                    MessageHandler(filters.PHOTO, handle_broadcast_message),
                    MessageHandler(filters.Document.ALL, handle_broadcast_message)
                ],
                BROADCAST_CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_broadcast)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_broadcast),
                MessageHandler(filters.Regex('^(‚ùå –û—Ç–º–µ–Ω–∏—Ç—å|üîô –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$'), cancel_broadcast),
            ],
            allow_reentry=True
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler('start', show_main_menu))
        application.add_handler(CommandHandler('menu', show_main_menu))
        application.add_handler(CommandHandler('help', show_help))
        application.add_handler(CommandHandler('statistics', show_statistics))
        
        application.add_handler(conv_handler)
        application.add_handler(edit_conv_handler)
        application.add_handler(broadcast_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        application.add_handler(MessageHandler(filters.Regex('^(üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)$'), confirm_request))
        application.add_handler(MessageHandler(filters.Regex('^(‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å)$'), confirm_request))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        application.add_handler(MessageHandler(filters.Regex(
            '^(üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏|üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|‚ÑπÔ∏è –ü–æ–º–æ—â—å|üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω)$'), 
            handle_main_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        application.add_handler(MessageHandler(
            filters.Regex('^(üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞|üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏|üè¢ –í—Å–µ –∑–∞—è–≤–∫–∏|üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), 
            handle_super_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ–π –ø–æ –æ—Ç–¥–µ–ª–∞–º
        application.add_handler(MessageHandler(
            filters.Regex('^(üíª IT –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å|üîß –ú–µ—Ö–∞–Ω–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å|‚ö° –≠–ª–µ–∫—Ç—Ä–∏–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$'), 
            handle_department_admin_panel
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex('^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ IT|üîÑ –í —Ä–∞–±–æ—Ç–µ IT|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ IT|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT)$'), 
            handle_it_admin_requests
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex('^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ –º–µ—Ö–∞–Ω–∏–∫–∏|üîÑ –í —Ä–∞–±–æ—Ç–µ –º–µ—Ö–∞–Ω–∏–∫–∏|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ö–∞–Ω–∏–∫–∏)$'), 
            handle_mechanics_admin_requests
        ))
        
        application.add_handler(MessageHandler(
            filters.Regex('^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏|üîÑ –í —Ä–∞–±–æ—Ç–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–ª–µ–∫—Ç—Ä–∏–∫–∏)$'), 
            handle_electricity_admin_requests
        ))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞—è–≤–æ–∫ –∑–∞–ø—É—â–µ–Ω —Å —Å–∏—Å—Ç–µ–º–æ–π —Ä–∞–∑–¥–µ–ª—å–Ω—ã—Ö –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–µ–π!")
        logger.info(f"üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {Config.SUPER_ADMIN_IDS}")
        logger.info(f"üë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ –æ—Ç–¥–µ–ª–∞–º: {Config.ADMIN_CHAT_IDS}")
        
        application.run_polling()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
