import logging
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï!
ADMIN_CHAT_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)
BOT_TOKEN = "7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO = range(6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
confirm_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å']]
photo_keyboard = [['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
new_request_keyboard = [[InlineKeyboardButton('üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É', callback_data='new_request')]]
system_type_keyboard = [
    ['üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'üîê –°–ö–£–î'],
    ['üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Å–µ—Ç—å', 'üö® –ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    ['‚ùì –î—Ä—É–≥–æ–µ']
]
plot_type_keyboard = [
    ['–§—Ä–µ–∑–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', '–¢–æ–∫–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'],
    ['–£—á–∞—Å—Ç–æ–∫ —à—Ç–∞–º–ø–æ–≤–∫–∏', '–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫']
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
user_requests = {}

def send_admin_notification(context: CallbackContext, user_data: dict, user_id: int, username: str = None) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
    user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}" if username else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ù–µ —É–∫–∞–∑–∞–Ω"
    
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê*\n\n"
        f"{user_info}\n"
        f"üÜî ID: {user_id}\n"
        f"üìõ –ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìç –£—á–∞—Å—Ç–æ–∫: {user_data.get('plot', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîß –¢–∏–ø —Å–∏—Å—Ç–µ–º—ã: {user_data.get('system_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user_data.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üì∏ –§–æ—Ç–æ: {'‚úÖ –ï—Å—Ç—å' if user_data.get('photo') else '‚ùå –ù–µ—Ç'}\n\n"
        f"üïí –í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {user_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
        f"üí¨ *–î–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç*"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ
    user_requests[user_id] = {
        'user_data': user_data.copy(),
        'admin_messages': []
    }
    
    success_count = 0
    for admin_id in ADMIN_CHAT_IDS:
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
            if user_data.get('photo'):
                message = context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode='Markdown'
                )
            else:
                message = context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode='Markdown'
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user_requests[user_id]['admin_messages'].append({
                'admin_id': admin_id,
                'message_id': message.message_id
            })
            success_count += 1
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    return success_count

def forward_to_user(update: Update, context: CallbackContext) -> None:
    """–ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    admin_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if admin_id not in ADMIN_CHAT_IDS:
        return
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    user_id = None
    for uid, data in user_requests.items():
        for admin_msg in data['admin_messages']:
            if admin_msg['admin_id'] == admin_id:
                user_id = uid
                break
        if user_id:
            break
    
    if user_id:
        try:
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if update.message.text:
                context.bot.send_message(
                    chat_id=user_id,
                    text=f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:*\n\n{update.message.text}",
                    parse_mode='Markdown'
                )
                update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
            elif update.message.photo:
                context.bot.send_photo(
                    chat_id=user_id,
                    photo=update.message.photo[-1].file_id,
                    caption=f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:*\n\n{update.message.caption}" if update.message.caption else "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    parse_mode='Markdown'
                )
                update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
            elif update.message.document:
                context.bot.send_document(
                    chat_id=user_id,
                    document=update.message.document.file_id,
                    caption=f"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:*\n\n{update.message.caption}" if update.message.caption else "üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞",
                    parse_mode='Markdown'
                )
                update.message.reply_text("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

def start(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    context.user_data.clear()
    
    user = update.message.from_user
    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username
    
    update.message.reply_text(
        'üè† *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º!*\n\n'
        '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n'
        '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ.\n\n'
        '*–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?*',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    return NAME

def start_from_button(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–∑ –∫–Ω–æ–ø–∫–∏ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è."""
    query = update.callback_query
    query.answer()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    
    user = query.from_user
    context.user_data['user_id'] = user.id
    context.user_data['username'] = user.username
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    query.edit_message_text(
        '‚úèÔ∏è *–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É!*\n\n'
        '–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
        parse_mode='Markdown'
    )
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if update.callback_query:
        text = update.callback_query.data
        message = update.callback_query.message
    else:
        text = update.message.text
        message = update.message
    
    context.user_data['name'] = text
    
    message.reply_text(
        '*üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n'
        '–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —É—á–∞—Å—Ç–æ–∫."""
    context.user_data['phone'] = update.message.text
    update.message.reply_text(
        '*üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–∫–∞:*',
        reply_markup=ReplyKeyboardMarkup(
            plot_type_keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        ),
        parse_mode='Markdown'
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–æ–∫ –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã."""
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        '*üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–ª–∞–±–æ—Ç–æ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:*',
        reply_markup=ReplyKeyboardMarkup(
            system_type_keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        ),
        parse_mode='Markdown'
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã."""
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        '*üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:*\n\n'
        '–ü—Ä–∏–º–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–º —É—á–∞—Å—Ç–∫–µ\n'
        '–ò–ª–∏: –¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∂–∞—Ä–Ω–æ–π —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ —É—á–∞—Å—Ç–∫–µ —à—Ç–∞–º–ø–æ–≤–∫–∏',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ."""
    context.user_data['problem'] = update.message.text
    update.message.reply_text(
        '*üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n'
        '–§–æ—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.',
        reply_markup=ReplyKeyboardMarkup(
            photo_keyboard, 
            one_time_keyboard=True, 
            resize_keyboard=True
        ),
        parse_mode='Markdown'
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫."""
    if update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            '*üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:*\n\n'
            '–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–Ω–æ —Ñ–æ—Ç–æ.',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        context.user_data['photo'] = None
        return show_summary(update, context)
    elif update.message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ñ–æ—Ç–æ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ)
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            '‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!',
            reply_markup=ReplyKeyboardRemove()
        )
        return show_summary(update, context)
    else:
        update.message.reply_text(
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.',
            reply_markup=ReplyKeyboardMarkup(
                photo_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True
            )
        )
        return PHOTO

def show_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏."""
    from datetime import datetime
    
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
    photo_status = "‚úÖ –ï—Å—Ç—å" if context.user_data.get('photo') else "‚ùå –ù–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üìõ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è:* {context.user_data['timestamp']}"
    )
    
    context.user_data['summary'] = summary
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É —Å —Ñ–æ—Ç–æ
    if context.user_data.get('photo'):
        update.message.reply_photo(
            photo=context.user_data['photo'],
            caption=f"{summary}\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:*",
            reply_markup=ReplyKeyboardMarkup(
                confirm_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True
            ),
            parse_mode='Markdown'
        )
    else:
        update.message.reply_text(
            f"{summary}\n\n"
            "*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:*",
            reply_markup=ReplyKeyboardMarkup(
                confirm_keyboard, 
                one_time_keyboard=True, 
                resize_keyboard=True
            ),
            parse_mode='Markdown'
        )
    return ConversationHandler.END

def confirm(update: Update, context: CallbackContext) -> int:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        user = update.message.from_user
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        success_count = send_admin_notification(
            context, 
            context.user_data,
            user.id,
            user.username
        )
        
        if success_count > 0:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            update.message.reply_text(
                '‚úÖ *–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!*\n\n'
                'üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n'
                '‚è±Ô∏è –û–±—ã—á–Ω–æ –º—ã –ø–µ—Ä–µ–∑–≤–∞–Ω–∏–≤–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç.\n\n'
                '_–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!_ üõ†Ô∏è',
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
            update.message.reply_text(
                '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É:',
                reply_markup=InlineKeyboardMarkup(new_request_keyboard)
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞—è–≤–∫—É
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {user.username}: {context.user_data['name']} - {context.user_data['phone']}")
        else:
            update.message.reply_text(
                '‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.*\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.',
                reply_markup=ReplyKeyboardRemove(),
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data.clear()
        return ConversationHandler.END
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ
        update.message.reply_text(
            '‚úèÔ∏è *–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.*\n\n'
            '–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?',
            reply_markup=ReplyKeyboardRemove(),
            parse_mode='Markdown'
        )
        return NAME

def new_request_callback(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    query.answer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    return start_from_button(update, context)

def cancel(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    update.message.reply_text(
        '‚ùå *–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.*\n\n'
        '–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üë∑',
        reply_markup=ReplyKeyboardRemove(),
        parse_mode='Markdown'
    )
    context.user_data.clear()
    return ConversationHandler.END

def admin_stats(update: Update, context: CallbackContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_requests = len(user_requests)
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {total_requests}\n"
        f"üîÑ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(ADMIN_CHAT_IDS)}\n"
        f"üìà –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –≤ –ø–∞–º—è—Ç–∏: {total_requests}"
    )
    
    update.message.reply_text(stats_text, parse_mode='Markdown')

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    if not ADMIN_CHAT_IDS or ADMIN_CHAT_IDS[0] == "ADMIN_CHAT_ID_1":
        logger.error("‚ùå ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã! –ó–∞–º–µ–Ω–∏—Ç–µ ADMIN_CHAT_IDS –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id.")
        return
    
    try:
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ entry points
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                CallbackQueryHandler(new_request_callback, pattern='^new_request$')
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
            per_message=False  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è warning
        )

        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(MessageHandler(Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å|‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å)$'), confirm))
        dispatcher.add_handler(CommandHandler('stats', admin_stats))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        dispatcher.add_handler(MessageHandler(
            Filters.chat(ADMIN_CHAT_IDS) & 
            (Filters.text | Filters.photo | Filters.document) & 
            ~Filters.command, 
            forward_to_user
        ))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_CHAT_IDS}")
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
