import logging
import sqlite3
import os
import json
import csv
import gspread
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)
from oauth2client.service_account import ServiceAccountCredentials
import threading
import time
)
from dotenv import load_dotenv
load_dotenv()

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_CHAT_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = "7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
GOOGLE_SHEETS_CONFIG = {
    'enabled': True,  # –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    'spreadsheet_name': '–ó–∞—è–≤–∫–∏ —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
    'credentials_file': 'credentials.json',  # –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    'worksheet_name': '–ó–∞—è–≤–∫–∏',
    'sync_interval': 30,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    'auto_sync': True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "requests.db"

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (0)', 'üîÑ –í —Ä–∞–±–æ—Ç–µ (0)'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üìä Excel –æ–Ω–ª–∞–π–Ω']
]

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
admin_management_keyboard = [
    ['üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏'],
    ['üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Excel'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω
excel_online_keyboard = [
    ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel'],
    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
create_request_keyboard = [
    ['üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'üîê –°–ö–£–î'],
    ['üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Å–µ—Ç—å', 'üö® –ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
confirm_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É']]
photo_keyboard = [['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ']]
urgency_keyboard = [
    ['üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)'],
    ['üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)'],
    ['üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ (3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]
plot_type_keyboard = [
    ['üè≠ –§—Ä–µ–∑–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', '‚öôÔ∏è –¢–æ–∫–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'],
    ['üî® –£—á–∞—Å—Ç–æ–∫ —à—Ç–∞–º–ø–æ–≤–∫–∏', 'üì¶ –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
    ['üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫', 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É'],
    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å'],
    ['üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']
]

edit_field_keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# ==================== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

class GoogleSheetsManager:
    def __init__(self, config: Dict):
        self.config = config
        self.sheet = None
        self.connected = False
        self.last_sync = None
        self.sync_in_progress = False
        self.init_sheets()

    def init_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        if not self.config['enabled']:
            logger.info("üìä Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        try:
            if not os.path.exists(self.config['credentials_file']):
                logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {self.config['credentials_file']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self._create_sample_credentials()
                return

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            scope = ['https://spreadsheets.google.com/feeds', 
                    'https://www.googleapis.com/auth/drive']
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.config['credentials_file'], scope)
            client = gspread.authorize(creds)

            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            try:
                self.sheet = client.open(self.config['spreadsheet_name']).worksheet(
                    self.config['worksheet_name'])
            except gspread.SpreadsheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                self.sheet = client.create(self.config['spreadsheet_name'])
                self.sheet = self.sheet.sheet1
                self.sheet.update_title(self.config['worksheet_name'])
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self._create_headers()
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
                self.sheet = client.open(self.config['spreadsheet_name']).add_worksheet(
                    title=self.config['worksheet_name'], rows=1000, cols=20)
                self._create_headers()

            self.connected = True
            logger.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            self._start_background_sync()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.connected = False

    def _create_sample_credentials(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credentials.json"""
        sample_credentials = {
            "type": "service_account",
            "project_id": "your-project-id",
            "private_key_id": "your-private-key-id",
            "private_key": "-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY\n-----END PRIVATE KEY-----\n",
            "client_email": "your-service-account@your-project.iam.gserviceaccount.com",
            "client_id": "your-client-id",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com"
        }
        
        with open('credentials_sample.json', 'w', encoding='utf-8') as f:
            json.dump(sample_credentials, f, indent=2)
        
        logger.info("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ credentials_sample.json. –ó–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

    def _create_headers(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        headers = [
            'ID', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ—á–Ω–æ—Å—Ç—å', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—á–∞—Å—Ç–æ–∫',
            '–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã', '–§–æ—Ç–æ', 'Username',
            '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'User ID'
        ]
        self.sheet.update('A1:O1', [headers])
        logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ Google Sheets —Å–æ–∑–¥–∞–Ω—ã")

    def _start_background_sync(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        if not self.config['auto_sync']:
            return
            
        def sync_worker():
            while True:
                try:
                    if self.connected:
                        self.sync_all_requests()
                    time.sleep(self.config['sync_interval'])
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                    time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

        thread = threading.Thread(target=sync_worker, daemon=True)
        thread.start()
        logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

    def sync_all_requests(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å Google Sheets"""
        if not self.connected or self.sync_in_progress:
            return

        self.sync_in_progress = True
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã
            db = Database(DB_PATH)
            requests = db.get_all_requests_for_sync()
            
            if not requests:
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            for req in requests:
                row = [
                    req['id'],
                    req['status'],
                    req['urgency'],
                    req['name'],
                    req['phone'],
                    req['plot'],
                    req['system_type'],
                    req['problem'],
                    '‚úÖ' if req['photo'] else '‚ùå',
                    req.get('username', ''),
                    req.get('assigned_admin', ''),
                    req.get('admin_comment', ''),
                    req['created_at'],
                    req.get('updated_at', req['created_at']),
                    req['user_id']
                ]
                data.append(row)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            self.sheet.clear()
            self._create_headers()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if data:
                self.sheet.update(f'A2:O{len(data) + 1}', data)
            
            self.last_sync = datetime.now()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞—è–≤–æ–∫ —Å Google Sheets")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        finally:
            self.sync_in_progress = False

    def sync_single_request(self, request_data: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞—è–≤–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.connected or not self.config['auto_sync']:
            return

        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π
            all_records = self.sheet.get_all_records()
            row_index = None
            
            for i, record in enumerate(all_records, start=2):  # start=2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ 1 —Å—Ç—Ä–æ–∫–µ
                if str(record.get('ID', '')) == str(request_data['id']):
                    row_index = i
                    break

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = [
                request_data['id'],
                request_data['status'],
                request_data['urgency'],
                request_data['name'],
                request_data['phone'],
                request_data['plot'],
                request_data['system_type'],
                request_data['problem'],
                '‚úÖ' if request_data['photo'] else '‚ùå',
                request_data.get('username', ''),
                request_data.get('assigned_admin', ''),
                request_data.get('admin_comment', ''),
                request_data['created_at'],
                request_data.get('updated_at', request_data['created_at']),
                request_data['user_id']
            ]

            if row_index:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                self.sheet.update(f'A{row_index}:O{row_index}', [row_data])
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_data['id']} –≤ Google Sheets")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                self.sheet.append_row(row_data)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_data['id']} –≤ Google Sheets")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{request_data['id']}: {e}")

    def get_sheet_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Sheets"""
        if not self.connected:
            return {'error': 'Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
        
        try:
            all_records = self.sheet.get_all_records()
            
            stats = {
                'total_rows': len(all_records),
                'last_sync': self.last_sync.strftime('%d.%m.%Y %H:%M') if self.last_sync else '–ù–∏–∫–æ–≥–¥–∞',
                'new_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'new']),
                'in_progress_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'in_progress']),
                'completed_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'completed']),
                'urgent_count': len([r for r in all_records if '–°—Ä–æ—á–Ω–æ' in str(r.get('–°—Ä–æ—á–Ω–æ—Å—Ç—å', ''))])
            }
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Google Sheets: {e}")
            return {'error': str(e)}

    def get_sheet_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL Google Sheets"""
        if not self.connected:
            return "Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        return f"https://docs.google.com/spreadsheets/d/{self.sheet.spreadsheet.id}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
sheets_manager = GoogleSheetsManager(GOOGLE_SHEETS_CONFIG)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    name TEXT,
                    phone TEXT,
                    plot TEXT,
                    system_type TEXT,
                    problem TEXT,
                    photo TEXT,
                    urgency TEXT,
                    status TEXT DEFAULT 'new',
                    created_at TEXT,
                    updated_at TEXT,
                    admin_comment TEXT,
                    assigned_admin TEXT,
                    synced_with_sheets INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS statistics (
                    date TEXT PRIMARY KEY,
                    requests_count INTEGER DEFAULT 0,
                    completed_count INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TEXT,
                    request_count INTEGER DEFAULT 0,
                    last_activity TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sheets_sync (
                    last_sync_time TEXT,
                    total_synced INTEGER DEFAULT 0
                )
            ''')
            conn.commit()

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, name, phone, plot, system_type, problem, photo, urgency, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('name'),
                user_data.get('phone'),
                user_data.get('plot'),
                user_data.get('system_type'),
                user_data.get('problem'),
                user_data.get('photo'),
                user_data.get('urgency'),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            request_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('''
                INSERT OR REPLACE INTO statistics (date, requests_count)
                VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
            ''', (today, today))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count, last_activity)
                VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('first_name', ''),
                user_data.get('last_name', ''),
                datetime.now().isoformat(),
                user_data.get('user_id'),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            self._sync_request_to_sheets(request_id)
            
            return request_id

    def _sync_request_to_sheets(self, request_id: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É —Å Google Sheets"""
        try:
            request = self.get_request(request_id)
            if request:
                sheets_manager.sync_single_request(request)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        UPDATE requests SET synced_with_sheets = 1 WHERE id = ?
                    ''', (request_id,))
                    conn.commit()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if admin_comment and assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
            elif admin_comment:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, admin_comment, datetime.now().isoformat(), request_id))
            elif assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests SET status = ?, updated_at = ?, synced_with_sheets = 0 WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            
            conn.commit()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            self._sync_request_to_sheets(request_id)

    def get_all_requests_for_sync(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests ORDER BY created_at DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_unsynced_requests(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests WHERE synced_with_sheets = 0 ORDER BY created_at DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if filter_type == 'new':
                status_filter = "status = 'new'"
            elif filter_type == 'in_progress':
                status_filter = "status = 'in_progress'"
            elif filter_type == 'urgent':
                status_filter = "urgency LIKE '%–°—Ä–æ—á–Ω–æ%' AND status IN ('new', 'in_progress')"
            elif filter_type == 'completed':
                status_filter = "status = 'completed'"
            else:  # all active
                status_filter = "status IN ('new', 'in_progress')"
            
            cursor.execute(f'''
                SELECT * FROM requests 
                WHERE {status_filter}
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (limit,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return {}

    def get_my_in_progress_requests(self, admin_name: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE assigned_admin = ? AND status = 'in_progress'
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (admin_name, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM requests')
            total_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "new"')
            new_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "in_progress"')
            in_progress_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "completed"')
            completed_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(DISTINCT user_id) FROM users')
            total_users = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('SELECT requests_count FROM statistics WHERE date = ?', (today,))
            today_requests = cursor.fetchone()
            today_requests = today_requests[0] if today_requests else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            cursor.execute('SELECT requests_count FROM statistics WHERE date = ?', (yesterday,))
            yesterday_requests = cursor.fetchone()
            yesterday_requests = yesterday_requests[0] if yesterday_requests else 0
            
            return {
                'total_requests': total_requests,
                'new_requests': new_requests,
                'in_progress_requests': in_progress_requests,
                'completed_requests': completed_requests,
                'total_users': total_users,
                'today_requests': today_requests,
                'yesterday_requests': yesterday_requests
            }

    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM users 
                ORDER BY last_activity DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def export_requests_to_csv(self, filename: str = "export_requests.csv") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏ –≤ CSV —Ñ–∞–π–ª"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, user_id, username, name, phone, plot, system_type, problem, 
                       urgency, status, created_at, updated_at, assigned_admin, admin_comment
                FROM requests
                ORDER BY created_at DESC
            ''')
            
            import csv
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow([
                    'ID', 'User ID', 'Username', 'Name', 'Phone', 'Plot', 
                    'System Type', 'Problem', 'Urgency', 'Status', 
                    'Created At', 'Updated At', 'Assigned Admin', 'Admin Comment'
                ])
                # –î–∞–Ω–Ω—ã–µ
                for row in cursor.fetchall():
                    writer.writerow(row)
            
            return filename

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø EXCEL ONLINE ====================

def show_excel_online(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    excel_text = (
        "üìä *Excel Online - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å Google Sheets\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    if sheets_manager.connected:
        stats = sheets_manager.get_sheet_stats()
        if 'error' not in stats:
            excel_text += (
                f"‚úÖ *Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω*\n"
                f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_rows']}\n"
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {stats['last_sync']}\n"
                f"üìé –°—Å—ã–ª–∫–∞: {sheets_manager.get_sheet_url()}\n\n"
            )
        else:
            excel_text += f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}\n\n"
    else:
        excel_text += "‚ùå *Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n\n"
    
    excel_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    update.message.reply_text(
        excel_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def sync_with_excel(update: Update, context: CallbackContext) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...",
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def sync_thread():
        try:
            sheets_manager.sync_all_requests()
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
        except Exception as e:
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
    
    threading.Thread(target=sync_thread).start()

def show_excel_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    stats = sheets_manager.get_sheet_stats()
    
    if 'error' in stats:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Sheets*\n\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_rows']}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats['new_count']}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_count']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_count']}\n"
        f"üî¥ –°—Ä–æ—á–Ω—ã—Ö: {stats['urgent_count']}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {stats['last_sync']}\n\n"
        f"üìé *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:*\n{sheets_manager.get_sheet_url()}"
    )
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_excel_settings(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    settings_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets*\n\n"
        f"üìä –í–∫–ª—é—á–µ–Ω–æ: {'‚úÖ –î–∞' if GOOGLE_SHEETS_CONFIG['enabled'] else '‚ùå –ù–µ—Ç'}\n"
        f"üìÅ –¢–∞–±–ª–∏—Ü–∞: {GOOGLE_SHEETS_CONFIG['spreadsheet_name']}\n"
        f"üìÑ –õ–∏—Å—Ç: {GOOGLE_SHEETS_CONFIG['worksheet_name']}\n"
        f"üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if GOOGLE_SHEETS_CONFIG['auto_sync'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {GOOGLE_SHEETS_CONFIG['sync_interval']} —Å–µ–∫.\n\n"
        f"üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if sheets_manager.connected else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}\n"
    )
    
    if sheets_manager.connected:
        settings_text += f"üìé –°—Å—ã–ª–∫–∞: {sheets_manager.get_sheet_url()}"
    
    update.message.reply_text(
        settings_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def view_excel_data(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫ –∏–∑ Google Sheets
        all_records = sheets_manager.sheet.get_all_records()
        recent_records = all_records[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        
        if not recent_records:
            update.message.reply_text(
                "üì≠ –í Google Sheets –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
            return
        
        excel_data_text = "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ Google Sheets:*\n\n"
        
        for i, record in enumerate(recent_records, 1):
            excel_data_text += (
                f"{i}. *#{record.get('ID', 'N/A')}* - {record.get('–°—Ç–∞—Ç—É—Å', 'N/A')}\n"
                f"   üë§ {record.get('–ò–º—è', 'N/A')} | {record.get('–¢–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n"
                f"   üìç {record.get('–£—á–∞—Å—Ç–æ–∫', 'N/A')} | {record.get('–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã', 'N/A')}\n"
                f"   ‚è∞ {record.get('–°—Ä–æ—á–Ω–æ—Å—Ç—å', 'N/A')}\n\n"
            )
        
        excel_data_text += f"üìé –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {sheets_manager.get_sheet_url()}"
        
        update.message.reply_text(
            excel_data_text,
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

def start_request_creation(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    
    user = update.message.from_user
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    update.message.reply_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text(
        "üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    context.user_data['phone'] = update.message.text
    update.message.reply_text(
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–∫–∞:*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã:*",
        reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return show_main_menu(update, context)
    elif update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–∫–∞:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        "üìù *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:*\n\n–ü—Ä–∏–º–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–º —É—á–∞—Å—Ç–∫–µ",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    context.user_data['problem'] = update.message.text
    update.message.reply_text(
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

def urgency(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìù *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:*",
            reply_markup=ReplyKeyboardRemove()
        )
        return PROBLEM
    
    context.user_data['urgency'] = update.message.text
    update.message.reply_text(
        "üì∏ *–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n–§–æ—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    elif update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return show_request_summary(update, context)
    elif update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return show_request_summary(update, context)
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
        )
        return PHOTO

def update_summary(context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –≤ user_data"""
    photo_status = "‚úÖ –ï—Å—Ç—å" if context.user_data.get('photo') else "‚ùå –ù–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üìõ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è:* {context.user_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    context.user_data['summary'] = summary

def show_request_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ - –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('editing_mode'):
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return edit_request_choice(update, context)
    else:
        # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if context.user_data.get('photo'):
            update.message.reply_photo(
                photo=context.user_data['photo'],
                caption=f"{context.user_data['summary']}\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:*",
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                f"{context.user_data['summary']}\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:*",
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        return ConversationHandler.END

def confirm_request(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        user = update.message.from_user
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            request_id = db.save_request(context.user_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            send_admin_notification(context, context.user_data, request_id)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            confirmation_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É–∂–±—É —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!_ üõ†Ô∏è"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if user.id in ADMIN_CHAT_IDS:
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if user.id in ADMIN_CHAT_IDS:
                update.message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        context.user_data.clear()
        
    elif update.message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É':
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_mode'] = True
        return edit_request_choice(update, context)

def send_admin_notification(context: CallbackContext, user_data: Dict, request_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data.get('phone')}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"üîß *–°–∏—Å—Ç–µ–º–∞:* {user_data.get('system_type')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if user_data.get('photo') else '‚ùå –ù–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n\n"
        f"üïí *–í—Ä–µ–º—è:* {user_data.get('timestamp', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
    )
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            if user_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def cancel_request(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    
    if user_id in ADMIN_CHAT_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True)
        )
    else:
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# ==================== –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ====================

def edit_request_choice(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    summary = context.user_data.get('summary', '')
    
    update.message.reply_text(
        f"{summary}\n\n"
        "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return EDIT_CHOICE

def handle_edit_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    choice = update.message.text
    context.user_data['editing_field'] = choice
    
    if choice == 'üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è':
        update.message.reply_text(
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:*\n\n–¢–µ–∫—É—â–µ–µ –∏–º—è: " + context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67\n–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: `{context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}`",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫:*\n\n–¢–µ–∫—É—â–∏–π —É—á–∞—Å—Ç–æ–∫: {context.user_data.get('plot', '–ù–µ —É–∫–∞–∑–∞–Ω')}",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:*\n\n–¢–µ–∫—É—â–∞—è —Å–∏—Å—Ç–µ–º–∞: {context.user_data.get('system_type', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n\n–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {context.user_data.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å:*\n\n–¢–µ–∫—É—â–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data.get('urgency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ':
        photo_status = "‚úÖ –ï—Å—Ç—å" if context.user_data.get('photo') else "‚ùå –ù–µ—Ç"
        update.message.reply_text(
            f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ:*\n\n–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ: {photo_status}",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                ['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–≤–æ–¥–∫–µ
        context.user_data.pop('editing_mode', None)
        context.user_data.pop('editing_field', None)
        return show_request_summary(update, context)
    
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        return EDIT_CHOICE

def handle_edit_field(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è"""
    editing_field = context.user_data.get('editing_field')
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
        update_summary(context)
        return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if editing_field == 'üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è':
        if text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['name'] = text
            update.message.reply_text(
                "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
        if text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['phone'] = text
            update.message.reply_text(
                "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == 'üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            return edit_request_choice(update, context)
        elif text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['plot'] = text
            update.message.reply_text(
                "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–æ–∫ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            return edit_request_choice(update, context)
        elif text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['system_type'] = text
            update.message.reply_text(
                "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        if text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['problem'] = text
            update.message.reply_text(
                "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å':
        if text == 'üîô –ù–∞–∑–∞–¥':
            return edit_request_choice(update, context)
        elif text and text != 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
            context.user_data['urgency'] = text
            update.message.reply_text(
                "‚úÖ –°—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        
    elif editing_field == 'üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ':
        if text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ':
            update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
            context.user_data['photo'] = None
            update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup([
                    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                    ['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
                ], resize_keyboard=True)
            )
            return EDIT_FIELD
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    return edit_request_choice(update, context)

# ==================== –í–ò–ó–£–ê–õ–¨–ù–û–ï –ú–ï–ù–Æ ====================

def get_admin_panel_with_counters():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""
    new_requests = db.get_requests_by_filter('new')
    in_progress_requests = db.get_requests_by_filter('in_progress')
    
    return [
        [f'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({len(new_requests)})', f'üîÑ –í —Ä–∞–±–æ—Ç–µ ({len(in_progress_requests)})'],
        ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
        ['üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üìä Excel –æ–Ω–ª–∞–π–Ω']
    ]

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id not in ADMIN_CHAT_IDS:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, last_activity)
                VALUES (?, ?, ?, ?, COALESCE((SELECT created_at FROM users WHERE user_id = ?), ?), ?)
            ''', (
                user.id,
                user.username,
                user.first_name,
                user.last_name,
                user.id,
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            conn.commit()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    if user_id in ADMIN_CHAT_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        return show_admin_panel(update, context)
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = (
            "üè≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*\n\n"
            "üîß *–ú—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º:*\n"
            "‚Ä¢ üìπ –°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
            "‚Ä¢ üîê –°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ (–°–ö–£–î)\n" 
            "‚Ä¢ üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏\n"
            "‚Ä¢ üö® –ü–æ–∂–∞—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    
    update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –Ω–æ–≤—ã–º–∏, –≤ —Ä–∞–±–æ—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return show_main_menu(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    new_requests = db.get_requests_by_filter('new')
    in_progress_requests = db.get_requests_by_filter('in_progress')
    completed_requests = db.get_requests_by_filter('completed')
    
    admin_text = (
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
        f"üÜï *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:* {len(new_requests)}\n"
        f"üîÑ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:* {len(in_progress_requests)}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* {len(completed_requests)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def show_my_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if user_id in ADMIN_CHAT_IDS:
        return show_admin_panel(update, context)
    else:
        keyboard = user_main_menu_keyboard
    
    requests = db.get_user_requests(user_id, 50)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        f"üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏ ({len(requests)}):*",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    
    for req in requests:
        status_icons = {
            'new': 'üÜï',
            'in_progress': 'üîÑ', 
            'completed': '‚úÖ'
        }
        
        request_text = (
            f"{status_icons.get(req['status'], 'üìã')} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üîß *–¢–∏–ø:* {req['system_type']}\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
            f"üîÑ *–°—Ç–∞—Ç—É—Å:* {req['status']}\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
        )
        
        if req.get('assigned_admin') and req['status'] == 'in_progress':
            request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
        
        update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)

def show_requests_by_filter(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    requests = db.get_requests_by_filter(filter_type, 50)
    filter_names = {
        'new': 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏',
        'in_progress': 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'
    }
    
    if not requests:
        update.message.reply_text(
            f"üì≠ {filter_names[filter_type]} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        f"{filter_names[filter_type]} ({len(requests)}):",
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True)
    )
    
    for req in requests:
        request_text = (
            f"*–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
            f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {req['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem'][:100]}...\n"
            f"üîÑ *–°—Ç–∞—Ç—É—Å:* {req['status']}\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}"
        )
        
        update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)

def show_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    stats = db.get_statistics()
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {stats['total_users']}\n"
        f"üìã *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* {stats['total_requests']}\n"
        f"üÜï *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:* {stats['new_requests']}\n"
        f"üîÑ *–í —Ä–∞–±–æ—Ç–µ:* {stats['in_progress_requests']}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–æ:* {stats['completed_requests']}\n"
        f"üìÖ *–ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è:* {stats['today_requests']}\n"
        f"üìÖ *–ó–∞—è–≤–æ–∫ –≤—á–µ—Ä–∞:* {stats['yesterday_requests']}"
    )
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_admin_management(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    management_text = (
        "üîß *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    update.message.reply_text(
        management_text,
        reply_markup=ReplyKeyboardMarkup(admin_management_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def start_broadcast(update: Update, context: CallbackContext) -> None:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    context.user_data['broadcast_mode'] = True
    update.message.reply_text(
        "üì¢ *–†–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
        reply_markup=ReplyKeyboardMarkup([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def send_broadcast(update: Update, context: CallbackContext) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS or not context.user_data.get('broadcast_mode'):
        return show_admin_management(update, context)
    
    if update.message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        context.user_data.pop('broadcast_mode', None)
        return show_admin_management(update, context)
    
    message_text = update.message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = db.get_all_users()
    
    success_count = 0
    fail_count = 0
    
    for user in users:
        try:
            context.bot.send_message(
                chat_id=user['user_id'],
                text=f"üì¢ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç —Å–ª—É–∂–±—ã —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º:*\n\n{message_text}",
                parse_mode=ParseMode.MARKDOWN
            )
            success_count += 1
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['user_id']}: {e}")
            fail_count += 1
    
    # –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    report_text = (
        f"‚úÖ *–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"üì§ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:* {success_count}\n"
        f"‚ùå *–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:* {fail_count}\n"
        f"üìù *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(users)}"
    )
    
    update.message.reply_text(
        report_text,
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    context.user_data.pop('broadcast_mode', None)

def export_requests(update: Update, context: CallbackContext) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏ –≤ CSV —Ñ–∞–π–ª"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    try:
        filename = db.export_requests_to_csv()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        with open(filename, 'rb') as file:
            context.bot.send_document(
                chat_id=update.message.chat_id,
                document=file,
                filename=filename,
                caption="üìÅ *–≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ*\n\n–§–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
            )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞—è–≤–æ–∫: {e}")
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞—è–≤–æ–∫.",
            reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True)
        )

def update_counters(update: Update, context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    update.message.reply_text(
        "‚úÖ –°—á–µ—Ç—á–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_with_counters(), resize_keyboard=True)
    )

def handle_broadcast_message(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if context.user_data.get('broadcast_mode'):
        return send_broadcast(update, context)
    else:
        return handle_admin_menu(update, context)

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user_id in ADMIN_CHAT_IDS:
        return show_admin_panel(update, context)
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        return start_request_creation(update, context)
    elif text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        return show_my_requests(update, context)
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )

def handle_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    if text.startswith('üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏'):
        return show_requests_by_filter(update, context, 'new')
    elif text.startswith('üîÑ –í —Ä–∞–±–æ—Ç–µ'):
        return show_requests_by_filter(update, context, 'in_progress')
    elif text == '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏':
        return show_requests_by_filter(update, context, 'completed')
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_statistics(update, context)
    elif text == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
        return show_admin_management(update, context)
    elif text == 'üìä Excel –æ–Ω–ª–∞–π–Ω':
        return show_excel_online(update, context)
    elif text == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        return start_broadcast(update, context)
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏':
        return update_counters(update, context)
    elif text == 'üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫':
        return export_requests(update, context)
    elif text == 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Excel':
        return sync_with_excel(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_admin_panel(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        return sync_with_excel(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel':
        return show_excel_stats(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel':
        return show_excel_settings(update, context)
    elif text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel':
        return view_excel_data(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_admin_panel(update, context)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, urgency)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
                EDIT_CHOICE: [MessageHandler(Filters.text & ~Filters.command, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(Filters.text & ~Filters.command, handle_edit_field),
                    MessageHandler(Filters.photo, handle_edit_field)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(Filters.regex('^(üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$'), cancel_request),
                MessageHandler(Filters.regex('^(‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)$'), show_request_summary)
            ],
            allow_reentry=True
        )

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        edit_handler = MessageHandler(
            Filters.regex('^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)$'), 
            confirm_request
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_admin_panel))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(edit_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
        dispatcher.add_handler(MessageHandler(Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), confirm_request))
        dispatcher.add_handler(MessageHandler(Filters.regex('^(üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏)$'), handle_main_menu))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏|üîÑ –í —Ä–∞–±–æ—Ç–µ|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ|üìä Excel –æ–Ω–ª–∞–π–Ω|üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É|üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏|üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫|üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Excel|üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å|üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel|üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
        dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command,
            handle_broadcast_message
        ))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Sheets!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_CHAT_IDS}")
        if sheets_manager.connected:
            logger.info("üìä Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
