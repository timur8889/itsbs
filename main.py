import logging
import sqlite3
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_CHAT_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = "7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "requests.db"

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ====================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
create_request_keyboard = [
    ['üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'üîê –°–ö–£–î'],
    ['üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Å–µ—Ç—å', 'üö® –ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
confirm_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É']]
photo_keyboard = [['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ']]
urgency_keyboard = [
    ['üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)'],
    ['üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)'],
    ['üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ (3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]
plot_type_keyboard = [
    ['üè≠ –§—Ä–µ–∑–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', '‚öôÔ∏è –¢–æ–∫–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'],
    ['üî® –£—á–∞—Å—Ç–æ–∫ —à—Ç–∞–º–ø–æ–≤–∫–∏', 'üì¶ –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
    ['üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫', 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É'],
    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å'],
    ['üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']
]

edit_field_keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨
admin_panel_keyboard = [
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'],
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ'],
    ['üö® –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏', '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ'],
    ['üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
    ['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
]

admin_stats_keyboard = [
    ['üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è', 'üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é'],
    ['üìÜ –ó–∞ –º–µ—Å—è—Ü', 'üóìÔ∏è –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è'],
    ['üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

admin_settings_keyboard = [
    ['üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏', 'üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'],
    ['üìù –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤', 'üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'],
    ['üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

admin_users_keyboard = [
    ['üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', 'üìà –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'],
    ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    name TEXT,
                    phone TEXT,
                    plot TEXT,
                    system_type TEXT,
                    problem TEXT,
                    photo TEXT,
                    urgency TEXT,
                    status TEXT DEFAULT 'new',
                    created_at TEXT,
                    updated_at TEXT,
                    admin_comment TEXT,
                    assigned_admin TEXT,
                    completed_at TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS statistics (
                    date TEXT PRIMARY KEY,
                    requests_count INTEGER DEFAULT 0,
                    completed_count INTEGER DEFAULT 0,
                    avg_completion_time REAL DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TEXT,
                    request_count INTEGER DEFAULT 0,
                    last_activity TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS admin_settings (
                    key TEXT PRIMARY KEY,
                    value TEXT
                )
            ''')
            conn.commit()

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, name, phone, plot, system_type, problem, photo, urgency, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('name'),
                user_data.get('phone'),
                user_data.get('plot'),
                user_data.get('system_type'),
                user_data.get('problem'),
                user_data.get('photo'),
                user_data.get('urgency'),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            request_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('''
                INSERT OR REPLACE INTO statistics (date, requests_count)
                VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
            ''', (today, today))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count, last_activity)
                VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('first_name', ''),
                user_data.get('last_name', ''),
                datetime.now().isoformat(),
                user_data.get('user_id'),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            return request_id

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_statistics(self, period: str = 'week') -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if period == 'today':
                start_date = datetime.now().strftime('%Y-%m-%d')
            elif period == 'week':
                start_date = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
            elif period == 'month':
                start_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            else:  # all time
                start_date = '2000-01-01'
            
            cursor.execute('''
                SELECT 
                    COUNT(*) as total_requests,
                    SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                    SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                    SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                    SUM(CASE WHEN urgency LIKE '%–°—Ä–æ—á–Ω–æ%' THEN 1 ELSE 0 END) as urgent,
                    AVG(CASE WHEN status = 'completed' THEN 
                        (julianday(completed_at) - julianday(created_at)) * 24 
                    END) as avg_completion_hours
                FROM requests 
                WHERE created_at >= ?
            ''', (start_date,))
            
            result = cursor.fetchone()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute('SELECT COUNT(*) FROM users')
            total_users = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π)
            active_date = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
            cursor.execute('SELECT COUNT(*) FROM users WHERE last_activity >= ?', (active_date,))
            active_users = cursor.fetchone()[0]
            
            return {
                'total_requests': result[0] or 0,
                'completed': result[1] or 0,
                'new': result[2] or 0,
                'in_progress': result[3] or 0,
                'urgent': result[4] or 0,
                'avg_completion_hours': round(result[5] or 0, 1),
                'total_users': total_users,
                'active_users': active_users
            }

    def get_comparative_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            periods = {
                'today': datetime.now().strftime('%Y-%m-%d'),
                'yesterday': (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d'),
                'week': (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d'),
                'last_week': (datetime.now() - timedelta(days=14)).strftime('%Y-%m-%d')
            }
            
            stats = {}
            for period, date in periods.items():
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed
                    FROM requests 
                    WHERE created_at >= ?
                ''', (date,))
                result = cursor.fetchone()
                stats[period] = {
                    'total': result[0] or 0,
                    'completed': result[1] or 0
                }
            
            return stats

    def get_user_statistics(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT 
                    user_id,
                    username,
                    first_name,
                    last_name,
                    request_count,
                    last_activity,
                    (SELECT COUNT(*) FROM requests WHERE user_id = users.user_id AND status = 'completed') as completed_count
                FROM users 
                ORDER BY request_count DESC 
                LIMIT ?
            ''', (limit,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if filter_type == 'new':
                status_filter = "status = 'new'"
            elif filter_type == 'in_progress':
                status_filter = "status = 'in_progress'"
            elif filter_type == 'urgent':
                status_filter = "urgency LIKE '%–°—Ä–æ—á–Ω–æ%' AND status IN ('new', 'in_progress')"
            elif filter_type == 'completed':
                status_filter = "status = 'completed'"
            else:  # all active
                status_filter = "status IN ('new', 'in_progress')"
            
            cursor.execute(f'''
                SELECT * FROM requests 
                WHERE {status_filter}
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (limit,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def search_requests(self, search_term: str, limit: int = 20) -> List[Dict]:
        """–ò—â–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø–æ–ª—è–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE id = ? OR name LIKE ? OR phone LIKE ? OR problem LIKE ? OR plot LIKE ?
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (
                search_term if search_term.isdigit() else -1,
                f'%{search_term}%',
                f'%{search_term}%',
                f'%{search_term}%',
                f'%{search_term}%',
                limit
            ))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return {}

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            completed_at = datetime.now().isoformat() if status == 'completed' else None
            
            if admin_comment and assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), completed_at, request_id))
            elif admin_comment:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, admin_comment, datetime.now().isoformat(), completed_at, request_id))
            elif assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?, completed_at = ?
                    WHERE id = ?
                ''', (status, assigned_admin, datetime.now().isoformat(), completed_at, request_id))
            else:
                cursor.execute('''
                    UPDATE requests SET status = ?, updated_at = ?, completed_at = ? WHERE id = ?
                ''', (status, datetime.now().isoformat(), completed_at, request_id))
            
            if status == 'completed':
                today = datetime.now().strftime('%Y-%m-%d')
                cursor.execute('''
                    UPDATE statistics SET completed_count = completed_count + 1
                    WHERE date = ?
                ''', (today,))
            
            conn.commit()

    def get_my_in_progress_requests(self, admin_name: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE assigned_admin = ? AND status = 'in_progress'
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (admin_name, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ==================== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

def show_admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return show_main_menu(update, context)
    
    stats = db.get_statistics('today')
    admin_text = (
        "üëë *–£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
        "üìä *–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
        f"‚Ä¢ üÜï –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫: {stats['new']}\n"
        f"‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}\n"
        f"‚Ä¢ ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['completed']}\n"
        f"‚Ä¢ üö® –°—Ä–æ—á–Ω—ã—Ö: {stats['urgent']}\n"
        f"‚Ä¢ ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['avg_completion_hours']} —á.\n"
        f"‚Ä¢ üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n\n"
        "üéõÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*"
    )
    
    update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_admin_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    update.message.reply_text(
        "üìä *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=ReplyKeyboardMarkup(admin_stats_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_comparative_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    stats = db.get_comparative_statistics()
    
    today = stats['today']
    yesterday = stats['yesterday']
    week = stats['week']
    last_week = stats['last_week']
    
    # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    today_change = today['total'] - yesterday['total']
    week_change = week['total'] - last_week['total']
    
    stats_text = (
        "üìà *–°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        
        "üìÖ *–°–µ–≥–æ–¥–Ω—è vs –í—á–µ—Ä–∞:*\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today['total']} –∑–∞—è–≤–æ–∫ ({today['completed']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
        f"‚Ä¢ –í—á–µ—Ä–∞: {yesterday['total']} –∑–∞—è–≤–æ–∫ ({yesterday['completed']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
        f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'üìà +' if today_change >= 0 else 'üìâ '}{today_change}\n\n"
        
        "üìä *–ù–µ–¥–µ–ª—è vs –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è:*\n"
        f"‚Ä¢ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è: {week['total']} –∑–∞—è–≤–æ–∫ ({week['completed']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
        f"‚Ä¢ –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: {last_week['total']} –∑–∞—è–≤–æ–∫ ({last_week['completed']} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ)\n"
        f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {'üìà +' if week_change >= 0 else 'üìâ '}{week_change}\n\n"
        
        "üìã *–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
        f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {round(today['completed'] / max(today['total'], 1) * 100, 1)}%\n"
        f"‚Ä¢ –ù–µ–¥–µ–ª—è: {round(week['completed'] / max(week['total'], 1) * 100, 1)}%"
    )
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(admin_stats_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_admin_users(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    stats = db.get_statistics('all')
    
    users_text = (
        "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_requests']}\n"
        f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {stats['avg_completion_hours']} —á.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    update.message.reply_text(
        users_text,
        reply_markup=ReplyKeyboardMarkup(admin_users_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_top_users(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    users = db.get_user_statistics(10)
    
    if not users:
        update.message.reply_text(
            "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            reply_markup=ReplyKeyboardMarkup(admin_users_keyboard, resize_keyboard=True)
        )
        return
    
    users_text = "üèÜ *–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞—è–≤–æ–∫:*\n\n"
    
    for i, user in enumerate(users, 1):
        user_name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip()
        if not user_name:
            user_name = f"@{user.get('username', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}"
        
        users_text += (
            f"{i}. {user_name}\n"
            f"   üìû –ó–∞—è–≤–æ–∫: {user['request_count']}\n"
            f"   ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.get('completed_count', 0)}\n"
            f"   üïí –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user['last_activity'][:10] if user.get('last_activity') else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
        )
    
    update.message.reply_text(
        users_text,
        reply_markup=ReplyKeyboardMarkup(admin_users_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_admin_settings(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    settings_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã:\n\n"
        "‚Ä¢ üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏* - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n"
        "‚Ä¢ üîî *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π* - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è–º–∏\n"
        "‚Ä¢ üìù *–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤* - —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        "‚Ä¢ üîÑ *–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏* - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    update.message.reply_text(
        settings_text,
        reply_markup=ReplyKeyboardMarkup(admin_settings_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def search_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    context.user_data['waiting_for_search'] = True
    update.message.reply_text(
        "üîç *–ü–æ–∏—Å–∫ –∑–∞—è–≤–æ–∫*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏, –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞, —Ç–µ–ª–µ—Ñ–æ–Ω, —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=ReplyKeyboardMarkup([['üîô –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞']], resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def handle_search(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    if not context.user_data.get('waiting_for_search'):
        return show_admin_panel(update, context)
    
    search_term = update.message.text.strip()
    
    if search_term == 'üîô –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞':
        context.user_data.pop('waiting_for_search', None)
        return show_admin_panel(update, context)
    
    requests = db.search_requests(search_term, 20)
    
    if not requests:
        update.message.reply_text(
            f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'*\n\n"
            "‚ùå –ó–∞—è–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:",
            reply_markup=ReplyKeyboardMarkup([['üîô –û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞']], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    update.message.reply_text(
        f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_term}'*\n\n"
        f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫: {len(requests)}",
        reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True)
    )
    
    for req in requests:
        status_icons = {'new': 'üÜï', 'in_progress': 'üîÑ', 'completed': '‚úÖ'}
        
        request_text = (
            f"{status_icons.get(req['status'], 'üìã')} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
            f"üîß *–¢–∏–ø:* {req['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
            f"üîÑ *–°—Ç–∞—Ç—É—Å:* {req['status']}\n"
            f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem'][:100]}..."
        )
        
        if req.get('assigned_admin'):
            request_text += f"\nüë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = None
        if req['status'] == 'new':
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{req['id']}"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_{req['id']}")
            ]]
        elif req['status'] == 'in_progress':
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{req['id']}"),
                InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"view_{req['id']}")
            ]]
        
        if req.get('photo'):
            if keyboard:
                update.message.reply_photo(
                    photo=req['photo'],
                    caption=request_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_photo(
                    photo=req['photo'],
                    caption=request_text,
                    parse_mode=ParseMode.MARKDOWN
                )
        else:
            if keyboard:
                update.message.reply_text(
                    request_text,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    request_text,
                    parse_mode=ParseMode.MARKDOWN
                )
    
    context.user_data.pop('waiting_for_search', None)

# ==================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

def handle_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_admin_statistics(update, context)
    elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        return show_admin_users(update, context)
    elif text == 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏':
        return show_requests_by_filter(update, context, 'new')
    elif text == 'üîÑ –í —Ä–∞–±–æ—Ç–µ':
        return show_requests_by_filter(update, context, 'my_in_progress')
    elif text == 'üö® –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏':
        return show_requests_by_filter(update, context, 'urgent')
    elif text == '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ':
        return show_requests_by_filter(update, context, 'completed')
    elif text == 'üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏':
        return search_requests(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        return show_admin_settings(update, context)
    elif text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
    elif text == 'üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_admin_panel(update, context)
    elif text == 'üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_comparative_statistics(update, context)
    elif text == 'üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        return show_top_users(update, context)
    elif text == 'üìà –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
        return show_top_users(update, context)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if context.user_data.get('waiting_for_search'):
            return handle_search(update, context)
        else:
            update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True)
            )

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∏ —Ç.–¥.)
# –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ (–≤–∫–ª—é—á–∞—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, urgency)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
                EDIT_CHOICE: [MessageHandler(Filters.text & ~Filters.command, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(Filters.text & ~Filters.command, handle_edit_field),
                    MessageHandler(Filters.photo, handle_edit_field)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(Filters.regex('^(üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$'), cancel_request),
                MessageHandler(Filters.regex('^(‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)$'), show_request_summary)
            ],
            allow_reentry=True
        )

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        edit_handler = MessageHandler(
            Filters.regex('^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)$'), 
            confirm_request
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_admin_panel))
        
        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(edit_handler)
        dispatcher.add_handler(MessageHandler(Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), confirm_request))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        dispatcher.add_handler(MessageHandler(Filters.regex('^(üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏|üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$'), handle_main_menu))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏|üîÑ –í —Ä–∞–±–æ—Ç–µ|üö® –°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏|‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ|üîç –ü–æ–∏—Å–∫ –∑–∞—è–≤–∫–∏|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìà –ó–∞ —Å–µ–≥–æ–¥–Ω—è|üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é|üìÜ –ó–∞ –º–µ—Å—è—Ü|üóìÔ∏è –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è|üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|üìà –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º–∏|üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π|üìù –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤|üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ (–ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∫–æ–≥–¥–∞ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫)
        dispatcher.add_handler(MessageHandler(
            Filters.text & ~Filters.command, 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^(take_|view_|complete_|contact_)'))

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_CHAT_IDS}")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
