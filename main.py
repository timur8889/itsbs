import logging
import sqlite3
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_CHAT_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = "7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "requests.db"

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
create_request_keyboard = [
    ['üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'üîê –°–ö–£–î'],
    ['üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Å–µ—Ç—å', 'üö® –ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
confirm_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É']]
photo_keyboard = [['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ']]
urgency_keyboard = [
    ['üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)'],
    ['üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)'],
    ['üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ (3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]
plot_type_keyboard = [
    ['üè≠ –§—Ä–µ–∑–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', '‚öôÔ∏è –¢–æ–∫–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'],
    ['üî® –£—á–∞—Å—Ç–æ–∫ —à—Ç–∞–º–ø–æ–≤–∫–∏', 'üì¶ –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
    ['üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫', 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É'],
    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å'],
    ['üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']
]

edit_field_keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    name TEXT,
                    phone TEXT,
                    plot TEXT,
                    system_type TEXT,
                    problem TEXT,
                    photo TEXT,
                    urgency TEXT,
                    status TEXT DEFAULT 'new',
                    created_at TEXT,
                    updated_at TEXT,
                    admin_comment TEXT,
                    assigned_admin TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS statistics (
                    date TEXT PRIMARY KEY,
                    requests_count INTEGER DEFAULT 0,
                    completed_count INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TEXT,
                    request_count INTEGER DEFAULT 0
                )
            ''')
            conn.commit()

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, name, phone, plot, system_type, problem, photo, urgency, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('name'),
                user_data.get('phone'),
                user_data.get('plot'),
                user_data.get('system_type'),
                user_data.get('problem'),
                user_data.get('photo'),
                user_data.get('urgency'),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            request_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('''
                INSERT OR REPLACE INTO statistics (date, requests_count)
                VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
            ''', (today, today))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count)
                VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('first_name', ''),
                user_data.get('last_name', ''),
                datetime.now().isoformat(),
                user_data.get('user_id')
            ))
            
            conn.commit()
            return request_id

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_requests_count_by_status(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT status, COUNT(*) as count 
                FROM requests 
                WHERE status IN ('new', 'in_progress', 'completed')
                GROUP BY status
            ''')
            result = {row[0]: row[1] for row in cursor.fetchall()}
            
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            for status in ['new', 'in_progress', 'completed']:
                if status not in result:
                    result[status] = 0
            
            return result

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if filter_type == 'new':
                status_filter = "status = 'new'"
            elif filter_type == 'in_progress':
                status_filter = "status = 'in_progress'"
            elif filter_type == 'urgent':
                status_filter = "urgency LIKE '%–°—Ä–æ—á–Ω–æ%' AND status IN ('new', 'in_progress')"
            elif filter_type == 'completed':
                status_filter = "status = 'completed'"
            else:  # all active
                status_filter = "status IN ('new', 'in_progress')"
            
            cursor.execute(f'''
                SELECT * FROM requests 
                WHERE {status_filter}
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (limit,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return {}

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if admin_comment and assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?
                    WHERE id = ?
                ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
            elif admin_comment:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?
                    WHERE id = ?
                ''', (status, admin_comment, datetime.now().isoformat(), request_id))
            elif assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?
                    WHERE id = ?
                ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests SET status = ?, updated_at = ? WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            
            conn.commit()

    def get_my_in_progress_requests(self, admin_name: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE assigned_admin = ? AND status = 'in_progress'
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (admin_name, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ==================== –í–ò–ó–£–ê–õ–¨–ù–û–ï –ú–ï–ù–Æ ====================

def get_admin_panel_keyboard() -> List[List[str]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞—è–≤–æ–∫"""
    counts = db.get_requests_count_by_status()
    
    return [
        [f'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ ({counts["new"]})', f'üîÑ –í —Ä–∞–±–æ—Ç–µ ({counts["in_progress"]})'],
        [f'‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({counts["completed"]})']
    ]

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    if user_id in ADMIN_CHAT_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        return show_admin_panel(update, context)
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = (
            "üè≠ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –¥–ª—è —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!*\n\n"
            "üîß *–ú—ã –æ–±—Å–ª—É–∂–∏–≤–∞–µ–º:*\n"
            "‚Ä¢ üìπ –°–∏—Å—Ç–µ–º—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è\n"
            "‚Ä¢ üîê –°–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ (–°–ö–£–î)\n" 
            "‚Ä¢ üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏\n"
            "‚Ä¢ üö® –ü–æ–∂–∞—Ä–Ω—ã–µ —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
    
    update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_my_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º"""
    user_id = update.message.from_user.id
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
    if user_id in ADMIN_CHAT_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        return show_admin_panel(update, context)
    else:
        keyboard = user_main_menu_keyboard
    
    requests = db.get_user_requests(user_id, 50)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    active_requests = [req for req in requests if req['status'] != 'completed']
    completed_requests = [req for req in requests if req['status'] == 'completed']
    
    if not active_requests and not completed_requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏.\n\n"
            "–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏
    if active_requests:
        update.message.reply_text(
            f"üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({len(active_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in active_requests:
            status_icons = {
                'new': 'üÜï –ù–û–í–ê–Ø',
                'in_progress': 'üîÑ –í –†–ê–ë–û–¢–ï', 
                'completed': '‚úÖ –í–´–ü–û–õ–ù–ï–ù–ê'
            }
            
            status_text = status_icons.get(req['status'], req['status'])
            
            request_text = (
                f"{status_icons.get(req['status'], 'üìã')} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
                f"üîß *–¢–∏–ø:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin') and req['status'] == 'in_progress':
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
    if completed_requests:
        update.message.reply_text(
            f"‚úÖ *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ({len(completed_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in completed_requests:
            request_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í–´–ü–û–õ–ù–ï–ù–ê*\n"
                f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem'][:100]}{'...' if len(req['problem']) > 100 else ''}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin'):
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    total_text = f"üìä *–ò—Ç–æ–≥–æ:* {len(active_requests)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {len(completed_requests)} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
    update.message.reply_text(
        total_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

def show_admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return show_main_menu(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    counts = db.get_requests_count_by_status()
    
    admin_text = (
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
        f"üÜï *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:* {counts['new']}\n"
        f"üîÑ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:* {counts['in_progress']}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* {counts['completed']}\n\n"
        "*–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É*\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    current_keyboard = get_admin_panel_keyboard()
    
    update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(current_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    start_auto_refresh(update, context)

def start_auto_refresh(update: Update, context: CallbackContext) -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    chat_id = update.message.chat_id
    message_id = update.message.message_id
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if 'refresh_jobs' not in context.chat_data:
        context.chat_data['refresh_jobs'] = {}
    
    job_name = f"refresh_{chat_id}_{message_id}"
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if job_name in context.chat_data['refresh_jobs']:
        context.chat_data['refresh_jobs'][job_name].schedule_removal()
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    job = context.job_queue.run_repeating(
        auto_refresh_admin_panel,
        interval=1,  # 1 —Å–µ–∫—É–Ω–¥–∞
        first=1,
        context={
            'chat_id': chat_id,
            'message_id': message_id,
            'user_id': update.message.from_user.id
        }
    )
    
    context.chat_data['refresh_jobs'][job_name] = job

def auto_refresh_admin_panel(context: CallbackContext) -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    job_context = context.job.context
    chat_id = job_context['chat_id']
    message_id = job_context['message_id']
    user_id = job_context['user_id']
    
    if user_id not in ADMIN_CHAT_IDS:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        counts = db.get_requests_count_by_status()
        
        admin_text = (
            "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç*\n\n"
            f"üÜï *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:* {counts['new']}\n"
            f"üîÑ *–ó–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ:* {counts['in_progress']}\n"
            f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:* {counts['completed']}\n\n"
            "*–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É*\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        current_keyboard = get_admin_panel_keyboard()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=admin_text,
            reply_markup=ReplyKeyboardMarkup(current_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        if "Message to edit not found" in str(e) or "Message can't be edited" in str(e):
            context.job.schedule_removal()

def show_requests_by_filter(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    stop_auto_refresh(update, context)
    
    requests = db.get_requests_by_filter(filter_type, 50)
    filter_names = {
        'new': 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏',
        'in_progress': 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'
    }
    filter_name = f"{filter_names[filter_type]} ({len(requests)})"
    
    if not requests:
        update.message.reply_text(
            f"üì≠ {filter_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=ReplyKeyboardMarkup(get_admin_panel_keyboard(), resize_keyboard=True)
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞
        start_auto_refresh(update, context)
        return
    
    update.message.reply_text(
        filter_name,
        reply_markup=ReplyKeyboardMarkup(get_admin_panel_keyboard(), resize_keyboard=True)
    )
    
    for req in requests:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if req['status'] == 'completed':
            request_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í–´–ü–û–õ–ù–ï–ù–ê*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}"
            )
        elif req['status'] == 'in_progress':
            request_text = (
                f"üîÑ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í –†–ê–ë–û–¢–ï*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}"
            )
        else:
            request_text = (
                f"üÜï *–ó–∞—è–≤–∫–∞ #{req['id']} - –ù–û–í–ê–Ø*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}"
            )
        
        if req.get('admin_comment'):
            request_text += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {req['admin_comment']}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏
        if req['status'] == 'completed':
            # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ - —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ —Å–≤—è–∑–∏
            keyboard = [[
                InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
            ]]
        elif req['status'] == 'in_progress':
            # –î–ª—è –∑–∞—è–≤–æ–∫ –≤ —Ä–∞–±–æ—Ç–µ
            if req.get('assigned_admin') == update.message.from_user.first_name:
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{req['id']}"),
                    InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
                ]]
            else:
                # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —É –¥—Ä—É–≥–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                keyboard = [[
                    InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
                ]]
        else:
            # –î–ª—è –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{req['id']}"),
                InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
            ]]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if req.get('photo'):
            update.message.reply_photo(
                photo=req['photo'],
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –∑–∞—è–≤–æ–∫
    start_auto_refresh(update, context)

def stop_auto_refresh(update: Update, context: CallbackContext) -> None:
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    chat_id = update.message.chat_id
    
    if 'refresh_jobs' in context.chat_data:
        for job_name, job in context.chat_data['refresh_jobs'].items():
            if str(chat_id) in job_name:
                job.schedule_removal()
        # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        context.chat_data['refresh_jobs'] = {
            k: v for k, v in context.chat_data['refresh_jobs'].items() 
            if not str(chat_id) in k
        }

def handle_admin_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        return
    
    if data.startswith('take_'):
        request_id = int(data.split('_')[1])
        admin_name = query.from_user.first_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        db.update_request_status(
            request_id, 
            "in_progress", 
            f"–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}",
            admin_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request = db.get_request(request_id)
        if request and request.get('user_id'):
            try:
                context.bot.send_message(
                    chat_id=request['user_id'],
                    text=f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
                         f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
                         f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        request_text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤–∞–º–∏ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"üîß *–¢–∏–ø:* {request['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem']}\n\n"
            f"üîÑ *–°—Ç–∞—Ç—É—Å:* –í —Ä–∞–±–æ—Ç–µ\n"
            f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [[
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{request_id}"),
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{request_id}")
        ]]
        
        if query.message.caption:
            query.edit_message_caption(
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            query.edit_message_text(
                text=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
    elif data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        admin_name = query.from_user.first_name
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        db.update_request_status(
            request_id, 
            "completed", 
            f"–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}",
            admin_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        request = db.get_request(request_id)
        if request and request.get('user_id'):
            try:
                context.bot.send_message(
                    chat_id=request['user_id'],
                    text=f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                         f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
                         f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n"
                         f"_–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏!_ üõ†Ô∏è",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞—è–≤–∫–æ–π
        request_text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –í–´–ü–û–õ–ù–ï–ù–ê!*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {request['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem']}\n"
            f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if request['photo'] else '‚ùå –ù–µ—Ç'}\n\n"
            f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
            f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
            f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
            f"üïí *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        keyboard = [[
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{request_id}")
        ]]
        
        if query.message.caption:
            query.edit_message_caption(
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            query.edit_message_text(
                text=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    
    elif data.startswith('message_'):
        request_id = int(data.split('_')[1])
        request = db.get_request(request_id)
        
        if request:
            # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
            phone_number = request['phone'].replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            message_button = InlineKeyboardButton(
                "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                url=f"https://t.me/{phone_number}" if phone_number.startswith('+') else f"https://t.me/{phone_number}"
            )
            
            contact_text = (
                f"üí¨ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
                f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {request['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n\n"
                f"_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram_"
            )
            
            query.answer("üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç...")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=contact_text,
                reply_markup=InlineKeyboardMarkup([[message_button]]),
                parse_mode=ParseMode.MARKDOWN
            )

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ====================

def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    if user_id in ADMIN_CHAT_IDS:
        return show_admin_panel(update, context)
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if text == 'üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
        return start_request_creation(update, context)
    elif text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        return show_my_requests(update, context)
    else:
        update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )

def handle_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    if '–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏' in text:
        return show_requests_by_filter(update, context, 'new')
    elif '–í —Ä–∞–±–æ—Ç–µ' in text:
        return show_requests_by_filter(update, context, 'in_progress')
    elif '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏' in text:
        return show_requests_by_filter(update, context, 'completed')

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Ç.–¥.) –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================

def start_request_creation(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    
    user = update.message.from_user
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    update.message.reply_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    context.user_data['name'] = update.message.text
    update.message.reply_text(
        "üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    context.user_data['phone'] = update.message.text
    update.message.reply_text(
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–∫–∞:*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üîß *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã:*",
        reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return show_main_menu(update, context)
    elif update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—á–∞—Å—Ç–∫–∞:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        "üìù *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:*\n\n–ü—Ä–∏–º–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –Ω–∞ —Ñ—Ä–µ–∑–µ—Ä–Ω–æ–º —É—á–∞—Å—Ç–∫–µ",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    context.user_data['problem'] = update.message.text
    update.message.reply_text(
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

def urgency(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìù *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–±–æ—Ç—ã:*",
            reply_markup=ReplyKeyboardRemove()
        )
        return PROBLEM
    
    context.user_data['urgency'] = update.message.text
    update.message.reply_text(
        "üì∏ *–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n–§–æ—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    elif update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:*",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return show_request_summary(update, context)
    elif update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return show_request_summary(update, context)
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
        )
        return PHOTO

# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================

def edit_request_choice(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    summary = context.user_data.get('summary', '')
    
    update.message.reply_text(
        f"{summary}\n\n"
        "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return EDIT_CHOICE

def handle_edit_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    choice = update.message.text
    context.user_data['editing_field'] = choice
    
    if choice == 'üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è':
        update.message.reply_text(
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:*",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
        update.message.reply_text(
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n–ü—Ä–∏–º–µ—Ä: +7 999 123-45-67",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É':
        update.message.reply_text(
            "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:*",
            reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        update.message.reply_text(
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å':
        update.message.reply_text(
            "‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            "‚úèÔ∏è *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                ['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        return show_request_summary(update, context)
    
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        return EDIT_CHOICE

def handle_edit_field(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è"""
    editing_field = context.user_data.get('editing_field')
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == 'üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if editing_field == 'üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è':
        context.user_data['name'] = text
        update.message.reply_text(
            "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω':
        context.user_data['phone'] = text
        update.message.reply_text(
            "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            return edit_request_choice(update, context)
        context.user_data['plot'] = text
        update.message.reply_text(
            "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']:
            return edit_request_choice(update, context)
        context.user_data['system_type'] = text
        update.message.reply_text(
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ':
        context.user_data['problem'] = text
        update.message.reply_text(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å':
        if text == 'üîô –ù–∞–∑–∞–¥':
            return edit_request_choice(update, context)
        context.user_data['urgency'] = text
        update.message.reply_text(
            "‚úÖ –°—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ':
        if text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ':
            update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
            context.user_data['photo'] = None
            update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup([
                    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                    ['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
                ], resize_keyboard=True)
            )
            return EDIT_FIELD
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    return edit_request_choice(update, context)

def update_summary(context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –≤ user_data"""
    photo_status = "‚úÖ –ï—Å—Ç—å" if context.user_data.get('photo') else "‚ùå –ù–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üìõ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üîß *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è:* {context.user_data['timestamp']}"
    )
    
    context.user_data['summary'] = summary

def show_request_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏ - –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if context.user_data.get('editing_mode'):
        # –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        return edit_request_choice(update, context)
    else:
        # –†–µ–∂–∏–º —Å–æ–∑–¥–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if context.user_data.get('photo'):
            update.message.reply_photo(
                photo=context.user_data['photo'],
                caption=f"{context.user_data['summary']}\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:*",
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                f"{context.user_data['summary']}\n\n*–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:*",
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        return ConversationHandler.END

def confirm_request(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        user = update.message.from_user
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            request_id = db.save_request(context.user_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            send_admin_notification(context, context.user_data, request_id)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            confirmation_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Å–ª—É–∂–±—É —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –∑–∞–≤–æ–¥–∞ –ö–æ–Ω—Ç–∞–∫—Ç!_ üõ†Ô∏è"
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if user.id in ADMIN_CHAT_IDS:
                # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(get_admin_panel_keyboard(), resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤
            if user.id in ADMIN_CHAT_IDS:
                update.message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardMarkup(get_admin_panel_keyboard(), resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        context.user_data.clear()
        
    elif update.message.text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É':
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        context.user_data['editing_mode'] = True
        return edit_request_choice(update, context)

def send_admin_notification(context: CallbackContext, user_data: Dict, request_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data.get('phone')}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"üîß *–°–∏—Å—Ç–µ–º–∞:* {user_data.get('system_type')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if user_data.get('photo') else '‚ùå –ù–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n\n"
        f"üïí *–í—Ä–µ–º—è:* {user_data.get('timestamp')}"
    )
    
    for admin_id in ADMIN_CHAT_IDS:
        try:
            if user_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def cancel_request(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    
    if user_id in ADMIN_CHAT_IDS:
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(get_admin_panel_keyboard(), resize_keyboard=True)
        )
    else:
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

def cancel_editing(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é"""
    context.user_data.pop('editing_mode', None)
    context.user_data.pop('editing_field', None)
    
    return show_request_summary(update, context)

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, urgency)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
                EDIT_CHOICE: [MessageHandler(Filters.text & ~Filters.command, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(Filters.text & ~Filters.command, handle_edit_field),
                    MessageHandler(Filters.photo, handle_edit_field)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(Filters.regex('^(üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é)$'), cancel_request),
                MessageHandler(Filters.regex('^(‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)$'), show_request_summary)
            ],
            allow_reentry=True
        )

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        edit_handler = MessageHandler(
            Filters.regex('^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)$'), 
            confirm_request
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_admin_panel))
        
        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(edit_handler)
        dispatcher.add_handler(MessageHandler(Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), confirm_request))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        dispatcher.add_handler(MessageHandler(Filters.regex('^(üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏|üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)$'), handle_main_menu))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏)
        dispatcher.add_handler(MessageHandler(
            Filters.regex(r'^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ \(\d+\)|üîÑ –í —Ä–∞–±–æ—Ç–µ \(\d+\)|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ \(\d+\))$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^(take_|complete_|call_|message_)'))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –º–µ–Ω—é!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_CHAT_IDS}")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
