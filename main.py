import logging
import sqlite3
import os
import json
import re
import threading
import shutil
import tempfile
import io
import base64
import time
import sys
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any

# ==================== –ü–†–û–í–ï–†–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ë–ò–ë–õ–ò–û–¢–ï–ö ====================
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    logging.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")

try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    logging.warning("matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

try:
    from telegram import (
        ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, 
        InlineKeyboardMarkup, InlineKeyboardButton, ParseMode, InputFile
    )
    from telegram.ext import (
        Updater, CommandHandler, MessageHandler, Filters, 
        ConversationHandler, CallbackContext, CallbackQueryHandler, JobQueue
    )
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    logging.error("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False

try:
    from flask import Flask, jsonify, request
    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN', '').strip()
        self.admin_chat_ids = self._parse_admin_ids()
        self.max_requests_per_hour = int(os.getenv('MAX_REQUESTS_PER_HOUR', '15'))
        self.backup_retention_days = int(os.getenv('BACKUP_RETENTION_DAYS', '30'))
        self.auto_backup_hour = int(os.getenv('AUTO_BACKUP_HOUR', '3'))
        self.auto_backup_minute = int(os.getenv('AUTO_BACKUP_MINUTE', '0'))
        self.request_timeout_hours = int(os.getenv('REQUEST_TIMEOUT_HOURS', '24'))
        self.db_path = os.getenv('DB_PATH', 'requests.db')
        self.backup_dir = os.getenv('BACKUP_DIR', 'backups')
        
        # Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.google_sheets_credentials = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        self.google_sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.google_sheet_name = os.getenv('GOOGLE_SHEET_NAME', '–ó–∞—è–≤–∫–∏')
        self.sync_to_sheets = bool(self.google_sheets_credentials and self.google_sheet_id and GOOGLE_SHEETS_AVAILABLE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.openai_api_key = os.getenv('OPENAI_API_KEY', '')
        self.web_dashboard_port = int(os.getenv('WEB_DASHBOARD_PORT', '5000'))
    
    def _parse_admin_ids(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            admin_ids = os.getenv('ADMIN_CHAT_IDS', '')
            if not admin_ids:
                return []
            return [int(x.strip()) for x in admin_ids.split(',') if x.strip()]
        except (ValueError, AttributeError) as e:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_IDS: {e}")
            return []
    
    def validate(self) -> bool:
        if not self.bot_token or self.bot_token == 'your_bot_token':
            logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return False
        if not self.admin_chat_ids:
            logging.warning("‚ö†Ô∏è ADMIN_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
# –≠—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ
db = None
sheets_manager = None
analytics_engine = None
ai_assistant = None
security_manager = None
performance_monitor = None
template_manager = None
i18n = None
gamification_engine = None
web_dashboard = None
rate_limiter = None

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø CONVERSATIONHANDLER ====================
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
enhanced_user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å'],
    ['üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    ['‚ÑπÔ∏è –û –±–æ—Ç–µ', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]

def get_enhanced_admin_panel():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ —Å—á–µ—Ç—á–∏–∫–∞–º–∏"""
    new_count = len(db.get_requests_by_filter('new')) if db else 0
    in_progress_count = len(db.get_requests_by_filter('in_progress')) if db else 0
    urgent_count = len(db.get_urgent_requests()) if db else 0
    stuck_count = len(db.get_stuck_requests(config.request_timeout_hours)) if db else 0
    
    return [
        [f'üÜï –ù–æ–≤—ã–µ ({new_count})', f'üîÑ –í —Ä–∞–±–æ—Ç–µ ({in_progress_count})'],
        [f'‚è∞ –°—Ä–æ—á–Ω—ã–µ ({urgent_count})', f'üö® –ó–∞–≤–∏—Å—à–∏–µ ({stuck_count})'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['üíæ –ë—ç–∫–∞–ø—ã', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'],
        ['üìä Google Sheets', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'],
        ['üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è', 'üìä –ú–µ—Ç—Ä–∏–∫–∏']
    ]

def create_request_actions_keyboard(request_id: int) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"assign_{request_id}"),
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{request_id}")
        ],
        [
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_{request_id}"),
            InlineKeyboardButton("‚úèÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"comment_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –î–ï–ö–û–†–ê–¢–û–† –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø ====================
def safe_execute(default_response="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}", exc_info=True)
                
                # –ò—â–µ–º update –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
                update = None
                context = None
                
                for arg in args:
                    if isinstance(arg, Update):
                        update = arg
                    elif isinstance(arg, CallbackContext):
                        context = arg
                
                if 'update' in kwargs:
                    update = kwargs['update']
                if 'context' in kwargs:
                    context = kwargs['context']
                
                if update and hasattr(update, 'message') and update.message:
                    try:
                        update.message.reply_text(
                            default_response,
                            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
                        )
                    except Exception as msg_error:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_error}")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º –æ–± –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ
                if context and config.admin_chat_ids:
                    for admin_id in config.admin_chat_ids[:3]:
                        try:
                            context.bot.send_message(
                                admin_id,
                                f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {func.__name__}: {str(e)[:100]}..."
                            )
                        except Exception as admin_error:
                            logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: {admin_error}")
                
                return ConversationHandler.END
        return wrapper
    return decorator

# ==================== –í–ê–õ–ò–î–ê–¢–û–†–´ ====================
class Validators:
    @staticmethod
    def validate_phone(phone: str) -> bool:
        return bool(re.match(r'^[\d\s\-\+\(\)]{7,20}$', phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]{2,50}$', name.strip()))
    
    @staticmethod
    def validate_plot(plot: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z0-9\s\-]{2,20}$', plot.strip()))

class EnhancedValidators:
    @staticmethod
    def validate_phone(phone: str) -> bool:
        return bool(re.match(r'^[\d\s\-\+\(\)]{7,20}$', phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]{2,50}$', name.strip()))
    
    @staticmethod
    def validate_plot(plot: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z0-9\s\-]{2,20}$', plot.strip()))
    
    @staticmethod
    def sanitize_input(text: str, max_length: int = 500) -> str:
        """–û—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        sanitized = re.sub(r'[<>{}\[\]]', '', text)
        return sanitized[:max_length]
    
    @staticmethod
    def validate_problem_text(text: str) -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã"""
        if len(text) < 5:
            return False, "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        
        if len(text) > 1000:
            return False, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        spam_keywords = ['http://', 'https://', '[url]', '–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞']
        if any(keyword in text.lower() for keyword in spam_keywords):
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏"
        
        return True, ""

# ==================== –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================
class SecurityManager:
    def __init__(self):
        self.suspicious_activities = {}
        self.blocked_users = set()
        self.lock = threading.Lock()
    
    def check_suspicious_activity(self, user_id, action):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        with self.lock:
            now = datetime.now()
            hour_key = now.strftime("%Y%m%d%H")
            
            if user_id not in self.suspicious_activities:
                self.suspicious_activities[user_id] = {}
            
            if hour_key not in self.suspicious_activities[user_id]:
                self.suspicious_activities[user_id][hour_key] = 0
            
            self.suspicious_activities[user_id][hour_key] += 1
            
            # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å - –±–ª–æ–∫–∏—Ä—É–µ–º
            if self.suspicious_activities[user_id][hour_key] > 50:
                self.blocked_users.add(user_id)
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                return False
            
            return True
    
    def is_user_blocked(self, user_id):
        return user_id in self.blocked_users

# ==================== RATE LIMITER ====================
class EnhancedRateLimiter:
    def __init__(self):
        self.requests = {}
        self.lock = threading.Lock()
    
    def is_limited(self, user_id, action, max_requests):
        with self.lock:
            now = datetime.now()
            hour_key = now.strftime("%Y%m%d%H")
            
            if user_id not in self.requests:
                self.requests[user_id] = {}
            
            if action not in self.requests[user_id]:
                self.requests[user_id][action] = {}
            
            if hour_key not in self.requests[user_id][action]:
                self.requests[user_id][action][hour_key] = 0
            
            self.requests[user_id][action][hour_key] += 1
            return self.requests[user_id][action][hour_key] > max_requests

    def check_rate_limit(self, user_id: int, action: str = "default") -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å + —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        if self.is_limited(user_id, action, config.max_requests_per_hour):
            return False, "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
        
        if security_manager and security_manager.is_user_blocked(user_id):
            return False, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        
        return True, ""

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        name TEXT,
                        phone TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        assigned_to TEXT,
                        completed_at TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        request_count INTEGER DEFAULT 0,
                        created_at TEXT,
                        last_activity TEXT
                    )
                ''')
                conn.commit()
                logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_request(self, data: Dict) -> int:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, username, first_name, last_name, request_count, created_at, last_activity)
                    VALUES (?, ?, ?, ?, 
                        COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1,
                        COALESCE((SELECT created_at FROM users WHERE user_id = ?), ?), ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data['user_id'], data['user_id'], datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, first_name, last_name, name, phone, plot, system_type, 
                     problem, photo, urgency, status, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data.get('name'), data.get('phone'), data.get('plot'), data.get('system_type'),
                    data.get('problem'), data.get('photo'), data.get('urgency'), 'new',
                    datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                request_id = cursor.lastrowid
                conn.commit()
                logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {data['user_id']}")
                return request_id
                
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            raise
    
    def get_requests_by_filter(self, status: str) -> List[Dict]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests WHERE status = ? ORDER BY created_at DESC
                ''', (status,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_urgent_requests(self, hours: int = 2) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —á–∞—Å–æ–≤"""
        try:
            time_threshold = (datetime.now() - timedelta(hours=hours)).isoformat()
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE urgency LIKE '%–°—Ä–æ—á–Ω–æ%' OR urgency LIKE '%–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø%'
                    AND status IN ('new', 'in_progress')
                    AND created_at > ?
                    ORDER BY created_at ASC
                ''', (time_threshold,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_stuck_requests(self, hours: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ –∑–∞—è–≤–∫–∏"""
        try:
            time_threshold = (datetime.now() - timedelta(hours=hours)).isoformat()
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE status IN ('new', 'in_progress')
                    AND created_at < ?
                    ORDER BY created_at ASC
                ''', (time_threshold,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_user_statistics(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total_requests,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                        MIN(created_at) as first_request,
                        MAX(created_at) as last_request
                    FROM requests 
                    WHERE user_id = ?
                ''', (user_id,))
                
                result = cursor.fetchone()
                if result:
                    columns = ['total_requests', 'completed', 'in_progress', 'new', 'first_request', 'last_request']
                    return dict(zip(columns, result))
                return {}
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    def update_request(self, request_id: int, updates: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                set_clause = ", ".join([f"{key} = ?" for key in updates.keys()])
                values = list(updates.values())
                
                query = f"UPDATE requests SET {set_clause}, updated_at = ? WHERE id = ?"
                cursor.execute(query, values + [datetime.now().isoformat(), request_id])
                conn.commit()
                logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {updates}")
                return True
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def get_request_by_id(self, request_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return None
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None

    def get_statistics(self, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            since_date = (datetime.now() - timedelta(days=days)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress
                    FROM requests 
                    WHERE created_at > ?
                ''', (since_date,))
                
                result = cursor.fetchone()
                return {
                    'total': result[0] if result else 0,
                    'completed': result[1] if result else 0,
                    'new': result[2] if result else 0,
                    'in_progress': result[3] if result else 0
                }
                
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'completed': 0, 'new': 0, 'in_progress': 0}

# ==================== BACKUP MANAGER ====================
class BackupManager:
    @staticmethod
    def create_backup():
        try:
            if not os.path.exists(config.db_path):
                logging.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {config.db_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
                
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(config.backup_dir, f"backup_{timestamp}.db")
            os.makedirs(config.backup_dir, exist_ok=True)
            shutil.copy2(config.db_path, backup_path)
            logging.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
            return backup_path
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None

# ==================== AI –ü–û–ú–û–©–ù–ò–ö ====================
class AIAssistant:
    def __init__(self, api_key):
        self.api_key = api_key
    
    def analyze_problem_text(self, problem_description):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            keywords = {
                'internet': ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–µ—Ç—å', 'wi-fi', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
                'electricity': ['—Å–≤–µ—Ç', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ä–æ–∑–µ—Ç–∫–∞', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å'],
                'phone': ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–∑–≤–æ–Ω–æ–∫', '—Å–≤—è–∑—å', '–∞—Ç–∞—Å', '—Ç—Ä—É–±–∫–∞'],
                'camera': ['–∫–∞–º–µ—Ä–∞', '–≤–∏–¥–µ–æ', '–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'cctv', '–æ–±—ä–µ–∫—Ç–∏–≤']
            }
            
            problem_lower = problem_description.lower()
            for category, words in keywords.items():
                if any(word in problem_lower for word in words):
                    return category
            
            return 'other'
        except Exception as e:
            logging.error(f"AI analysis error: {e}")
            return 'other'
    
    def suggest_solutions(self, problem_text, system_type):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        solution_templates = {
            'electricity': "üîå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç—ã –≤ —â–∏—Ç–∫–µ, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è",
            'internet': "üì∂ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            'phone': "üìû –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±–∫—É, –ª–∏–Ω–∏—é —Å–≤—è–∑–∏, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–±–µ–ª—å",
            'camera': "üé• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏, —á–∏—Å—Ç–æ—Ç—É –æ–±—ä–µ–∫—Ç–∏–≤–∞",
            'other': "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –Ω–∞ –º–µ—Å—Ç–µ"
        }
        return solution_templates.get(system_type, "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")

# ==================== –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø ====================
class GamificationEngine:
    def __init__(self, db_path):
        self.db_path = db_path
        if db_path:
            self.init_gamification()
    
    def init_gamification(self):
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS user_points (
                        user_id INTEGER PRIMARY KEY,
                        points INTEGER DEFAULT 0,
                        level INTEGER DEFAULT 1,
                        achievements TEXT DEFAULT '[]',
                        last_activity TEXT
                    )
                ''')
                conn.commit()
                logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def award_points(self, user_id, action):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ"""
        point_values = {
            'create_request': 10,
            'request_completed': 5,
            'first_request': 25
        }
        
        points_to_award = point_values.get(action, 0)
        
        if points_to_award > 0:
            try:
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        INSERT OR REPLACE INTO user_points 
                        (user_id, points, level, last_activity)
                        VALUES (?, 
                            COALESCE((SELECT points FROM user_points WHERE user_id = ?), 0) + ?,
                            COALESCE((SELECT level FROM user_points WHERE user_id = ?), 1),
                            ?
                        )
                    ''', (user_id, user_id, points_to_award, user_id, datetime.now().isoformat()))
                    conn.commit()
                    logging.info(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points_to_award} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∑–∞ {action}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {e}")
    
    def get_user_stats(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT points, level FROM user_points WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                return {'points': result[0] if result else 0, 'level': result[1] if result else 1}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'points': 0, 'level': 1}
    
    def get_leaderboard(self, limit=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT user_id, points, level 
                    FROM user_points 
                    ORDER BY points DESC 
                    LIMIT ?
                ''', (limit,))
                return cursor.fetchall()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤: {e}")
            return []

# ==================== –ê–ù–ê–õ–ò–¢–ò–ö–ê ====================
class AnalyticsEngine:
    def __init__(self):
        pass
    
    def get_advanced_analytics(self, days=30):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        try:
            if not hasattr(config, 'db_path') or not config.db_path:
                return {}
                
            since_date = (datetime.now() - timedelta(days=days)).isoformat()
            
            with sqlite3.connect(config.db_path) as conn:
                cursor = conn.cursor()
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–∏—Å—Ç–µ–º
                cursor.execute('''
                    SELECT system_type, COUNT(*) as count 
                    FROM requests 
                    WHERE created_at > ?
                    GROUP BY system_type
                ''', (since_date,))
                system_stats = dict(cursor.fetchall())
                
                # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
                cursor.execute('''
                    SELECT AVG((julianday(completed_at) - julianday(created_at)) * 24)
                    FROM requests 
                    WHERE status = 'completed' AND completed_at IS NOT NULL
                ''')
                avg_completion_time = cursor.fetchone()[0] or 0
                
                return {
                    'system_distribution': system_stats,
                    'avg_completion_hours': round(avg_completion_time, 2),
                    'total_requests': sum(system_stats.values())
                }
        except Exception as e:
            logging.error(f"Analytics error: {e}")
            return {}

# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
def safe_get_ai_suggestion(problem_text: str, system_type: str) -> str:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    try:
        if ai_assistant:
            return ai_assistant.suggest_solutions(problem_text, system_type)
    except Exception as e:
        logging.error(f"AI suggestion error: {e}")
    return "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"

def safe_award_points(user_id: int, action: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤"""
    try:
        if gamification_engine:
            gamification_engine.award_points(user_id, action)
    except Exception as e:
        logging.error(f"Gamification error: {e}")

def safe_get_analytics(days: int = 30) -> Dict:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        if analytics_engine:
            return analytics_engine.get_advanced_analytics(days)
    except Exception as e:
        logging.error(f"Analytics error: {e}")
    return {}

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================
@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é")
def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not update or not update.message:
        return
    
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user.id, "main_menu")
    if not allowed:
        update.message.reply_text(message)
        return
    
    if user.id in config.admin_chat_ids:
        reply_markup = ReplyKeyboardMarkup(get_enhanced_admin_panel(), resize_keyboard=True)
    else:
        reply_markup = ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
def enhanced_start_request_creation(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if not update or not update.message:
        return ConversationHandler.END
    
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user.id, "create_request")
    if not allowed:
        update.message.reply_text(message)
        return ConversationHandler.END
    
    update.message.reply_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏")
def name(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    if not update or not update.message:
        return NAME
    
    name_text = update.message.text
    if not Validators.validate_name(name_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")
        return NAME
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞
    context.user_data['name'] = EnhancedValidators.sanitize_input(name_text)
    update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def phone(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if not update or not update.message:
        return PHONE
    
    phone_text = update.message.text
    if not Validators.validate_phone(phone_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +7 123 456-78-90")
        return PHONE
    
    context.user_data['phone'] = phone_text
    
    keyboard = [['–£—á–∞—Å—Ç–æ–∫ 1', '–£—á–∞—Å—Ç–æ–∫ 2', '–£—á–∞—Å—Ç–æ–∫ 3'], ['–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫']]
    update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PLOT

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—á–∞—Å—Ç–∫–∞")
def plot(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∫–∞"""
    if not update or not update.message:
        return PLOT
    
    plot_text = update.message.text
    if not Validators.validate_plot(plot_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–∞—Å—Ç–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        return PLOT
    
    context.user_data['plot'] = plot_text
    
    keyboard = [
        ['üîå –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç'],
        ['üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 'üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ'],
        ['üöø –°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞', 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ']
    ]
    update.message.reply_text(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SYSTEM_TYPE

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã")
def system_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if not update or not update.message:
        return SYSTEM_TYPE
    
    context.user_data['system_type'] = update.message.text
    
    update.message.reply_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n*–ü—Ä–∏–º–µ—Ä:* –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–∑–µ—Ç–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ 101, –Ω–µ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–±–ª–µ–º—ã")
def problem(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if not update or not update.message:
        return PROBLEM
    
    problem_text = update.message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–±–ª–µ–º—ã
    is_valid, error_message = EnhancedValidators.validate_problem_text(problem_text)
    if not is_valid:
        update.message.reply_text(f"‚ùå {error_message}")
        return PROBLEM
    
    # –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤–≤–æ–¥–∞
    context.user_data['problem'] = EnhancedValidators.sanitize_input(problem_text)
    
    keyboard = [['üî¥ –°—Ä–æ—á–Ω–æ', 'üü° –°—Ä–µ–¥–Ω—è—è', 'üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ']]
    update.message.reply_text(
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return URGENCY

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
def urgency(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    if not update or not update.message:
        return URGENCY
    
    # –î–ª—è —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
    if context.user_data.get('is_emergency'):
        context.user_data['urgency'] = 'üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø'
    else:
        context.user_data['urgency'] = update.message.text
    
    context.user_data['user_id'] = update.message.from_user.id
    context.user_data['username'] = update.message.from_user.username
    context.user_data['first_name'] = update.message.from_user.first_name
    context.user_data['last_name'] = update.message.from_user.last_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    request_text = (
        "üìã *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n"
        f"üë§ *–§–ò–û:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data['phone']}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"‚öôÔ∏è *–°–∏—Å—Ç–µ–º–∞:* {context.user_data['system_type']}\n"
        f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {context.user_data['problem']}\n"
        f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    if context.user_data.get('is_emergency'):
        request_text += "üö® *–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ó–ê–Ø–í–ö–ê - –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢* üö®\n\n"
    
    request_text += "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(
        request_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return ConversationHandler.END

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
def enhanced_confirm_request(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    if not update or not update.message or not context:
        return
    
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        user = update.message.from_user
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not db:
            update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        try:
            required_fields = ['name', 'phone', 'plot', 'system_type', 'problem', 'urgency']
            for field in required_fields:
                if field not in context.user_data or not context.user_data[field]:
                    update.message.reply_text(
                        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}",
                        reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
                    )
                    return
            
            # AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
            problem_text = context.user_data['problem']
            suggested_solution = safe_get_ai_suggestion(problem_text, context.user_data['system_type'])
            context.user_data['ai_suggestion'] = suggested_solution
            
            request_id = db.save_request(context.user_data)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            safe_award_points(user.id, 'create_request')
            
            # –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
            )
            
            if 'ai_suggestion' in context.user_data:
                confirmation_text += f"\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI:* {context.user_data['ai_suggestion']}\n"
            
            confirmation_text += f"\n_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üõ†Ô∏è"
            
            if user.id in config.admin_chat_ids:
                reply_markup = ReplyKeyboardMarkup(get_enhanced_admin_panel(), resize_keyboard=True)
            else:
                reply_markup = ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
            
            update.message.reply_text(
                confirmation_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            admin_message = (
                f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {context.user_data['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data['phone']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
                f"‚öôÔ∏è *–°–∏—Å—Ç–µ–º–∞:* {context.user_data['system_type']}\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {context.user_data['problem'][:100]}...\n"
            )
            
            if 'ai_suggestion' in context.user_data:
                admin_message += f"üí° *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {context.user_data['ai_suggestion']}\n"
            
            for admin_id in config.admin_chat_ids:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=create_request_actions_keyboard(request_id)
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logging.info(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        if 'is_emergency' in context.user_data:
            del context.user_data['is_emergency']
            
        context.user_data.clear()
    else:
        update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞—è–≤–∫–∏")
def cancel_request(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    if not update or not update.message:
        return ConversationHandler.END
        
    # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    if 'is_emergency' in context.user_data:
        del context.user_data['is_emergency']
        
    context.user_data.clear()
    update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é")
def enhanced_handle_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not update or not update.message:
        return
    
    user_id = update.message.from_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user_id, "main_menu")
    if not allowed:
        update.message.reply_text(message)
        return
    
    if text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        show_user_requests(update, context)
    
    elif text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        user_stats = db.get_user_statistics(user_id) if db else {}
        stats_text = (
            "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {user_stats.get('total_requests', 0)}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_stats.get('completed', 0)}\n"
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {user_stats.get('in_progress', 0)}\n"
            f"üÜï –ù–æ–≤—ã—Ö: {user_stats.get('new', 0)}\n"
        )
        update.message.reply_text(stats_text, parse_mode=ParseMode.MARKDOWN)
    
    elif text == 'üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_gamification_stats(update, context)
    
    elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
        show_advanced_analytics(update, context)
    
    elif text == 'üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å':
        emergency_help(update, context)

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
def enhanced_handle_admin_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    if not update or not update.message:
        return
    
    user_id = update.message.from_user.id
    if user_id not in config.admin_chat_ids:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    text = update.message.text
    
    if text.startswith('üÜï –ù–æ–≤—ã–µ'):
        new_requests = db.get_requests_by_filter('new') if db else []
        if not new_requests:
            update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
        else:
            update.message.reply_text(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_requests)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:")
            for request in new_requests[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                request_text = (
                    f"üÜï *–ó–∞—è–≤–∫–∞ #{request['id']}*\n\n"
                    f"üë§ {request['name']}\n"
                    f"üìû {request['phone']}\n"
                    f"üìç {request['plot']}\n"
                    f"üìù {request['problem'][:100]}...\n"
                )
                update.message.reply_text(
                    request_text,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=create_request_actions_keyboard(request['id'])
                )
    
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_statistics(update, context)
    
    elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
        show_advanced_analytics(update, context)
    
    elif text == 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è':
        show_gamification_stats(update, context)
    
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        show_enhanced_admin_panel(update, context)

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫")
def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    if not update or not update.callback_query:
        return
        
    query = update.callback_query
    query.answer()
    
    data = query.data
    
    if data and data.startswith('assign_'):
        request_id = int(data.split('_')[1])
        if db and db.update_request(request_id, {'status': 'in_progress'}):
            query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞—è–≤–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            request_data = db.get_request_by_id(request_id)
            if request_data and 'user_id' in request_data:
                try:
                    context.bot.send_message(
                        chat_id=request_data['user_id'],
                        text=f"üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –≤—ã–µ—Ö–∞–ª."
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")
    
    elif data and data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        if db and db.update_request(request_id, {'status': 'completed', 'completed_at': datetime.now().isoformat()}):
            query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                request_data = db.get_request_by_id(request_id)
                if request_data and 'user_id' in request_data:
                    context.bot.send_message(
                        chat_id=request_data['user_id'],
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                    )
                    # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                    safe_award_points(request_data['user_id'], 'request_completed')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")
def show_user_requests(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not update or not update.message:
        return
        
    user_id = update.message.from_user.id
    
    try:
        if not db:
            update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        with sqlite3.connect(config.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, problem, status, created_at, urgency 
                FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 10
            ''', (user_id,))
            
            requests = cursor.fetchall()
            
        if not requests:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
            return
        
        text = "üìã *–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:*\n\n"
        for req_id, problem, status, created_at, urgency in requests:
            status_icons = {
                'new': 'üÜï',
                'in_progress': 'üîÑ', 
                'completed': '‚úÖ'
            }
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            text += f"{status_icons.get(status, 'üìÑ')} *–ó–∞—è–≤–∫–∞ #{req_id}*\n"
            text += f"üìù {problem[:50]}...\n"
            text += f"‚è±Ô∏è {urgency} | {date}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏")
def emergency_help(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏"""
    if not update or not update.message:
        return ConversationHandler.END
    
    user_id = update.message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    allowed, message = rate_limiter.check_rate_limit(user_id, "emergency")
    if not allowed:
        update.message.reply_text(message)
        return ConversationHandler.END
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –∑–∞—è–≤–∫–∏
    context.user_data['is_emergency'] = True
    
    update.message.reply_text(
        "üö® *–°–†–û–ß–ù–ê–Ø –ü–û–ú–û–©–¨*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å–≤—è–∑–∏:",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=ReplyKeyboardRemove()
    )
    
    return NAME

def show_advanced_analytics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    if not update or not update.message:
        return
        
    try:
        analytics = safe_get_analytics(30)
        
        text = "üìà *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
        text += f"‚è±Ô∏è *–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {analytics.get('avg_completion_hours', 0)}—á\n\n"
        
        system_distribution = analytics.get('system_distribution', {})
        if system_distribution:
            text += "üîß *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º:*\n"
            for system, count in system_distribution.items():
                text += f"‚Ä¢ {system}: {count} –∑–∞—è–≤–æ–∫\n"
        else:
            text += "üìä –î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
        
        update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_advanced_analytics: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")

def show_gamification_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not update or not update.message:
        return
        
    user_id = update.message.from_user.id
    user_stats = gamification_engine.get_user_stats(user_id) if gamification_engine else {'points': 0, 'level': 1}
    
    text = "üéÆ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_stats['level']}\n"
    text += f"‚≠ê –û—á–∫–∏: {user_stats['points']}\n\n"
    
    if gamification_engine:
        leaderboard = gamification_engine.get_leaderboard(5)
        if leaderboard:
            text += "üèÖ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n"
            for i, (user_id, points, level) in enumerate(leaderboard, 1):
                text += f"{i}. –£—Ä–æ–≤–µ–Ω—å {level} 1):
                text += f"{i}. –£—Ä–æ–≤–µ–Ω—å {level} - {points} –æ—á–∫–æ–≤\n"
    
    update.message.reply_text(text, parse_mode=Parse - {points} –æ—á–∫–æ–≤\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_statistics(Mode.MARKDOWN)

def show_statistics(update:update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
 Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not update or not update.message:
           if not update or not update.message:
        return
        
    stats = db.get_stat return
        
    stats = db.get_statistics(7) if db else {}
istics(7) if db else {}
    
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏    
    text = (
        "üìä *–∫–∞ –∑–∞ 7 –¥–Ω–µ–π*\n\n"
        f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π*\n\n"
        f"üì® –í—Å–µ–≥–æ –∑–∞–æ–∫: {stats—è–≤–æ–∫: {stats.get('total',.get('total', 0)}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats.get(' 0)}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats.get('in_progress', 0)}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats.get('newin_progress', 0)}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats.get('new', 0)}\n"
', 0)}\n"
    )
    
    update.message.reply_text(text    )
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show, parse_mode=ParseMode.MARKDOWN)

def show_enhanced_admin_panel_enhanced_admin_panel(update: Update, context: CallbackContext(update: Update, context: CallbackContext):
   ):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not update or not """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not update or not update.message:
        return
        
 update.message:
        return
        
    user_id = update.message.from_user.id
    if    user_id = update.message.from_user.id
    if user_id not in config.admin_chat_ids:
 user_id not in config.admin_chat_ids:
        update.message.reply_text        update.message.reply_text("‚ùå –£("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    reply_markup = ReplyKeyboard –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    reply_markup = ReplyKeyboardMarkup(get_enhanced_admin_panel(),Markup(get_enhanced_admin_panel(), resize_keyboard=True)
    update.message resize_keyboard=True)
    update.message.reply_text.reply_text(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ        reply_markup=reply_mark –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKup,
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –ó–êDOWN
    )

# ==================== –ó–ê–î–ê–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–î–ê–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ ===================–ù–ò–Æ ====================
def backup_job(context: CallbackContext):
    """–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è=
def backup_job(context: CallbackContext):
    """–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_path = BackupManager.create_backup()
    –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_path = BackupManager.create_backup()
    if backup_path:
 if backup_path:
        logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞        logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.admin_chat_ids:
 –∞–¥–º–∏–Ω–∞–º
        for admin_id in config.admin_chat_ids:
            try:
                context.b            try:
                context.bot.send_message(
                    admin_id,
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ωot.send_message(
                    admin_id,
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: `{os.path.basename(backup_path: `{os.path.basename(backup_path)}`",
                    parse_mode)}`",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception=ParseMode.MARKDOWN
                )
            except Exception as e:
                logging as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—ç–∫–∞–ø–µ–ª–µ–Ω–∏—è –æ –±—ç–∫–∞–ø–µ: {e}")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞: {e}")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞")

def check_urgent_requests(context: CallbackContext):
 –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞")

def check_urgent_requests(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    try    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    try:
        urgent_requests = db.get_:
        urgent_requests = db.get_urgent_requests() if db else []
        if urgent_urgent_requests() if db else []
        if urgent_requests:
            for admin_id in config.admin_chat_ids:
requests:
            for admin_id in config.admin_chat_ids:
                try:
                try:
                    context.bot.send_message(
                        admin_id,
                                           context.bot.send_message(
                        admin_id,
                        f"üî¥ f"üî¥ –í–Ω–∏–º–∞ –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å {len(urgent_requests)} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏–Ω–∏–µ! –ï—Å—Ç—å {len(urgent_requests)} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logging–∫–∏",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö: {e}")
—è–≤–∫–∞—Ö: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

def error    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞:–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}", {context.error}", exc_info=context.error)
    
    if update and update.message:
        update.message.reply_text(
            exc_info=context.error)
    
    if update and update.message:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞ "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboard_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )

# ==================== –ò–ù–òboard=True)
        )

# ==================== –ò–ù–ò–¶–ò–ê–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ====================
–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ====================
def initializedef initialize_basic_systems():
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"""
    global db, rate_basic_systems():
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"""
   _limiter, security_manager, analytics_engine, ai_assistant, gamification_engine
    
    try:
 global db, rate_limiter, security_manager, analytics_engine, ai_assistant, gamification_engine
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database(config.db –¥–∞–Ω–Ω—ã—Ö
        db = Database(config.db_path)
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        rate_limiter =_path)
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        rate_limiter = EnhancedRateLimiter()
        security_manager EnhancedRateLimiter()
        security_manager = SecurityManager()
        
        # AnalyticsEngine —Ç—Ä–µ–±—É–µ—Ç = SecurityManager()
        
        # AnalyticsEngine —Ç—Ä–µ–±—É–µ—Ç db_path db_path –∏–∑ config
        analytics_engine –∏–∑ config
        analytics_engine = AnalyticsEngine()
        
        # AI –ø–æ–º–æ—â–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
        if config = AnalyticsEngine()
        
        # AI –ø–æ–º–æ—â–Ω–∏–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
       .openai_api_key and config.openai_api_key != "your_openai_api_key":
            ai_assistant = AIAssistant(config.openai if config.openai_api_key and config.openai_api_key != "your_openai_api_key":
            ai_assistant = AIAssistant(config.openai_api_key)
            logging.info("_api_key)
            logging.info("‚úÖ AI –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            ai_assistant‚úÖ AI –ø–æ–º–æ—â–Ω–∏–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            ai_assistant = None
            logging.info = None
            logging.info("("‚ùå AI –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
        
        #‚ùå AI –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω (–Ω–µ—Ç API –∫–ª—é—á–∞)")
        
        # –ì –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
        gamification_engine = GamificationEngine(config.db_path)
        
        logging.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
        gamification_engine = GamificationEngine(config.db_path)
        
        logging.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logging.error Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
        return False

# ====================(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
        return False

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.b—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %asicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
        level=logging.INFO,
       (levelname)s - %(message)s', 
        level=logging.INFO,
        handlers=[
            logging.FileHandler('bot.log handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
           ', encoding='utf-8'),
            logging.StreamHandler logging.StreamHandler()
        ]
    )
    
    logging.info("=" * 50)
    logging.info("()
        ]
    )
    
    logging.info("=" * 50)
    logging.info("ü§ñ –ó–ê–ü–£–°–ö –°–òü§ñ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–Ø –ó–ê–Ø–í–ö–ê–ú–ò")
    logging.info("=" * 50)
    
   –ú–ò")
    logging.info("=" * 50)
    
    if not config.validate():
        logging.error("‚ùå if not config.validate():
        logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞!")
        –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞!")
        return
    
    if not TELEGRAM_AVAILABLE:
        logging.error return
    
    if not TELEGRAM_AVAILABLE:
        logging.error("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
       ("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
 return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    if not initialize_basic_systems():
           if not initialize_basic_systems():
        logging.error logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã!")
        return
    
    try("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã!")
        return
    
    try:
        updater = Updater(config.bot:
        updater = Updater(config.bot_token)
        dispatcher = updater.dispatcher

        # –û_token)
        dispatcher = updater.dispatcher–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)

       

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)

        # –ó–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        job_queue = updater.job # –ó–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        job_queue = updater.job_queue
        if_queue
        if job_queue:
            try:
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ job_queue:
            try:
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                from datetime import time
                from datetime import time as dt_time
                backup_time = dt_time as dt_time
                backup_time = dt_time(hour=config.auto_backup_hour, minute(hour=config.auto_backup_hour, minute=config.auto_backup_minute)
               =config.auto_backup_minute)
                job_queue.run_daily(backup_job, time= job_queue.run_daily(backup_jobbackup_time)
                
                # –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫, time=backup_time)
                
                # –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                job_queue.run_repeating(check_urgent_requests
                job_queue.run_repeating(check_urgent_requests, interval=, interval=3600, first=10)
                
                logging.info("‚úÖ –ó–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
3600, first=10)
                
                logging.info("‚úÖ –ó–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
            except Exception as e:
                logging.error(f"            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.re—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—Égex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), enhanced_start_request_creation)$'), enhanced_start_request_creation),
                MessageHandler(Filters.regex('^(),
                MessageHandler(Filters.regex('^(üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å)$'), emergencyüÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å)$'), emergency_help),
            ],
            states={
                NAME_help),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command,: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~ name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOTFilters.command, phone)],
                PLOT: [MessageHandler(Filters.text &: [MessageHandler(F ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_typeilters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(F                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY:ilters.text & ~Filters.command, urgency)],
            },
            fallbacks=[
                CommandHandler [MessageHandler(Filters.text & ~Filters.command, urgency)],
            },
            fallbacks=[
                CommandHandler('cancel('cancel', cancel_request),
                MessageHandler(Filters.regex('^(‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel', cancel_request),
                MessageHandler(Filters.regex('^(‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏_request),
            ],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher
        dispatcher.add_handler.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_enhanced_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_enhanced_admin_panel))
        dispatcher.add_handler(CommandHandler('stats', show_statistics))
       _admin_panel))
        dispatcher.add_handler(CommandHandler('stats', show_statistics))
        dispatcher.add_handler(CommandHandler('analytics dispatcher.add_handler(CommandHandler('analytics', show_advanced_analytics))
        dispatcher.add', show_advanced_analytics))
        dispatcher_handler(CommandHandler('gamification', show_gamification_stats))
        dispatcher.add_handler(CommandHandler('gamification', show_gamification_stats))
        dispatcher.add_handler(CommandHandler('cancel', cancel_request))
        
        dispatcher.add_handler.add_handler(CommandHandler('cancel', cancel_request))
        
        dispatcher.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dispatcher.add_handler(Message        dispatcher.add_handler(MessageHandler(
            FiltersHandler(
            Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), 
            enhanced_confirm_request
       .regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), 
            enhanced_confirm_request
        ))
        
        dispatcher.add_handler(MessageHandler(
            ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤ Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É|üìã–∫—É|üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏|üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏ –ú–æ–∏ –∑–∞—è–≤–∫–∏|üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üÜò –°–∫–∞|üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å|üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|‚ÑπÔ∏è –û –±–æ—Ç–µ|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏)$'), 
—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å|üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|‚ÑπÔ∏è –û –±–æ—Ç–µ|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏)$'), 
            enhanced_handle_main_menu
        ))
        
        dispatcher.add            enhanced_handle_main_menu
        ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex_handler(MessageHandler(
            Filters.regex('^(üÜï –ù–æ–≤—ã–µ|üîÑ –í('^(üÜï –ù–æ–≤—ã–µ|üîÑ –í —Ä–∞–±–æ—Ç–µ|‚è∞ –°—Ä–æ—á–Ω—ã–µ| —Ä–∞–±–æ—Ç–µ|‚è∞ –°—Ä–æ—á–Ω—ã–µ|üö®üö® –ó–∞–≤–∏ –ó–∞–≤–∏—Å—à–∏–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|üíæ –ë—Å—à–∏–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|üíæ –ë—ç–∫–∞–ø—ã|—ç–∫–∞–ø—ã|üîÑ –û–±–Ω–æ–≤–∏—Ç—å|üìä Google Sheets|üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è|üîÑ –û–±–Ω–æ–≤–∏—Ç—å|üìä Google Sheets|üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è|üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è|üìä –ú–µ—Ç—Ä–∏–∫–∏)$'), 
            enhanced_handle_admin_menu
        ))
        
üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è|üìä –ú–µ—Ç—Ä–∏–∫–∏)$'), 
            enhanced_handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
        dispatcher        dispatcher.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logging.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logging.info(f"üìç.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logging.info(f"üìç –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {: {config.db_path}")
        logging.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.admin_chat_ids)}")
        logging.info(f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.max_requests_per_hour}/—á–∞—Åconfig.db_path}")
        logging.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.admin_chat_ids)}")
        logging.info(f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.max_requests_per_hour}/—á–∞—Å")
        logging.info(f")
        logging.info(f"ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ai_assistant else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
"ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ai_assistant else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'        logging.info(f"üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if gamification_engine else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logging.info(f}")
        logging.info(f"üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if gamification_engine else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logging"üìà Google Sheets: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if config.sync_to_sheets else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logging.info("=" * 50.info(f"üìà Google Sheets: {'‚úÖ –ê–∫—Ç–∏–≤–Ω–∞' if config.sync_to_sheets else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        logging.info("=" *)
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
