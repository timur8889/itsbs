import logging
import sqlite3
import os
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN', '7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw')
    ADMIN_CHAT_IDS = [5024165375]
    DB_PATH = "requests.db"
    LOG_LEVEL = logging.INFO

# ==================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ====================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=Config.LOG_LEVEL,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD, OTHER_PLOT, SELECT_REQUEST = range(11)

# ==================== –í–ê–õ–ò–î–ê–¶–ò–Ø ====================

class Validators:
    """–ö–ª–∞—Å—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    @staticmethod
    def validate_phone(phone: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
        return bool(re.match(pattern, phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω–∏"""
        return len(name.strip()) >= 2 and len(name.strip()) <= 50 and name.replace(' ', '').isalpha()
    
    @staticmethod
    def validate_problem(problem: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        return 10 <= len(problem.strip()) <= 1000

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã IT']
]

# üëë –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å'],
    ['üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# üíª –¢–∏–ø—ã IT —Å–∏—Å—Ç–µ–º
create_request_keyboard = [
    ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã'],
    ['üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è'],
    ['üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã'],
    ['üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# ‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
confirm_keyboard = [
    ['üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# üì∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ
photo_keyboard = [
    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚è∞ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
urgency_keyboard = [
    ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)'],
    ['‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)'],
    ['üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]

# üè¢ –¢–∏–ø—ã —É—á–∞—Å—Ç–∫–æ–≤
plot_type_keyboard = [
    ['üè¢ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –æ—Ñ–∏—Å', 'üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ'],
    ['üì¶ –°–∫–ª–∞–¥—Å–∫–æ–π –∫–æ–º–ø–ª–µ–∫—Å', 'üõí –¢–æ—Ä–≥–æ–≤—ã–π –∑–∞–ª'],
    ['üíª –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞', 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# ‚úèÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üë§ –ò–º—è', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω', 'üìç –£—á–∞—Å—Ç–æ–∫'],
    ['üíª –°–∏—Å—Ç–µ–º–∞', 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', '‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å'],
    ['üì∑ –§–æ—Ç–æ', '‚úÖ –ì–æ—Ç–æ–≤–æ'],
    ['üîô –û—Ç–º–µ–Ω–∏—Ç—å']
]

# ‚óÄÔ∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥
edit_field_keyboard = [['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—É–±—Ä–∞–Ω "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
admin_panel_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏', 'üîÑ –í —Ä–∞–±–æ—Ç–µ'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞']
]

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        name TEXT,
                        phone TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        photo TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        admin_comment TEXT,
                        assigned_admin TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS statistics (
                        date TEXT PRIMARY KEY,
                        requests_count INTEGER DEFAULT 0,
                        completed_count INTEGER DEFAULT 0
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        created_at TEXT,
                        request_count INTEGER DEFAULT 0
                    )
                ''')
                conn.commit()
                logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, name, phone, plot, system_type, problem, photo, urgency, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('name'),
                    user_data.get('phone'),
                    user_data.get('plot'),
                    user_data.get('system_type'),
                    user_data.get('problem'),
                    user_data.get('photo'),
                    user_data.get('urgency'),
                    datetime.now().isoformat(),
                    datetime.now().isoformat()
                ))
                request_id = cursor.lastrowid
                
                today = datetime.now().strftime('%Y-%m-%d')
                cursor.execute('''
                    INSERT OR REPLACE INTO statistics (date, requests_count)
                    VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
                ''', (today, today))
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count)
                    VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1)
                ''', (
                    user_data.get('user_id'),
                    user_data.get('username'),
                    user_data.get('first_name', ''),
                    user_data.get('last_name', ''),
                    datetime.now().isoformat(),
                    user_data.get('user_id')
                ))
                
                conn.commit()
                logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data.get('user_id')}")
                return request_id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            raise

    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE user_id = ? 
                    ORDER BY created_at DESC 
                    LIMIT ?
                ''', (user_id, limit))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if filter_type == 'new':
                    status_filter = "status = 'new'"
                elif filter_type == 'in_progress':
                    status_filter = "status = 'in_progress'"
                elif filter_type == 'completed':
                    status_filter = "status = 'completed'"  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
                else:
                    status_filter = "status IN ('new', 'in_progress')"
                
                cursor.execute(f'''
                    SELECT * FROM requests 
                    WHERE {status_filter}
                    ORDER BY 
                        CASE urgency 
                            WHEN 'üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)' THEN 1
                            WHEN '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)' THEN 2
                            ELSE 3
                        END,
                        created_at DESC
                    LIMIT ?
                ''', (limit,))
                columns = [column[0] for column in cursor.description]
                requests = [dict(zip(columns, row)) for row in cursor.fetchall()]
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(requests)} –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}'")
                return requests
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º '{filter_type}': {e}")
            return []

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return {}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return {}

    def update_request(self, request_id: int, update_data: Dict) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                set_parts = []
                parameters = []
                
                for field, value in update_data.items():
                    if field in ['name', 'phone', 'plot', 'system_type', 'problem', 'photo', 'urgency']:
                        set_parts.append(f"{field} = ?")
                        parameters.append(value)
                
                set_parts.append("updated_at = ?")
                parameters.append(datetime.now().isoformat())
                parameters.append(request_id)
                
                if set_parts:
                    sql = f"UPDATE requests SET {', '.join(set_parts)} WHERE id = ?"
                    cursor.execute(sql, parameters)
                    conn.commit()
                    logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    return True
                return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            return False

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                if admin_comment and assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
                elif admin_comment:
                    cursor.execute('''
                        UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, admin_comment, datetime.now().isoformat(), request_id))
                elif assigned_admin:
                    cursor.execute('''
                        UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?
                        WHERE id = ?
                    ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
                else:
                    cursor.execute('''
                        UPDATE requests SET status = ?, updated_at = ? WHERE id = ?
                    ''', (status, datetime.now().isoformat(), request_id))
                
                conn.commit()
                logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{request_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{status}'")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
            raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(Config.DB_PATH)

# ==================== –°–û–ó–î–ê–ù–ò–ï –ó–ê–Ø–í–ö–ò ====================

def start_request_creation(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–∞—á–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    context.user_data.clear()
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    update.message.reply_text(
        "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –≤ IT –æ—Ç–¥–µ–ª*\n\n"
        "üìù *–®–∞–≥ 1 –∏–∑ 7*\n"
        "üë§ –î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

def name(update: Update, context: CallbackContext) -> int:
    name_text = update.message.text.strip()
    
    if not Validators.validate_name(name_text):
        update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏!*\n\n"
            "üë§ –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return NAME
    
    context.user_data['name'] = name_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 2 –∏–∑ 7*\n"
        "üìû *–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n\n"
        "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ +7 999 123-45-67\n"
        "‚Ä¢ 8 999 123-45-67\n"
        "‚Ä¢ 79991234567",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    phone_text = update.message.text.strip()
    
    if not Validators.validate_phone(phone_text):
        update.message.reply_text(
            "‚ùå *–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞!*\n\n"
            "üìû –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
            "‚Ä¢ +7 999 123-45-67\n"
            "‚Ä¢ 8 999 123-45-67\n"
            "‚Ä¢ 79991234567\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHONE
    
    context.user_data['phone'] = phone_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 3 –∏–∑ 7*\n"
        "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
        reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üë§ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            reply_markup=ReplyKeyboardRemove()
        )
        return NAME
    
    if update.message.text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            "üìù *–®–∞–≥ 3 –∏–∑ 7*\n"
            "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞ –∏–ª–∏ –æ—Ç–¥–µ–ª–∞:*\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è\n"
            "‚Ä¢ –û—Ç–¥–µ–ª –∫–∞–¥—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ü–µ—Ö ‚Ññ1",
            reply_markup=ReplyKeyboardMarkup([['üîô –ù–∞–∑–∞–¥']], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return OTHER_PLOT
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 4 –∏–∑ 7*\n"
        "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*",
        reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

def other_plot(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞"""
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 4 –∏–∑ 7*\n"
        "üíª *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø IT-–ø—Ä–æ–±–ª–µ–º—ã:*",
        reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
        return show_main_menu(update, context)
    elif update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìç *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—á–∞—Å—Ç–æ–∫ –∏–ª–∏ –æ—Ç–¥–µ–ª:*",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True)
        )
        return PLOT
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
    valid_systems = ['üíª –ö–æ–º–ø—å—é—Ç–µ—Ä—ã', 'üñ®Ô∏è –ü—Ä–∏–Ω—Ç–µ—Ä—ã', 'üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç', 'üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 
                    'üîê –ü—Ä–æ–≥—Ä–∞–º–º—ã', 'üìä 1–° –∏ –ë–∞–∑—ã', 'üé• –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '‚ö° –î—Ä—É–≥–æ–µ']
    if update.message.text not in valid_systems:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True)
        )
        return SYSTEM_TYPE
    
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 5 –∏–∑ 7*\n"
        "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*\n\n"
        "üí° –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –æ–ø–∏—Å–∞–Ω–∏–π:\n"
        "‚Ä¢ '–ù–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∫–æ–º–ø—å—é—Ç–µ—Ä, –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ø–∏—Ç–∞–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç'\n"
        "‚Ä¢ '–ü—Ä–∏–Ω—Ç–µ—Ä HP LaserJet –ø–µ—á–∞—Ç–∞–µ—Ç –ø—É—Å—Ç—ã–µ –ª–∏—Å—Ç—ã'\n"
        "‚Ä¢ '–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –Ω–∞ 3 —ç—Ç–∞–∂–µ –≤ –±—É—Ö–≥–∞–ª—Ç–µ—Ä–∏–∏'\n\n"
        "‚ö†Ô∏è *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    problem_text = update.message.text.strip()
    
    if not Validators.validate_problem(problem_text):
        update.message.reply_text(
            "‚ùå *–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ!*\n\n"
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤):",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PROBLEM
    
    context.user_data['problem'] = problem_text
    update.message.reply_text(
        "üìù *–®–∞–≥ 6 –∏–∑ 7*\n"
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return URGENCY

def urgency(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "üìñ *–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:*",
            reply_markup=ReplyKeyboardRemove()
        )
        return PROBLEM
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    valid_urgency = ['üî• –°–†–û–ß–ù–û (1-2 —á–∞—Å–∞)', '‚ö†Ô∏è –°–ï–ì–û–î–ù–Ø (–¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è)', 'üí§ –ù–ï –°–†–û–ß–ù–û (1-3 –¥–Ω—è)']
    if update.message.text not in valid_urgency:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    
    context.user_data['urgency'] = update.message.text
    update.message.reply_text(
        "üìù *–®–∞–≥ 7 –∏–∑ 7*\n"
        "üì∏ *–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –∑–∞—è–≤–∫–µ?*\n\n"
        "üñºÔ∏è –§–æ—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –ø–æ–Ω—è—Ç—å –ø—Ä–æ–±–ª–µ–º—É.\n"
        "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏ –∏–ª–∏ —Ñ–æ—Ç–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
        reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True, one_time_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        update.message.reply_text(
            "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True)
        )
        return URGENCY
    elif update.message.text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ':
        update.message.reply_text(
            "üì∏ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç:*\n\n"
            "üìé –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
        return PHOTO
    elif update.message.text == '‚è≠Ô∏è –ë–µ–∑ —Ñ–æ—Ç–æ':
        context.user_data['photo'] = None
        return show_request_summary(update, context)
    elif update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardRemove()
        )
        return show_request_summary(update, context)
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(photo_keyboard, resize_keyboard=True)
        )
        return PHOTO

def show_request_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π"""
    context.user_data['timestamp'] = datetime.now().strftime("%d.%m.%Y %H:%M")
    update_summary(context)
    
    if context.user_data.get('editing_mode'):
        return edit_request_choice(update, context)
    else:
        summary_text = (
            f"{context.user_data['summary']}\n\n"
            "üéØ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n"
            "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É\n"
            "‚úèÔ∏è –ù—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å\n"
            "üîô –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
        )
        
        if context.user_data.get('photo'):
            update.message.reply_photo(
                photo=context.user_data['photo'],
                caption=summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                summary_text,
                reply_markup=ReplyKeyboardMarkup(confirm_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
        return ConversationHandler.END

def update_summary(context: CallbackContext) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –≤ user_data"""
    photo_status = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if context.user_data.get('photo') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    summary = (
        f"üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏ –≤ IT –æ—Ç–¥–µ–ª:*\n\n"
        f"üë§ *–ò–º—è:* {context.user_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{context.user_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
        f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {context.user_data['system_type']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {context.user_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç:* {photo_status}\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {context.user_data['timestamp']}"
    )
    
    context.user_data['summary'] = summary

def confirm_request(update: Update, context: CallbackContext) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
    if update.message.text == 'üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É':
        user = update.message.from_user
        
        try:
            request_id = db.save_request(context.user_data)
            send_admin_notification(context, context.user_data, request_id)
            
            confirmation_text = (
                f"üéâ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìã *–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:*\n"
                f"‚Ä¢ üíª –¢–∏–ø: {context.user_data['system_type']}\n"
                f"‚Ä¢ üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n"
                f"‚Ä¢ ‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n\n"
                f"üë®‚Äçüíº *–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç IT –æ—Ç–¥–µ–ª–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.*\n\n"
                f"_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ IT –æ—Ç–¥–µ–ª!_ üíª"
            )
            
            if user.id in Config.ADMIN_CHAT_IDS:
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    confirmation_text,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            error_message = (
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n"
                "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ IT –æ—Ç–¥–µ–ª –Ω–∞–ø—Ä—è–º—É—é."
            )
            
            if user.id in Config.ADMIN_CHAT_IDS:
                update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                update.message.reply_text(
                    error_message,
                    reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                    parse_mode=ParseMode.MARKDOWN
                )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    elif update.message.text == '‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å':
        context.user_data['editing_mode'] = True
        return edit_request_choice(update, context)
    
    elif update.message.text == 'üîô –û—Ç–º–µ–Ω–∏—Ç—å':
        return cancel_request(update, context)
    
    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return ConversationHandler.END

def send_admin_notification(context: CallbackContext, user_data: Dict, request_id: int) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    notification_text = (
        f"üö® *–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –í IT –û–¢–î–ï–õ #{request_id}*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {user_data.get('name')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{user_data.get('phone')}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot')}\n"
        f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {user_data.get('system_type')}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency')}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' if user_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {user_data.get('problem')}\n\n"
        f"üïí *–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:* {user_data.get('timestamp')}"
    )
    
    for admin_id in Config.ADMIN_CHAT_IDS:
        try:
            if user_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=user_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def cancel_request(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    if user_id in Config.ADMIN_CHAT_IDS:
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(admin_main_menu_keyboard, resize_keyboard=True)
        )
    else:
        update.message.reply_text(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
    
    context.user_data.clear()
    return ConversationHandler.END

# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–Ø–í–û–ö ====================

def start_edit_request(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
    user_id = update.message.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏")
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_request_id', None)
    context.user_data.pop('editing_request_data', None)
    context.user_data.pop('editing_existing', None)
    
    requests = db.get_user_requests(user_id, 20)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    active_requests = [req for req in requests if req['status'] != 'completed']
    
    if not active_requests:
        update.message.reply_text(
            "‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "üìã –ú–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:\n"
            "‚Ä¢ üÜï –ù–æ–≤–∞—è\n"
            "‚Ä¢ üîÑ –í —Ä–∞–±–æ—Ç–µ",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    context.user_data['editable_requests'] = active_requests
    
    keyboard = []
    for req in active_requests:
        status_icon = 'üÜï' if req['status'] == 'new' else 'üîÑ'
        button_text = f"{status_icon} #{req['id']} - {req['system_type']}"
        keyboard.append([button_text])
    
    keyboard.append(['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'])
    
    update.message.reply_text(
        "‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n"
        "üìã *–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return SELECT_REQUEST

def select_request_for_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞—è–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –ò–°–ü–†–ê–í–õ–ï–ù–ê"""
    text = update.message.text
    
    if text == 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return cancel_edit(update, context)
    
    # –ò—â–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É
    editable_requests = context.user_data.get('editable_requests', [])
    selected_request = None
    
    for req in editable_requests:
        expected_text = f"{'üÜï' if req['status'] == 'new' else 'üîÑ'} #{req['id']} - {req['system_type']}"
        if text == expected_text:
            selected_request = req
            break
    
    if not selected_request:
        update.message.reply_text(
            "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=ReplyKeyboardMarkup([['üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']], resize_keyboard=True)
        )
        return SELECT_REQUEST
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –≤ context
    context.user_data['editing_request_id'] = selected_request['id']
    context.user_data['editing_request_data'] = selected_request
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –≤ user_data –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.update({
        'name': selected_request['name'],
        'phone': selected_request['phone'],
        'plot': selected_request['plot'],
        'system_type': selected_request['system_type'],
        'problem': selected_request['problem'],
        'urgency': selected_request['urgency'],
        'photo': selected_request['photo'],
        'user_id': selected_request['user_id'],
        'username': selected_request['username'],
        'editing_existing': True  # –§–ª–∞–≥ —á—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É
    })
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –∏ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return show_edit_summary(update, context)

def show_edit_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–π –∑–∞—è–≤–∫–∏"""
    request_data = context.user_data
    request_id = context.user_data.get('editing_request_id')
    
    photo_status = "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ" if request_data.get('photo') else "‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    
    summary = (
        f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ #{request_id}*\n\n"
        f"üë§ *–ò–º—è:* {request_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request_data['plot']}\n"
        f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request_data['system_type']}\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request_data['problem']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {photo_status}\n"
        f"üïí *–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    update.message.reply_text(
        f"{summary}\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    
    return EDIT_CHOICE

def edit_request_choice(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏)"""
    summary = context.user_data.get('summary', '')
    
    update.message.reply_text(
        f"{summary}\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:*",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return EDIT_CHOICE

def handle_edit_choice(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    choice = update.message.text
    context.user_data['editing_field'] = choice
    
    if choice == 'üë§ –ò–º—è':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:*\n–¢–µ–∫—É—â–µ–µ: {context.user_data['name']}",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìû –¢–µ–ª–µ—Ñ–æ–Ω':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['phone']}\n\n"
            "üìã –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìç –£—á–∞—Å—Ç–æ–∫':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫:*\n–¢–µ–∫—É—â–∏–π: {context.user_data['plot']}",
            reply_markup=ReplyKeyboardMarkup(plot_type_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üíª –°–∏—Å—Ç–µ–º–∞':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É:*\n–¢–µ–∫—É—â–∞—è: {context.user_data['system_type']}",
            reply_markup=ReplyKeyboardMarkup(create_request_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üìù –û–ø–∏—Å–∞–Ω–∏–µ':
        update.message.reply_text(
            f"‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:*\n–¢–µ–∫—É—â–µ–µ: {context.user_data['problem']}",
            reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å':
        update.message.reply_text(
            f"‚úèÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ä–æ—á–Ω–æ—Å—Ç—å:*\n–¢–µ–∫—É—â–∞—è: {context.user_data['urgency']}",
            reply_markup=ReplyKeyboardMarkup(urgency_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == 'üì∑ –§–æ—Ç–æ':
        photo_status = "–µ—Å—Ç—å —Ñ–æ—Ç–æ" if context.user_data.get('photo') else "–Ω–µ—Ç —Ñ–æ—Ç–æ"
        update.message.reply_text(
            f"‚úèÔ∏è *–†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ:*\n–¢–µ–∫—É—â–µ–µ: {photo_status}",
            reply_markup=ReplyKeyboardMarkup([
                ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
            ], resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        return EDIT_FIELD
        
    elif choice == '‚úÖ –ì–æ—Ç–æ–≤–æ':
        if context.user_data.get('editing_existing'):
            return save_edited_request(update, context)
        else:
            return show_request_summary(update, context)
    
    else:
        update.message.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        return EDIT_CHOICE

def handle_edit_field(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—è"""
    editing_field = context.user_data.get('editing_field')
    text = update.message.text
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
    if update.message.photo:
        context.user_data['photo'] = update.message.photo[-1].file_id
        update.message.reply_text(
            "‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if editing_field == 'üë§ –ò–º—è':
        if not Validators.validate_name(text):
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏! –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 –±—É–∫–≤.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['name'] = text
        update.message.reply_text(
            "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìû –¢–µ–ª–µ—Ñ–æ–Ω':
        if not Validators.validate_phone(text):
            update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['phone'] = text
        update.message.reply_text(
            "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìç –£—á–∞—Å—Ç–æ–∫':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        
        if text == 'üìã –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫':
            update.message.reply_text(
                "‚úèÔ∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–∞—Å—Ç–∫–∞:*",
                reply_markup=ReplyKeyboardMarkup([['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']], resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
            context.user_data['editing_other_plot'] = True
            return OTHER_PLOT
        
        context.user_data['plot'] = text
        update.message.reply_text(
            "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üíª –°–∏—Å—Ç–µ–º–∞':
        if text in ['üîô –ù–∞–∑–∞–¥', 'üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']:
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        context.user_data['system_type'] = text
        update.message.reply_text(
            "‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üìù –û–ø–∏—Å–∞–Ω–∏–µ':
        if not Validators.validate_problem(text):
            update.message.reply_text(
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 10 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤!",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        context.user_data['problem'] = text
        update.message.reply_text(
            "‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == '‚è∞ –°—Ä–æ—á–Ω–æ—Å—Ç—å':
        if text == 'üîô –ù–∞–∑–∞–¥':
            if context.user_data.get('editing_existing'):
                return show_edit_summary(update, context)
            else:
                return edit_request_choice(update, context)
        context.user_data['urgency'] = text
        update.message.reply_text(
            "‚úÖ –°—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
            reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
        )
        
    elif editing_field == 'üì∑ –§–æ—Ç–æ':
        if text == 'üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ':
            update.message.reply_text(
                "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:",
                reply_markup=ReplyKeyboardMarkup(edit_field_keyboard, resize_keyboard=True)
            )
            return EDIT_FIELD
        elif text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ':
            context.user_data['photo'] = None
            update.message.reply_text(
                "‚úÖ –§–æ—Ç–æ —É–¥–∞–ª–µ–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
            )
        else:
            update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.",
                reply_markup=ReplyKeyboardMarkup([
                    ['üì∑ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ'],
                    ['‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']
                ], resize_keyboard=True)
            )
            return EDIT_FIELD
    
    if context.user_data.get('editing_existing'):
        return show_edit_summary(update, context)
    else:
        return edit_request_choice(update, context)

def save_edited_request(update: Update, context: CallbackContext) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É"""
    request_id = context.user_data.get('editing_request_id')
    
    if not request_id:
        update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    update_data = {
        'name': context.user_data.get('name'),
        'phone': context.user_data.get('phone'),
        'plot': context.user_data.get('plot'),
        'system_type': context.user_data.get('system_type'),
        'problem': context.user_data.get('problem'),
        'urgency': context.user_data.get('urgency'),
        'photo': context.user_data.get('photo')
    }
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = db.update_request(request_id, update_data)
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏
            send_edit_notification(context, request_id, update_data)
            
            update.message.reply_text(
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!*\n\n"
                f"üìã –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                f"üë®‚Äçüíº –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç IT –æ—Ç–¥–µ–ª–∞ —É–≤–∏–¥–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
            
            logger.info(f"–ó–∞—è–≤–∫–∞ #{request_id} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {context.user_data.get('user_id')}")
        else:
            update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
                parse_mode=ParseMode.MARKDOWN
            )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ #{request_id}: {e}")
        update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_request_id', None)
    context.user_data.pop('editing_request_data', None)
    context.user_data.pop('editing_existing', None)
    context.user_data.pop('editing_field', None)
    
    return ConversationHandler.END

def send_edit_notification(context: CallbackContext, request_id: int, update_data: Dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏"""
    notification_text = (
        f"‚úèÔ∏è *–ó–ê–Ø–í–ö–ê #{request_id} –û–ë–ù–û–í–õ–ï–ù–ê*\n\n"
        f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:* @{context.user_data.get('username', 'N/A')}\n"
        f"üìõ *–ò–º—è:* {update_data['name']}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{update_data['phone']}`\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {update_data['plot']}\n"
        f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {update_data['system_type']}\n"
        f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {update_data['urgency']}\n"
        f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ' if update_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {update_data['problem']}\n\n"
        f"üïí *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    for admin_id in Config.ADMIN_CHAT_IDS:
        try:
            if update_data.get('photo'):
                context.bot.send_photo(
                    chat_id=admin_id,
                    photo=update_data['photo'],
                    caption=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                context.bot.send_message(
                    chat_id=admin_id,
                    text=notification_text,
                    parse_mode=ParseMode.MARKDOWN
                )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

def cancel_edit(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    context.user_data.pop('editing_request_id', None)
    context.user_data.pop('editing_request_data', None)
    context.user_data.pop('editing_existing', None)
    context.user_data.pop('editing_field', None)
    context.user_data.pop('editable_requests', None)
    
    update.message.reply_text(
        "‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
    )
    
    return ConversationHandler.END

def other_plot_edit(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É—á–∞—Å—Ç–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if update.message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é':
        if context.user_data.get('editing_existing'):
            return show_edit_summary(update, context)
        else:
            return edit_request_choice(update, context)
    
    context.user_data['plot'] = update.message.text
    update.message.reply_text(
        "‚úÖ –£—á–∞—Å—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=ReplyKeyboardMarkup(edit_choice_keyboard, resize_keyboard=True)
    )
    
    if context.user_data.get('editing_existing'):
        return show_edit_summary(update, context)
    else:
        return edit_request_choice(update, context)

# ==================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ====================

def show_admin_panel(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    
    if user_id not in Config.ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return show_main_menu(update, context)
    
    new_requests = db.get_requests_by_filter('new')
    in_progress_requests = db.get_requests_by_filter('in_progress')
    completed_requests = db.get_requests_by_filter('completed')
    
    admin_text = (
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ IT –æ—Ç–¥–µ–ª–∞*\n\n"
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:*\n"
        f"üÜï *–ù–æ–≤—ã—Ö:* {len(new_requests)}\n"
        f"üîÑ *–í —Ä–∞–±–æ—Ç–µ:* {len(in_progress_requests)}\n"
        f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:* {len(completed_requests)}\n"
        f"üìà *–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö:* {len(new_requests) + len(in_progress_requests)}\n\n"
        "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã:*"
    )
    
    update.message.reply_text(
        admin_text,
        reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_requests_by_filter(update: Update, context: CallbackContext, filter_type: str) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
    user_id = update.message.from_user.id
    if user_id not in Config.ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    requests = db.get_requests_by_filter(filter_type, 50)
    filter_names = {
        'new': 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏',
        'in_progress': 'üîÑ –ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ',
        'completed': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏'
    }
    filter_name = f"{filter_names[filter_type]} ({len(requests)})"
    
    if not requests:
        update.message.reply_text(
            f"üì≠ {filter_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        filter_name,
        reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True)
    )
    
    for req in requests:
        if req['status'] == 'completed':
            request_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í–´–ü–û–õ–ù–ï–ù–ê*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}"
            )
        elif req['status'] == 'in_progress':
            request_text = (
                f"üîÑ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í –†–ê–ë–û–¢–ï*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req.get('assigned_admin', '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}"
            )
        else:
            request_text = (
                f"üÜï *–ó–∞—è–≤–∫–∞ #{req['id']} - –ù–û–í–ê–Ø*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {req['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{req['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem']}\n"
                f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if req['photo'] else '‚ùå –ù–µ—Ç'}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}"
            )
        
        if req.get('admin_comment'):
            request_text += f"\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:* {req['admin_comment']}"
        
        # –ö–Ω–æ–ø–∫–∏ –±–µ–∑ "–ü–æ–∑–≤–æ–Ω–∏—Ç—å"
        if req['status'] == 'completed':
            keyboard = [[
                InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
            ]]
        elif req['status'] == 'in_progress':
            if req.get('assigned_admin') == update.message.from_user.first_name:
                keyboard = [[
                    InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{req['id']}")
                ]]
            else:
                keyboard = [[
                    InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{req['id']}")
                ]]
        else:
            keyboard = [[
                InlineKeyboardButton("‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_{req['id']}")
            ]]
        
        if req.get('photo'):
            update.message.reply_photo(
                photo=req['photo'],
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            update.message.reply_text(
                request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )

def handle_admin_callback(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –æ—Ç –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if user_id not in Config.ADMIN_CHAT_IDS:
        return
    
    if data.startswith('take_'):
        request_id = int(data.split('_')[1])
        admin_name = query.from_user.first_name
        
        db.update_request_status(
            request_id, 
            "in_progress", 
            f"–ó–∞—è–≤–∫–∞ –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}",
            admin_name
        )
        
        request = db.get_request(request_id)
        if request and request.get('user_id'):
            try:
                context.bot.send_message(
                    chat_id=request['user_id'],
                    text=f"üîÑ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
                         f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
                         f"üìû –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}: {e}")
        
        request_text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤–∞–º–∏ –≤ —Ä–∞–±–æ—Ç—É!*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"üíª *–¢–∏–ø:* {request['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem']}\n\n"
            f"üîÑ *–°—Ç–∞—Ç—É—Å:* –í —Ä–∞–±–æ—Ç–µ\n"
            f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}"
        )
        
        keyboard = [[
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{request_id}")
        ]]
        
        if query.message.caption:
            query.edit_message_caption(
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            query.edit_message_text(
                text=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
    elif data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        admin_name = query.from_user.first_name
        
        db.update_request_status(
            request_id, 
            "completed", 
            f"–ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}",
            admin_name
        )
        
        request = db.get_request(request_id)
        if request and request.get('user_id'):
            try:
                context.bot.send_message(
                    chat_id=request['user_id'],
                    text=f"‚úÖ *–í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!*\n\n"
                         f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
                         f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n\n"
                         f"_–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —É—Å–ª—É–≥–∞–º–∏ IT –æ—Ç–¥–µ–ª–∞!_ üíª",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request['user_id']}: {e}")
        
        request_text = (
            f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} –í–´–ü–û–õ–ù–ï–ù–ê!*\n\n"
            f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
            f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
            f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
            f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {request['problem']}\n"
            f"üì∏ *–§–æ—Ç–æ:* {'‚úÖ –ï—Å—Ç—å' if request['photo'] else '‚ùå –ù–µ—Ç'}\n\n"
            f"‚úÖ *–°—Ç–∞—Ç—É—Å:* –í—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
            f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {admin_name}\n"
            f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
            f"üïí *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        keyboard = [[
            InlineKeyboardButton("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{request_id}")
        ]]
        
        if query.message.caption:
            query.edit_message_caption(
                caption=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            query.edit_message_text(
                text=request_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        
        query.answer("‚úÖ –ó–∞—è–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    
    elif data.startswith('message_'):
        request_id = int(data.split('_')[1])
        request = db.get_request(request_id)
        
        if request:
            phone_number = request['phone'].replace(' ', '').replace('-', '').replace('(', '').replace(')', '')
            
            message_button = InlineKeyboardButton(
                "üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
                url=f"https://t.me/{phone_number}" if phone_number.startswith('+') else f"https://t.me/{phone_number}"
            )
            
            contact_text = (
                f"üí¨ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞—è–≤–∫–µ #{request_id}*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {request['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* `{request['phone']}`\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {request['plot']}\n"
                f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {request['system_type']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {request['urgency']}\n\n"
                f"_–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram_"
            )
            
            query.answer("üí¨ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —á–∞—Ç...")
            
            context.bot.send_message(
                chat_id=query.message.chat_id,
                text=contact_text,
                reply_markup=InlineKeyboardMarkup([[message_button]]),
                parse_mode=ParseMode.MARKDOWN
            )

def handle_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id not in Config.ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if text == 'üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏':
        return show_requests_by_filter(update, context, 'new')
    elif text == 'üîÑ –í —Ä–∞–±–æ—Ç–µ':
        return show_requests_by_filter(update, context, 'in_progress')
    elif text == '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏':  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        return show_requests_by_filter(update, context, 'completed')
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_statistics(update, context)

def show_statistics(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.message.from_user.id
    if user_id not in Config.ADMIN_CHAT_IDS:
        return
    
    new_requests = db.get_requests_by_filter('new')
    in_progress_requests = db.get_requests_by_filter('in_progress')
    completed_requests = db.get_requests_by_filter('completed')
    
    # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º
    system_stats = {}
    for req in new_requests + in_progress_requests + completed_requests:
        system_type = req['system_type']
        system_stats[system_type] = system_stats.get(system_type, 0) + 1
    
    stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ IT –æ—Ç–¥–µ–ª–∞*\n\n"
    stats_text += f"üÜï *–ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:* {len(new_requests)}\n"
    stats_text += f"üîÑ *–í —Ä–∞–±–æ—Ç–µ:* {len(in_progress_requests)}\n"
    stats_text += f"‚úÖ *–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö:* {len(completed_requests)}\n"
    stats_text += f"üìà *–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:* {len(new_requests) + len(in_progress_requests) + len(completed_requests)}\n\n"
    
    stats_text += "üíª *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º:*\n"
    for system_type, count in sorted(system_stats.items(), key=lambda x: x[1], reverse=True):
        stats_text += f"‚Ä¢ {system_type}: {count}\n"
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(admin_panel_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

def show_main_menu(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    user_id = user.id
    
    if user_id in Config.ADMIN_CHAT_IDS:
        keyboard = admin_main_menu_keyboard
        welcome_text = (
            "üëë *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ IT –æ—Ç–¥–µ–ª–∞!*\n\n"
            "üíª *–û–±—Å–ª—É–∂–∏–≤–∞–µ–º—ã–µ —Å–∏—Å—Ç–µ–º—ã:*\n"
            "‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä—ã –∏ —Ä–∞–±–æ—á–µ–µ –º–µ—Å—Ç–æ\n"
            "‚Ä¢ –ü—Ä–∏–Ω—Ç–µ—Ä—ã –∏ –ú–§–£\n" 
            "‚Ä¢ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ª–æ–∫–∞–ª—å–Ω–∞—è —Å–µ—Ç—å\n"
            "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω–∏—è –∏ —Å–≤—è–∑—å\n"
            "‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ\n"
            "‚Ä¢ 1–° –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–∏—Ñ–µ—Ä–∏—è\n\n"
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:*"
        )
    else:
        keyboard = user_main_menu_keyboard
        welcome_text = (
            "üíª *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ IT –æ—Ç–¥–µ–ª–∞!*\n\n"
            "üõ†Ô∏è *–ú—ã –ø–æ–º–æ–∂–µ–º —Å:*\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–≤ –∏ –ø—Ä–æ–≥—Ä–∞–º–º\n"
            "‚Ä¢ –†–µ–º–æ–Ω—Ç–æ–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –ú–§–£\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞–º–∏ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –∏ —Å–µ—Ç—å—é\n"
            "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏\n"
            "‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è\n"
            "‚Ä¢ –†–∞–±–æ—Ç–æ–π —Å 1–° –∏ –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –õ—é–±—ã–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏\n\n"
            "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:*"
        )
    
    update.message.reply_text(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_my_requests(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    if user_id in Config.ADMIN_CHAT_IDS:
        keyboard = admin_main_menu_keyboard
    else:
        keyboard = user_main_menu_keyboard
    
    requests = db.get_user_requests(user_id, 50)
    
    if not requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "üéØ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    active_requests = [req for req in requests if req['status'] != 'completed']
    completed_requests = [req for req in requests if req['status'] == 'completed']
    
    if not active_requests and not completed_requests:
        update.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.\n\n"
            "üéØ –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        return
    
    if active_requests:
        update.message.reply_text(
            f"üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏ ({len(active_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in active_requests:
            status_icons = {
                'new': 'üÜï –ù–û–í–ê–Ø',
                'in_progress': 'üîÑ –í –†–ê–ë–û–¢–ï', 
                'completed': '‚úÖ –í–´–ü–û–õ–ù–ï–ù–ê'
            }
            
            status_text = status_icons.get(req['status'], req['status'])
            
            request_text = (
                f"{status_icons.get(req['status'], 'üìã')} *–ó–∞—è–≤–∫–∞ #{req['id']}*\n"
                f"üíª *–¢–∏–ø:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üîÑ *–°—Ç–∞—Ç—É—Å:* {status_text}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin') and req['status'] == 'in_progress':
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    if completed_requests:
        update.message.reply_text(
            f"‚úÖ *–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ ({len(completed_requests)}):*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        )
        
        for req in completed_requests:
            request_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{req['id']} - –í–´–ü–û–õ–ù–ï–ù–ê*\n"
                f"üíª *–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:* {req['system_type']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {req['plot']}\n"
                f"‚è∞ *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {req['urgency']}\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* {req['problem'][:100]}{'...' if len(req['problem']) > 100 else ''}\n"
                f"üïí *–°–æ–∑–¥–∞–Ω–∞:* {req['created_at'][:16]}\n"
                f"‚úÖ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞:* {req['updated_at'][:16] if req.get('updated_at') else req['created_at'][:16]}\n"
            )
            
            if req.get('assigned_admin'):
                request_text += f"üë®‚Äçüíº *–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:* {req['assigned_admin']}\n"
            
            if req.get('admin_comment'):
                request_text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {req['admin_comment']}\n"
            
            update.message.reply_text(request_text, parse_mode=ParseMode.MARKDOWN)
    
    total_text = f"üìä *–ò—Ç–æ–≥–æ:* {len(active_requests)} –∞–∫—Ç–∏–≤–Ω—ã—Ö, {len(completed_requests)} –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫"
    update.message.reply_text(
        total_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_contacts(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç—ã IT –æ—Ç–¥–µ–ª–∞"""
    contacts_text = (
        "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã IT –æ—Ç–¥–µ–ª–∞*\n\n"
        "üëî *–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞:*\n"
        "‚Ä¢ –ö–æ–º–∞—Ä–æ–≤ –î–µ–Ω–∏—Å\n"
        "‚Ä¢ üì± +7 911 426 18 66\n\n"
        "üíª *–°–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:*\n"
        "‚Ä¢ –ú–∏—Ö–∞–∏–ª\n"
        "‚Ä¢ üì± +7 995 830 37 92\n\n"
        "üïí *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*\n"
        "‚Ä¢ –ü–Ω-–ü—Ç: 9:00 - 18:00\n"
        "‚Ä¢ –°–±: 10:00 - 15:00\n"
        "‚Ä¢ –í—Å: –≤—ã—Ö–æ–¥–Ω–æ–π\n\n"
        "üìç *–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ:*\n"
        "‚Ä¢ –ö–∞–±–∏–Ω–µ—Ç IT –æ—Ç–¥–µ–ª–∞: 3 —ç—Ç–∞–∂\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: 3 —ç—Ç–∞–∂\n\n"
        "üí¨ *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–≤—è–∑—å:*\n"
        "‚Ä¢ –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ß–µ—Ä–µ–∑ –±–æ—Ç –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
    )
    
    user_id = update.message.from_user.id
    keyboard = admin_main_menu_keyboard if user_id in Config.ADMIN_CHAT_IDS else user_main_menu_keyboard
    
    update.message.reply_text(
        contacts_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def handle_main_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id in Config.ADMIN_CHAT_IDS:
        if text == 'üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
            return show_admin_panel(update, context)
        elif text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_request_creation(update, context)
        elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            return show_my_requests(update, context)
    else:
        if text == 'üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_request_creation(update, context)
        elif text == 'üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏':
            return show_my_requests(update, context)
        elif text == '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É':
            return start_edit_request(update, context)
        elif text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã IT':
            return show_contacts(update, context)
    
    update.message.reply_text(
        "üéØ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=ReplyKeyboardMarkup(
            admin_main_menu_keyboard if user_id in Config.ADMIN_CHAT_IDS else user_main_menu_keyboard, 
            resize_keyboard=True
        )
    )

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if Config.BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        updater = Updater(Config.BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üéØ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                OTHER_PLOT: [MessageHandler(Filters.text & ~Filters.command, other_plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, urgency)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
                EDIT_CHOICE: [MessageHandler(Filters.text & ~Filters.command, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(Filters.text & ~Filters.command, handle_edit_field),
                    MessageHandler(Filters.photo, handle_edit_field)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(Filters.regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é|üîô –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
            allow_reentry=True
        )

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        edit_conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_edit_request),
            ],
            states={
                SELECT_REQUEST: [MessageHandler(Filters.text & ~Filters.command, select_request_for_edit)],
                EDIT_CHOICE: [MessageHandler(Filters.text & ~Filters.command, handle_edit_choice)],
                EDIT_FIELD: [
                    MessageHandler(Filters.text & ~Filters.command, handle_edit_field),
                    MessageHandler(Filters.photo, handle_edit_field)
                ],
                OTHER_PLOT: [MessageHandler(Filters.text & ~Filters.command, other_plot_edit)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_edit),
                MessageHandler(Filters.regex('^(üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), cancel_edit),
            ],
            allow_reentry=True
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_admin_panel))
        dispatcher.add_handler(CommandHandler('contacts', show_contacts))
        dispatcher.add_handler(CommandHandler('statistics', show_statistics))
        
        dispatcher.add_handler(conv_handler)
        dispatcher.add_handler(edit_conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        dispatcher.add_handler(MessageHandler(Filters.regex('^(üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É)$'), confirm_request))
        dispatcher.add_handler(MessageHandler(Filters.regex('^(‚úèÔ∏è –ò—Å–ø—Ä–∞–≤–∏—Ç—å)$'), confirm_request))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        dispatcher.add_handler(MessageHandler(Filters.regex(
            '^(üìÇ –ú–æ–∏ –∑–∞—è–≤–∫–∏|üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã IT)$'), 
            handle_main_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏|üîÑ –í —Ä–∞–±–æ—Ç–µ|‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
        dispatcher.add_handler(CallbackQueryHandler(handle_admin_callback, pattern='^(take_|complete_|message_)'))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç IT –æ—Ç–¥–µ–ª–∞ –∑–∞–ø—É—â–µ–Ω —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {Config.ADMIN_CHAT_IDS}")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
