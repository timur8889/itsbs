import logging
import sqlite3
import os
import json
import re
import threading
import shutil
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any

# ==================== –ü–†–û–í–ï–†–ö–ê –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–• –ë–ò–ë–õ–ò–û–¢–ï–ö ====================
try:
    import psutil
    PSUTIL_AVAILABLE = True
except ImportError:
    PSUTIL_AVAILABLE = False
    logging.warning("psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")

try:
    import matplotlib
    matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    logging.warning("matplotlib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≥—Ä–∞—Ñ–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã")

try:
    from telegram import (
        ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, 
        InlineKeyboardMarkup, InlineKeyboardButton
    )
    from telegram.ext import (
        Updater, CommandHandler, MessageHandler, Filters, 
        ConversationHandler, CallbackContext, CallbackQueryHandler, JobQueue
    )
    TELEGRAM_AVAILABLE = True
except ImportError:
    TELEGRAM_AVAILABLE = False
    logging.error("python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False

try:
    from flask import Flask, jsonify, request
    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
class Config:
    def __init__(self):
        self.bot_token = os.getenv('BOT_TOKEN', '').strip()
        self.admin_chat_ids = self._parse_admin_ids()
        self.max_requests_per_hour = int(os.getenv('MAX_REQUESTS_PER_HOUR', '15'))
        self.backup_retention_days = int(os.getenv('BACKUP_RETENTION_DAYS', '30'))
        self.auto_backup_hour = int(os.getenv('AUTO_BACKUP_HOUR', '3'))
        self.auto_backup_minute = int(os.getenv('AUTO_BACKUP_MINUTE', '0'))
        self.request_timeout_hours = int(os.getenv('REQUEST_TIMEOUT_HOURS', '24'))
        self.db_path = os.getenv('DB_PATH', 'requests.db')
        self.backup_dir = os.getenv('BACKUP_DIR', 'backups')
        
        # Google Sheets –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.google_sheets_credentials = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
        self.google_sheet_id = os.getenv('GOOGLE_SHEET_ID')
        self.google_sheet_name = os.getenv('GOOGLE_SHEET_NAME', '–ó–∞—è–≤–∫–∏')
        self.sync_to_sheets = bool(self.google_sheets_credentials and self.google_sheet_id and GOOGLE_SHEETS_AVAILABLE)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.openai_api_key = os.getenv('OPENAI_API_KEY', '')
        self.web_dashboard_port = int(os.getenv('WEB_DASHBOARD_PORT', '5000'))
    
    def _parse_admin_ids(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        try:
            admin_ids = os.getenv('ADMIN_CHAT_IDS', '')
            if not admin_ids:
                return []
            return [int(x.strip()) for x in admin_ids.split(',') if x.strip()]
        except (ValueError, AttributeError) as e:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_IDS: {e}")
            return []
    
    def validate(self) -> bool:
        if not self.bot_token or self.bot_token == 'your_bot_token':
            logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return False
        if not self.admin_chat_ids:
            logging.warning("‚ö†Ô∏è ADMIN_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        return True

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ====================
db = None
analytics_engine = None
ai_assistant = None
security_manager = None
gamification_engine = None
rate_limiter = None

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ –î–õ–Ø CONVERSATIONHANDLER ====================
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, URGENCY = range(6)

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================
user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å'],
    ['üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '‚ÑπÔ∏è –û –±–æ—Ç–µ']
]

def get_admin_panel():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    new_count = len(db.get_requests_by_filter('new')) if db else 0
    in_progress_count = len(db.get_requests_by_filter('in_progress')) if db else 0
    
    return [
        [f'üÜï –ù–æ–≤—ã–µ ({new_count})', f'üîÑ –í —Ä–∞–±–æ—Ç–µ ({in_progress_count})'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        ['üíæ –ë—ç–∫–∞–ø—ã', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'],
        ['üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è', 'üìä –ú–µ—Ç—Ä–∏–∫–∏']
    ]

def create_request_actions_keyboard(request_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í —Ä–∞–±–æ—Ç—É", callback_data=f"assign_{request_id}"),
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{request_id}")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# ==================== –î–ï–ö–û–†–ê–¢–û–† –ë–ï–ó–û–ü–ê–°–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø ====================
def safe_execute(default_response="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞"):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π"""
    def decorator(func):
        def wrapper(update, context, *args, **kwargs):
            try:
                return func(update, context, *args, **kwargs)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                
                if update and hasattr(update, 'message') and update.message:
                    update.message.reply_text(
                        default_response,
                        reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
                    )
                
                return ConversationHandler.END
        return wrapper
    return decorator

# ==================== –í–ê–õ–ò–î–ê–¢–û–†–´ ====================
class Validators:
    @staticmethod
    def validate_phone(phone: str) -> bool:
        return bool(re.match(r'^[\d\s\-\+\(\)]{7,20}$', phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]{2,50}$', name.strip()))
    
    @staticmethod
    def validate_plot(plot: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z0-9\s\-]{2,20}$', plot.strip()))

# ==================== –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================
class SecurityManager:
    def __init__(self):
        self.suspicious_activities = {}
        self.blocked_users = set()
    
    def check_suspicious_activity(self, user_id, action):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        now = datetime.now()
        hour_key = now.strftime("%Y%m%d%H")
        
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = {}
        
        if hour_key not in self.suspicious_activities[user_id]:
            self.suspicious_activities[user_id][hour_key] = 0
        
        self.suspicious_activities[user_id][hour_key] += 1
        
        if self.suspicious_activities[user_id][hour_key] > 50:
            self.blocked_users.add(user_id)
            return False
        
        return True
    
    def is_user_blocked(self, user_id):
        return user_id in self.blocked_users

# ==================== RATE LIMITER ====================
class RateLimiter:
    def __init__(self):
        self.requests = {}
    
    def check_rate_limit(self, user_id: int, action: str = "default") -> Tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–∏–º–∏—Ç—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å + —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        now = datetime.now()
        hour_key = now.strftime("%Y%m%d%H")
        
        if user_id not in self.requests:
            self.requests[user_id] = {}
        
        if hour_key not in self.requests[user_id]:
            self.requests[user_id][hour_key] = 0
        
        self.requests[user_id][hour_key] += 1
        
        if self.requests[user_id][hour_key] > config.max_requests_per_hour:
            return False, "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ —á–∞—Å."
        
        if security_manager and security_manager.is_user_blocked(user_id):
            return False, "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        
        return True, ""

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS requests (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        name TEXT,
                        phone TEXT,
                        plot TEXT,
                        system_type TEXT,
                        problem TEXT,
                        urgency TEXT,
                        status TEXT DEFAULT 'new',
                        created_at TEXT,
                        updated_at TEXT,
                        assigned_to TEXT,
                        completed_at TEXT
                    )
                ''')
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        user_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        request_count INTEGER DEFAULT 0,
                        created_at TEXT,
                        last_activity TEXT
                    )
                ''')
                conn.commit()
                logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def save_request(self, data: Dict) -> int:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                cursor.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, username, first_name, last_name, request_count, created_at, last_activity)
                    VALUES (?, ?, ?, ?, 
                        COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1,
                        COALESCE((SELECT created_at FROM users WHERE user_id = ?), ?), ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data['user_id'], data['user_id'], datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, first_name, last_name, name, phone, plot, system_type, 
                     problem, urgency, status, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data.get('name'), data.get('phone'), data.get('plot'), data.get('system_type'),
                    data.get('problem'), data.get('urgency'), 'new',
                    datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                request_id = cursor.lastrowid
                conn.commit()
                logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                return request_id
                
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            raise
    
    def get_requests_by_filter(self, status: str) -> List[Dict]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests WHERE status = ? ORDER BY created_at DESC
                ''', (status,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_user_statistics(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total_requests,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new
                    FROM requests 
                    WHERE user_id = ?
                ''', (user_id,))
                
                result = cursor.fetchone()
                if result:
                    columns = ['total_requests', 'completed', 'in_progress', 'new']
                    return dict(zip(columns, result))
                return {}
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}
    
    def update_request(self, request_id: int, updates: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                set_clause = ", ".join([f"{key} = ?" for key in updates.keys()])
                values = list(updates.values())
                
                query = f"UPDATE requests SET {set_clause}, updated_at = ? WHERE id = ?"
                cursor.execute(query, values + [datetime.now().isoformat(), request_id])
                conn.commit()
                logging.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                return True
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False
    
    def get_request_by_id(self, request_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return None
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None

    def get_statistics(self, days: int = 7) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        try:
            since_date = (datetime.now() - timedelta(days=days)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress
                    FROM requests 
                    WHERE created_at > ?
                ''', (since_date,))
                
                result = cursor.fetchone()
                return {
                    'total': result[0] if result else 0,
                    'completed': result[1] if result else 0,
                    'new': result[2] if result else 0,
                    'in_progress': result[3] if result else 0
                }
                
        except sqlite3.Error as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'completed': 0, 'new': 0, 'in_progress': 0}

# ==================== BACKUP MANAGER ====================
class BackupManager:
    @staticmethod
    def create_backup():
        try:
            if not os.path.exists(config.db_path):
                logging.error(f"–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {config.db_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
                
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(config.backup_dir, f"backup_{timestamp}.db")
            os.makedirs(config.backup_dir, exist_ok=True)
            shutil.copy2(config.db_path, backup_path)
            logging.info(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
            return backup_path
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None

# ==================== –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø ====================
class GamificationEngine:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_gamification()
    
    def init_gamification(self):
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS user_points (
                        user_id INTEGER PRIMARY KEY,
                        points INTEGER DEFAULT 0,
                        level INTEGER DEFAULT 1,
                        last_activity TEXT
                    )
                ''')
                conn.commit()
                logging.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    
    def award_points(self, user_id, action):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ"""
        point_values = {
            'create_request': 10,
            'request_completed': 5
        }
        
        points_to_award = point_values.get(action, 0)
        
        if points_to_award > 0:
            try:
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        INSERT OR REPLACE INTO user_points 
                        (user_id, points, level, last_activity)
                        VALUES (?, 
                            COALESCE((SELECT points FROM user_points WHERE user_id = ?), 0) + ?,
                            COALESCE((SELECT level FROM user_points WHERE user_id = ?), 1),
                            ?
                        )
                    ''', (user_id, user_id, points_to_award, user_id, datetime.now().isoformat()))
                    conn.commit()
                    logging.info(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ {points_to_award} –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤: {e}")
    
    def get_user_stats(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT points, level FROM user_points WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                return {'points': result[0] if result else 0, 'level': result[1] if result else 1}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {'points': 0, 'level': 1}

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================
@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–µ–Ω—é")
def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user.id, "main_menu")
    if not allowed:
        update.message.reply_text(message)
        return
    
    if user.id in config.admin_chat_ids:
        reply_markup = ReplyKeyboardMarkup(get_admin_panel(), resize_keyboard=True)
    else:
        reply_markup = ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
def start_request_creation(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    user = update.message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user.id, "create_request")
    if not allowed:
        update.message.reply_text(message)
        return ConversationHandler.END
    
    update.message.reply_text(
        "üìù –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
        reply_markup=ReplyKeyboardRemove()
    )
    return NAME

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–º–µ–Ω–∏")
def process_name(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name_text = update.message.text
    if not Validators.validate_name(name_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.")
        return NAME
    
    context.user_data['name'] = name_text
    update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    return PHONE

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def process_phone(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_text = update.message.text
    if not Validators.validate_phone(phone_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–∏–º–µ—Ä: +7 123 456-78-90")
        return PHONE
    
    context.user_data['phone'] = phone_text
    
    keyboard = [['–£—á–∞—Å—Ç–æ–∫ 1', '–£—á–∞—Å—Ç–æ–∫ 2', '–£—á–∞—Å—Ç–æ–∫ 3'], ['–î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫']]
    update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PLOT

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—á–∞—Å—Ç–∫–∞")
def process_plot(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–∫–∞"""
    plot_text = update.message.text
    if not Validators.validate_plot(plot_text):
        update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–∞—Å—Ç–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã.")
        return PLOT
    
    context.user_data['plot'] = plot_text
    
    keyboard = [
        ['üîå –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç'],
        ['üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 'üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ']
    ]
    update.message.reply_text(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SYSTEM_TYPE

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã")
def process_system_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã"""
    context.user_data['system_type'] = update.message.text
    
    update.message.reply_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:",
        reply_markup=ReplyKeyboardRemove()
    )
    return PROBLEM

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–±–ª–µ–º—ã")
def process_problem(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    problem_text = update.message.text
    
    if len(problem_text) < 5:
        update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
        return PROBLEM
    
    context.user_data['problem'] = problem_text
    
    keyboard = [['üî¥ –°—Ä–æ—á–Ω–æ', 'üü° –°—Ä–µ–¥–Ω—è—è', 'üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ']]
    update.message.reply_text(
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return URGENCY

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏")
def process_urgency(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    context.user_data['urgency'] = update.message.text
    context.user_data['user_id'] = update.message.from_user.id
    context.user_data['username'] = update.message.from_user.username
    context.user_data['first_name'] = update.message.from_user.first_name
    context.user_data['last_name'] = update.message.from_user.last_name
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    request_text = (
        "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
        f"üë§ –§–ò–û: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n"
        f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞: {context.user_data['system_type']}\n"
        f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['problem']}\n"
        f"‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    
    keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(
        request_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    
    return ConversationHandler.END

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
def confirm_request(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        user = update.message.from_user
        
        try:
            required_fields = ['name', 'phone', 'plot', 'system_type', 'problem', 'urgency']
            for field in required_fields:
                if field not in context.user_data or not context.user_data[field]:
                    update.message.reply_text(
                        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}",
                        reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
                    )
                    return
            
            request_id = db.save_request(context.user_data)
            
            # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
            gamification_engine.award_points(user.id, 'create_request')
            
            confirmation_text = (
                f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
                f"üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n"
                f"üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üõ†Ô∏è"
            )
            
            if user.id in config.admin_chat_ids:
                reply_markup = ReplyKeyboardMarkup(get_admin_panel(), resize_keyboard=True)
            else:
                reply_markup = ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
            
            update.message.reply_text(
                confirmation_text,
                reply_markup=reply_markup
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            admin_message = (
                f"üÜï –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}\n\n"
                f"üë§ –ö–ª–∏–µ–Ω—Ç: {context.user_data['name']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
                f"üìç –£—á–∞—Å—Ç–æ–∫: {context.user_data['plot']}\n"
                f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞: {context.user_data['system_type']}\n"
                f"‚è±Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {context.user_data['urgency']}\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞: {context.user_data['problem'][:100]}...\n"
            )
            
            for admin_id in config.admin_chat_ids:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        reply_markup=create_request_actions_keyboard(request_id)
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logging.info(f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        context.user_data.clear()
    else:
        update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )

def cancel_request(update: Update, context: CallbackContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–Ω—é")
def handle_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
    allowed, message = rate_limiter.check_rate_limit(user_id, "main_menu")
    if not allowed:
        update.message.reply_text(message)
        return
    
    if text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        show_user_requests(update, context)
    
    elif text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        user_stats = db.get_user_statistics(user_id) if db else {}
        stats_text = (
            "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
            f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {user_stats.get('total_requests', 0)}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user_stats.get('completed', 0)}\n"
            f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {user_stats.get('in_progress', 0)}\n"
            f"üÜï –ù–æ–≤—ã—Ö: {user_stats.get('new', 0)}\n"
        )
        update.message.reply_text(stats_text)
    
    elif text == 'üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_gamification_stats(update, context)

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
def handle_admin_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user_id = update.message.from_user.id
    if user_id not in config.admin_chat_ids:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    text = update.message.text
    
    if text.startswith('üÜï –ù–æ–≤—ã–µ'):
        new_requests = db.get_requests_by_filter('new') if db else []
        if not new_requests:
            update.message.reply_text("‚úÖ –ù–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–µ—Ç")
        else:
            update.message.reply_text(f"üÜï –ù–∞–π–¥–µ–Ω–æ {len(new_requests)} –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:")
            for request in new_requests[:3]:
                request_text = (
                    f"üÜï –ó–∞—è–≤–∫–∞ #{request['id']}\n\n"
                    f"üë§ {request['name']}\n"
                    f"üìû {request['phone']}\n"
                    f"üìç {request['plot']}\n"
                    f"üìù {request['problem'][:100]}...\n"
                )
                update.message.reply_text(
                    request_text,
                    reply_markup=create_request_actions_keyboard(request['id'])
                )
    
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_statistics(update, context)
    
    elif text == 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è':
        show_gamification_stats(update, context)
    
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        show_admin_panel(update, context)

@safe_execute("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–æ–∫")
def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    
    if data.startswith('assign_'):
        request_id = int(data.split('_')[1])
        if db.update_request(request_id, {'status': 'in_progress'}):
            query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                request_data = db.get_request_by_id(request_id)
                if request_data:
                    context.bot.send_message(
                        chat_id=request_data['user_id'],
                        text=f"üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É! –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —É–∂–µ –≤—ã–µ—Ö–∞–ª."
                    )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")
    
    elif data.startswith('complete_'):
        request_id = int(data.split('_')[1])
        if db.update_request(request_id, {'status': 'completed', 'completed_at': datetime.now().isoformat()}):
            query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                request_data = db.get_request_by_id(request_id)
                if request_data:
                    context.bot.send_message(
                        chat_id=request_data['user_id'],
                        text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
                    )
                    # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                    gamification_engine.award_points(request_data['user_id'], 'request_completed')
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")

def show_user_requests(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    
    try:
        with sqlite3.connect(config.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, problem, status, created_at, urgency 
                FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT 5
            ''', (user_id,))
            
            requests = cursor.fetchall()
            
        if not requests:
            update.message.reply_text("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫")
            return
        
        text = "üìã –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏:\n\n"
        for req_id, problem, status, created_at, urgency in requests:
            status_icons = {
                'new': 'üÜï',
                'in_progress': 'üîÑ', 
                'completed': '‚úÖ'
            }
            date = datetime.fromisoformat(created_at).strftime("%d.%m.%Y %H:%M")
            text += f"{status_icons.get(status, 'üìÑ')} –ó–∞—è–≤–∫–∞ #{req_id}\n"
            text += f"üìù {problem[:50]}...\n"
            text += f"‚è±Ô∏è {urgency} | {date}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        
        update.message.reply_text(text)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫")

def show_gamification_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    user_stats = gamification_engine.get_user_stats(user_id)
    
    text = "üéÆ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
    text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_stats['level']}\n"
    text += f"‚≠ê –û—á–∫–∏: {user_stats['points']}\n"
    
    update.message.reply_text(text)

def show_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = db.get_statistics(7) if db else {}
    
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π\n\n"
        f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats.get('total', 0)}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats.get('in_progress', 0)}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats.get('new', 0)}\n"
    )
    
    update.message.reply_text(text)

def show_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user_id = update.message.from_user.id
    if user_id not in config.admin_chat_ids:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    reply_markup = ReplyKeyboardMarkup(get_admin_panel(), resize_keyboard=True)
    update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )

# ==================== –ó–ê–î–ê–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ ====================
def backup_job(context: CallbackContext):
    """–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_path = BackupManager.create_backup()
    if backup_path:
        logging.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logging.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and update.message:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(user_main_menu_keyboard, resize_keyboard=True)
        )

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ò–°–¢–ï–ú ====================
def initialize_basic_systems():
    """–ë–∞–∑–æ–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"""
    global db, rate_limiter, security_manager, gamification_engine
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database(config.db_path)
        
        # –ë–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
        rate_limiter = RateLimiter()
        security_manager = SecurityManager()
        
        # –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è
        gamification_engine = GamificationEngine(config.db_path)
        
        logging.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
        return False

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
        level=logging.INFO
    )
    
    logging.info("=" * 50)
    logging.info("ü§ñ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ê–ú–ò")
    logging.info("=" * 50)
    
    if not config.validate():
        logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞!")
        return
    
    if not TELEGRAM_AVAILABLE:
        logging.error("‚ùå python-telegram-bot –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
    if not initialize_basic_systems():
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã!")
        return
    
    try:
        updater = Updater(config.bot_token)
        dispatcher = updater.dispatcher

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)

        # –ó–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        job_queue = updater.job_queue
        if job_queue:
            try:
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                from datetime import time as dt_time
                backup_time = dt_time(hour=config.auto_backup_hour, minute=config.auto_backup_minute)
                job_queue.run_daily(backup_job, time=backup_time)
                logging.info("‚úÖ –ó–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, process_name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, process_phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, process_plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, process_system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, process_problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, process_urgency)],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
                MessageHandler(Filters.regex('^(‚ùå –û—Ç–º–µ–Ω–∏—Ç—å)$'), cancel_request),
            ],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_admin_panel))
        dispatcher.add_handler(CommandHandler('stats', show_statistics))
        dispatcher.add_handler(CommandHandler('gamification', show_gamification_stats))
        dispatcher.add_handler(CommandHandler('cancel', cancel_request))
        
        dispatcher.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), 
            confirm_request
        ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É|üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏|üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|‚ÑπÔ∏è –û –±–æ—Ç–µ)$'), 
            handle_main_menu
        ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üÜï –ù–æ–≤—ã–µ|üîÑ –í —Ä–∞–±–æ—Ç–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üíæ –ë—ç–∫–∞–ø—ã|üîÑ –û–±–Ω–æ–≤–∏—Ç—å|üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è|üìä –ú–µ—Ç—Ä–∏–∫–∏)$'), 
            handle_admin_menu
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline –∫–Ω–æ–ø–æ–∫
        dispatcher.add_handler(CallbackQueryHandler(button_handler))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logging.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(config.admin_chat_ids)}")
        logging.info(f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {config.max_requests_per_hour}/—á–∞—Å")
        logging.info("=" * 50)
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
