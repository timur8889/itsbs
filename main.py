import logging
import sqlite3
import os
import json
import re
import threading
import shutil
import tempfile
import io
import base64
import time
import psutil
import matplotlib
matplotlib.use('Agg')  # –î–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ GUI
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
    InputFile,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)

# ==================== –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –ò–ú–ü–û–†–¢–´ ====================
try:
    import gspread
    from google.oauth2.service_account import Credentials
    GOOGLE_SHEETS_AVAILABLE = True
except ImportError:
    GOOGLE_SHEETS_AVAILABLE = False

try:
    from flask import Flask, jsonify, request
    FLASK_AVAILABLE = True
except ImportError:
    FLASK_AVAILABLE = False

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_CHAT_IDS = [int(x) for x in os.getenv('ADMIN_CHAT_IDS', '').split(',') if x]
GOOGLE_SHEETS_CREDENTIALS = os.getenv('GOOGLE_SHEETS_CREDENTIALS')
GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
GOOGLE_SHEET_NAME = '–ó–∞—è–≤–∫–∏'

# –ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY', '')
SMS_API_KEY = os.getenv('SMS_API_KEY', '')
EMAIL_CONFIG = os.getenv('EMAIL_CONFIG', '')
WEB_DASHBOARD_PORT = int(os.getenv('WEB_DASHBOARD_PORT', '5000'))

if not BOT_TOKEN:
    logging.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)
if not ADMIN_CHAT_IDS:
    logging.error("‚ùå ADMIN_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    exit(1)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
MAX_REQUESTS_PER_HOUR = 15
BACKUP_RETENTION_DAYS = 30
AUTO_BACKUP_HOUR = 3
AUTO_BACKUP_MINUTE = 0
REQUEST_TIMEOUT_HOURS = 24
SYNC_TO_SHEETS = bool(GOOGLE_SHEETS_CREDENTIALS and GOOGLE_SHEET_ID and GOOGLE_SHEETS_AVAILABLE)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

DB_PATH = "requests.db"
BACKUP_DIR = "backups"
os.makedirs(BACKUP_DIR, exist_ok=True)

# ==================== –°–ò–°–¢–ï–ú–ê –í–ï–ë-–ü–ê–ù–ï–õ–ò ====================

class WebDashboard:
    def __init__(self, db_manager, port=5000):
        if not FLASK_AVAILABLE:
            logger.warning("‚ö†Ô∏è Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–µ–±-–ø–∞–Ω–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return
            
        self.app = Flask(__name__)
        self.db_manager = db_manager
        self.port = port
        self.setup_routes()
    
    def setup_routes(self):
        @self.app.route('/')
        def dashboard():
            stats = self.db_manager.get_statistics(7)
            return f"""
            <html>
                <head><title>–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</title></head>
                <body>
                    <h1>üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h1>
                    <div>–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}</div>
                    <div>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}</div>
                    <div>–ù–æ–≤—ã—Ö: {stats['new']}</div>
                    <div>–í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}</div>
                </body>
            </html>
            """
        
        @self.app.route('/api/requests')
        def get_requests():
            status = request.args.get('status', 'all')
            requests = []
            if status == 'all':
                for status_type in ['new', 'in_progress', 'completed']:
                    requests.extend(self.db_manager.get_requests_by_filter(status_type))
            else:
                requests = self.db_manager.get_requests_by_filter(status)
            return jsonify({"requests": requests[:50]})  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
    
    def run(self):
        if not FLASK_AVAILABLE:
            return
            
        def run_flask():
            try:
                self.app.run(host='0.0.0.0', port=self.port, debug=False)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–∞–Ω–µ–ª–∏: {e}")
        
        threading.Thread(target=run_flask, daemon=True).start()
        logger.info(f"üåê –í–µ–±-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ –ø–æ—Ä—Ç—É {self.port}")

# ==================== –°–ò–°–¢–ï–ú–ê –ê–ù–ê–õ–ò–¢–ò–ö–ò ====================

class AnalyticsEngine:
    def generate_weekly_stats_chart(self, stats_data):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ base64"""
        try:
            fig, ax = plt.subplots(figsize=(10, 6))
            
            days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
            requests = stats_data.get('daily_requests', [0]*7)
            
            ax.bar(days, requests, color='skyblue')
            ax.set_title('–ó–∞—è–≤–∫–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏')
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫')
            
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight')
            buf.seek(0)
            plt.close()
            return base64.b64encode(buf.getvalue()).decode()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            return None
    
    def get_advanced_analytics(self, days=30):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞"""
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                
                # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–∏—Å—Ç–µ–º
                cursor.execute('''
                    SELECT system_type, COUNT(*) as count 
                    FROM requests 
                    WHERE created_at > ?
                    GROUP BY system_type
                ''', ((datetime.now() - timedelta(days=days)).isoformat(),))
                system_stats = dict(cursor.fetchall())
                
                # –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
                cursor.execute('''
                    SELECT AVG((julianday(completed_at) - julianday(created_at)) * 24)
                    FROM requests 
                    WHERE status = 'completed' AND completed_at IS NOT NULL
                ''')
                avg_completion_time = cursor.fetchone()[0] or 0
                
                return {
                    'system_distribution': system_stats,
                    'avg_completion_hours': round(avg_completion_time, 2),
                    'total_requests': sum(system_stats.values())
                }
        except Exception as e:
            logger.error(f"Analytics error: {e}")
            return {}

# ==================== AI-–ü–û–ú–û–©–ù–ò–ö ====================

class AIAssistant:
    def __init__(self, api_key):
        self.api_key = api_key
    
    def analyze_problem_text(self, problem_description):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            keywords = {
                'internet': ['–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '—Å–µ—Ç—å', 'wi-fi', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç', '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'],
                'electricity': ['—Å–≤–µ—Ç', '—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ', '—Ä–æ–∑–µ—Ç–∫–∞', '–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ', '–≤—ã–∫–ª—é—á–∞—Ç–µ–ª—å'],
                'phone': ['—Ç–µ–ª–µ—Ñ–æ–Ω', '–∑–≤–æ–Ω–æ–∫', '—Å–≤—è–∑—å', '–∞—Ç–∞—Å', '—Ç—Ä—É–±–∫–∞'],
                'camera': ['–∫–∞–º–µ—Ä–∞', '–≤–∏–¥–µ–æ', '–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'cctv', '–æ–±—ä–µ–∫—Ç–∏–≤']
            }
            
            problem_lower = problem_description.lower()
            for category, words in keywords.items():
                if any(word in problem_lower for word in words):
                    return category
            
            return 'other'
        except Exception as e:
            logger.error(f"AI analysis error: {e}")
            return 'other'
    
    def suggest_solutions(self, problem_text, system_type):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        solution_templates = {
            'electricity': "üîå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–≤—Ç–æ–º–∞—Ç—ã –≤ —â–∏—Ç–∫–µ, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è",
            'internet': "üì∂ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–±–µ–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
            'phone': "üìû –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä—É–±–∫—É, –ª–∏–Ω–∏—é —Å–≤—è–∑–∏, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–∞–±–µ–ª—å",
            'camera': "üé• –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∏—Ç–∞–Ω–∏–µ, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏, —á–∏—Å—Ç–æ—Ç—É –æ–±—ä–µ–∫—Ç–∏–≤–∞",
            'other': "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –Ω–∞ –º–µ—Å—Ç–µ"
        }
        return solution_templates.get(system_type, "–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º")

# ==================== –£–ú–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ====================

class SmartNotificationManager:
    def __init__(self, bot, db_manager):
        self.bot = bot
        self.db_manager = db_manager
        self.user_preferences = {}
    
    def send_reminder(self, request_id, reminder_type):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ"""
        request = self.db_manager.get_request_by_id(request_id)
        if not request:
            return
        
        user_id = request['user_id']
        messages = {
            'status_update': f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞—è–≤–∫–µ #{request_id}",
            'deadline': f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞—è–≤–∫–∞ #{request_id} —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è",
            'completion': f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
        }
        
        if user_id in self.user_preferences and self.user_preferences[user_id].get('notifications', True):
            try:
                self.bot.send_message(chat_id=user_id, text=messages.get(reminder_type, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"))
            except Exception as e:
                logger.error(f"Reminder send error: {e}")
    
    def check_pending_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç pending –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        try:
            stale_requests = self.db_manager.get_stuck_requests(24)
            for request in stale_requests:
                self.send_reminder(request['id'], 'deadline')
        except Exception as e:
            logger.error(f"Reminder check error: {e}")

# ==================== –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ====================

class PerformanceMonitor:
    def __init__(self):
        self.start_time = time.time()
        self.request_count = 0
    
    def increment_request_count(self):
        self.request_count += 1
    
    def get_system_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            return {
                'uptime': time.time() - self.start_time,
                'memory_usage': psutil.virtual_memory().percent,
                'cpu_usage': psutil.cpu_percent(),
                'active_users': len(self.get_active_users()),
                'requests_today': self.request_count
            }
        except Exception as e:
            logger.error(f"Metrics error: {e}")
            return {}
    
    def get_active_users(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"""
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                time_threshold = (datetime.now() - timedelta(hours=24)).isoformat()
                cursor.execute('SELECT DISTINCT user_id FROM requests WHERE created_at > ?', (time_threshold,))
                return [row[0] for row in cursor.fetchall()]
        except Exception as e:
            logger.error(f"Active users error: {e}")
            return []

# ==================== –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ====================

class SecurityManager:
    def __init__(self):
        self.suspicious_activities = {}
        self.blocked_users = set()
    
    def check_suspicious_activity(self, user_id, action):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        now = datetime.now()
        hour_key = now.strftime("%Y%m%d%H")
        
        if user_id not in self.suspicious_activities:
            self.suspicious_activities[user_id] = {}
        
        if hour_key not in self.suspicious_activities[user_id]:
            self.suspicious_activities[user_id][hour_key] = 0
        
        self.suspicious_activities[user_id][hour_key] += 1
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 50 –¥–µ–π—Å—Ç–≤–∏–π –≤ —á–∞—Å - –±–ª–æ–∫–∏—Ä—É–µ–º
        if self.suspicious_activities[user_id][hour_key] > 50:
            self.blocked_users.add(user_id)
            return False
        
        return True
    
    def is_user_blocked(self, user_id):
        return user_id in self.blocked_users

# ==================== –ú–ï–ù–ï–î–ñ–ï–† –®–ê–ë–õ–û–ù–û–í ====================

class TemplateManager:
    def __init__(self):
        self.templates = {
            'greeting': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            'request_received': "‚úÖ –ó–∞—è–≤–∫–∞ #{id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
            'completion': "‚úÖ –ó–∞—è–≤–∫–∞ #{id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            'urgent_response': "üî¥ –°–†–û–ß–ù–û! –ü—Ä–∏–Ω—è–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É #{id}. –°–≤—è–∂–µ–º—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.",
        }
    
    def get_template(self, name, **kwargs):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        template = self.templates.get(name, "")
        return template.format(**kwargs)
    
    def quick_reply(self, update, template_name, **kwargs):
        """–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ —à–∞–±–ª–æ–Ω—É"""
        text = self.get_template(template_name, **kwargs)
        update.message.reply_text(text)

# ==================== –ú–£–õ–¨–¢–ò–Ø–ó–´–ß–ù–ê–Ø –ü–û–î–î–ï–†–ñ–ö–ê ====================

class Internationalization:
    def __init__(self):
        self.translations = {
            'ru': {
                'welcome': "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!",
                'create_request': "–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                'my_requests': "–ú–æ–∏ –∑–∞—è–≤–∫–∏",
                'help': "–ü–æ–º–æ—â—å",
            },
            'en': {
                'welcome': "Welcome!",
                'create_request': "Create request", 
                'my_requests': "My requests",
                'help': "Help",
            }
        }
        self.user_languages = {}
    
    def set_language(self, user_id, language):
        if language in self.translations:
            self.user_languages[user_id] = language
    
    def get_text(self, user_id, key):
        lang = self.user_languages.get(user_id, 'ru')
        return self.translations.get(lang, {}).get(key, key)

# ==================== –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–Ø ====================

class GamificationEngine:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_gamification()
    
    def init_gamification(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS user_points (
                    user_id INTEGER PRIMARY KEY,
                    points INTEGER DEFAULT 0,
                    level INTEGER DEFAULT 1,
                    achievements TEXT DEFAULT '[]',
                    last_activity TEXT
                )
            ''')
            conn.commit()
    
    def award_points(self, user_id, action):
        """–ù–∞—á–∏—Å–ª—è–µ—Ç –æ—á–∫–∏ –∑–∞ –¥–µ–π—Å—Ç–≤–∏–µ"""
        point_values = {
            'create_request': 10,
            'request_completed': 5,
            'first_request': 25
        }
        
        points_to_award = point_values.get(action, 0)
        
        if points_to_award > 0:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    INSERT OR REPLACE INTO user_points 
                    (user_id, points, level, last_activity)
                    VALUES (?, 
                        COALESCE((SELECT points FROM user_points WHERE user_id = ?), 0) + ?,
                        COALESCE((SELECT level FROM user_points WHERE user_id = ?), 1),
                        ?
                    )
                ''', (user_id, user_id, points_to_award, user_id, datetime.now().isoformat()))
                conn.commit()
    
    def get_user_stats(self, user_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT points, level FROM user_points WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            return {'points': result[0] if result else 0, 'level': result[1] if result else 1}
    
    def get_leaderboard(self, limit=10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT user_id, points, level 
                FROM user_points 
                ORDER BY points DESC 
                LIMIT ?
            ''', (limit,))
            return cursor.fetchall()

# ==================== –ë–ê–ó–û–í–´–ï –ö–õ–ê–°–°–´ ====================

class Validators:
    @staticmethod
    def validate_phone(phone: str) -> bool:
        return bool(re.match(r'^[\d\s\-\+\(\)]{7,20}$', phone.strip()))
    
    @staticmethod
    def validate_name(name: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z\s]{2,50}$', name.strip()))
    
    @staticmethod
    def validate_plot(plot: str) -> bool:
        return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z0-9\s\-]{2,20}$', plot.strip()))

class BackupManager:
    @staticmethod
    def create_backup():
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_path = os.path.join(BACKUP_DIR, f"backup_{timestamp}.db")
            shutil.copy2(DB_PATH, backup_path)
            logger.info(f"–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
            return backup_path
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            return None

class RateLimiter:
    def __init__(self):
        self.requests = {}
        self.lock = threading.Lock()
    
    def is_limited(self, user_id, action, max_requests):
        with self.lock:
            now = datetime.now()
            hour_key = now.strftime("%Y%m%d%H")
            
            if user_id not in self.requests:
                self.requests[user_id] = {}
            
            if action not in self.requests[user_id]:
                self.requests[user_id][action] = {}
            
            if hour_key not in self.requests[user_id][action]:
                self.requests[user_id][action][hour_key] = 0
            
            self.requests[user_id][action][hour_key] += 1
            return self.requests[user_id][action][hour_key] > max_requests

class Database:
    def __init__(self, db_path):
        self.db_path = db_path
        self.init_db()
    
    def init_db(self):
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    name TEXT,
                    phone TEXT,
                    plot TEXT,
                    system_type TEXT,
                    problem TEXT,
                    photo TEXT,
                    urgency TEXT,
                    status TEXT DEFAULT 'new',
                    created_at TEXT,
                    updated_at TEXT,
                    assigned_to TEXT,
                    completed_at TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    request_count INTEGER DEFAULT 0,
                    created_at TEXT,
                    last_activity TEXT
                )
            ''')
            conn.commit()
    
    def save_request(self, data: Dict) -> int:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    INSERT OR REPLACE INTO users 
                    (user_id, username, first_name, last_name, request_count, created_at, last_activity)
                    VALUES (?, ?, ?, ?, 
                        COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1,
                        COALESCE((SELECT created_at FROM users WHERE user_id = ?), ?), ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data['user_id'], data['user_id'], datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                cursor.execute('''
                    INSERT INTO requests 
                    (user_id, username, first_name, last_name, name, phone, plot, system_type, 
                     problem, photo, urgency, status, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    data['user_id'], data.get('username'), data.get('first_name'), data.get('last_name'),
                    data.get('name'), data.get('phone'), data.get('plot'), data.get('system_type'),
                    data.get('problem'), data.get('photo'), data.get('urgency'), 'new',
                    datetime.now().isoformat(), datetime.now().isoformat()
                ))
                
                request_id = cursor.lastrowid
                conn.commit()
                return request_id
                
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            raise
    
    def get_requests_by_filter(self, status: str) -> List[Dict]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests WHERE status = ? ORDER BY created_at DESC
                ''', (status,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–æ–∫: {e}")
            return []
    
    def get_statistics(self, days: int = 7) -> Dict:
        try:
            since_date = (datetime.now() - timedelta(days=days)).isoformat()
            
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress
                    FROM requests 
                    WHERE created_at > ?
                ''', (since_date,))
                
                result = cursor.fetchone()
                return {
                    'total': result[0] if result else 0,
                    'completed': result[1] if result else 0,
                    'new': result[2] if result else 0,
                    'in_progress': result[3] if result else 0
                }
                
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total': 0, 'completed': 0, 'new': 0, 'in_progress': 0}

# ==================== GOOGLE SHEETS ====================

class GoogleSheetsManager:
    def __init__(self, credentials_json: str, sheet_id: str, sheet_name: str = '–ó–∞—è–≤–∫–∏'):
        self.credentials_json = credentials_json
        self.sheet_id = sheet_id
        self.sheet_name = sheet_name
        self.client = None
        self.sheet = None
        self.is_connected = False
        self._connect()
    
    def _connect(self):
        try:
            if not self.credentials_json or not self.sheet_id:
                logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return
            
            if not GOOGLE_SHEETS_AVAILABLE:
                logger.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ Google Sheets –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                return
            
            creds_dict = json.loads(self.credentials_json)
            SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
            creds = Credentials.from_service_account_info(creds_dict, scopes=SCOPES)
            
            self.client = gspread.authorize(creds)
            self.sheet = self.client.open_by_key(self.sheet_id).worksheet(self.sheet_name)
            self.is_connected = True
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.is_connected = False

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================

class Config:
    def __init__(self):
        self.bot_token = BOT_TOKEN
        self.admin_chat_ids = ADMIN_CHAT_IDS
        self.max_requests_per_hour = MAX_REQUESTS_PER_HOUR
        self.backup_retention_days = BACKUP_RETENTION_DAYS
        self.auto_backup_hour = AUTO_BACKUP_HOUR
        self.auto_backup_minute = AUTO_BACKUP_MINUTE
        self.request_timeout_hours = REQUEST_TIMEOUT_HOURS
        self.db_path = DB_PATH
        self.backup_dir = BACKUP_DIR
        self.sync_to_sheets = SYNC_TO_SHEETS
        self.google_sheets_credentials = GOOGLE_SHEETS_CREDENTIALS
        self.google_sheet_id = GOOGLE_SHEET_ID
        self.google_sheet_name = GOOGLE_SHEET_NAME
        self.openai_api_key = OPENAI_API_KEY
        self.web_dashboard_port = WEB_DASHBOARD_PORT
    
    def validate(self) -> bool:
        if not self.bot_token:
            logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        if not self.admin_chat_ids:
            logger.error("‚ùå ADMIN_CHAT_IDS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return False
        return True

config = Config()

# ==================== –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class EnhancedDatabase(Database):
    def __init__(self, db_path, sheets_manager=None):
        super().__init__(db_path)
        self.sheets_manager = sheets_manager
    
    def save_request(self, data: Dict) -> int:
        request_id = super().save_request(data)
        
        # AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
        if ai_assistant and data.get('problem'):
            suggested_category = ai_assistant.analyze_problem_text(data['problem'])
            logger.info(f"ü§ñ AI –æ–ø—Ä–µ–¥–µ–ª–∏–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {suggested_category}")
        
        # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤
        gamification_engine.award_points(data['user_id'], 'create_request')
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
        if self.sheets_manager and self.sheets_manager.is_connected:
            try:
                self.sheets_manager.sheet.append_row([
                    request_id,
                    data.get('name', ''),
                    data.get('phone', ''),
                    data.get('plot', ''),
                    data.get('system_type', ''),
                    data.get('problem', ''),
                    data.get('urgency', ''),
                    'new',
                    datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                ])
                logger.info(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å Google Sheets")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        
        return request_id
    
    def get_request_by_id(self, request_id: int) -> Optional[Dict]:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
                row = cursor.fetchone()
                
                if row:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, row))
                return None
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return None
    
    def get_urgent_requests(self, hours: int = 2) -> List[Dict]:
        try:
            time_threshold = (datetime.now() - timedelta(hours=hours)).isoformat()
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE urgency LIKE '%–°—Ä–æ—á–Ω–æ%' 
                    AND status IN ('new', 'in_progress')
                    AND created_at > ?
                    ORDER BY created_at ASC
                ''', (time_threshold,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []

    def get_stuck_requests(self, hours: int = 24) -> List[Dict]:
        try:
            time_threshold = (datetime.now() - timedelta(hours=hours)).isoformat()
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT * FROM requests 
                    WHERE status IN ('new', 'in_progress')
                    AND created_at < ?
                    ORDER BY created_at ASC
                ''', (time_threshold,))
                columns = [column[0] for column in cursor.description]
                return [dict(zip(columns, row)) for row in cursor.fetchall()]
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞—è–≤–æ–∫: {e}")
            return []

    def get_user_statistics(self, user_id: int) -> Dict:
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        COUNT(*) as total_requests,
                        SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
                        SUM(CASE WHEN status = 'in_progress' THEN 1 ELSE 0 END) as in_progress,
                        SUM(CASE WHEN status = 'new' THEN 1 ELSE 0 END) as new,
                        MIN(created_at) as first_request,
                        MAX(created_at) as last_request
                    FROM requests 
                    WHERE user_id = ?
                ''', (user_id,))
                
                stats = cursor.fetchone()
                if stats:
                    columns = [column[0] for column in cursor.description]
                    return dict(zip(columns, stats))
                return {}
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return {}

    def update_request(self, request_id: int, updates: Dict):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞—è–≤–∫—É"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                set_clause = ", ".join([f"{key} = ?" for key in updates.keys()])
                values = list(updates.values())
                values.append(request_id)
                
                cursor.execute(f'''
                    UPDATE requests 
                    SET {set_clause}, updated_at = ?
                    WHERE id = ?
                ''', values + [datetime.now().isoformat(), request_id])
                conn.commit()
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                if updates.get('status') == 'completed':
                    request_data = self.get_request_by_id(request_id)
                    if request_data:
                        gamification_engine.award_points(request_data['user_id'], 'request_completed')
                
                return True
        except sqlite3.Error as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return False

# ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –°–ò–°–¢–ï–ú ====================

def initialize_all_systems():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã –±–æ—Ç–∞"""
    global db
    global sheets_manager
    global notification_manager
    global analytics_engine
    global ai_assistant
    global security_manager
    global performance_monitor
    global template_manager
    global i18n
    global gamification_engine
    global web_dashboard
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    if config.sync_to_sheets:
        sheets_manager = GoogleSheetsManager(
            config.google_sheets_credentials,
            config.google_sheet_id,
            config.google_sheet_name
        )
    else:
        sheets_manager = None
        logger.info("‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    db = EnhancedDatabase(DB_PATH, sheets_manager)
    security_manager = SecurityManager()
    performance_monitor = PerformanceMonitor()
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    analytics_engine = AnalyticsEngine()
    ai_assistant = AIAssistant(config.openai_api_key)
    template_manager = TemplateManager()
    i18n = Internationalization()
    gamification_engine = GamificationEngine(DB_PATH)
    
    # –í–µ–±-–ø–∞–Ω–µ–ª—å
    web_dashboard = WebDashboard(db, config.web_dashboard_port)
    web_dashboard.run()
    
    logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")

# ==================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –û–ë–™–ï–ö–¢–´ ====================

rate_limiter = RateLimiter()
db = None
sheets_manager = None
notification_manager = None
analytics_engine = None
ai_assistant = None
security_manager = None
performance_monitor = None
template_manager = None
i18n = None
gamification_engine = None
web_dashboard = None

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

enhanced_user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏'],
    ['üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å'],
    ['üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
    ['‚ÑπÔ∏è –û –±–æ—Ç–µ', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
]

def get_enhanced_admin_panel():
    new_requests = db.get_requests_by_filter('new') if db else []
    in_progress_requests = db.get_requests_by_filter('in_progress') if db else []
    urgent_requests = db.get_urgent_requests() if db else []
    stuck_requests = db.get_stuck_requests(REQUEST_TIMEOUT_HOURS) if db else []
    
    return [
        [f'üÜï –ù–æ–≤—ã–µ ({len(new_requests)})', f'üîÑ –í —Ä–∞–±–æ—Ç–µ ({len(in_progress_requests)})'],
        [f'‚è∞ –°—Ä–æ—á–Ω—ã–µ ({len(urgent_requests)})', f'üö® –ó–∞–≤–∏—Å—à–∏–µ ({len(stuck_requests)})'],
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞'],
        ['üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['üíæ –ë—ç–∫–∞–ø—ã', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å'],
        ['üìä Google Sheets', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è'],
        ['üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è', 'üìä –ú–µ—Ç—Ä–∏–∫–∏']
    ]

# ==================== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ====================

def show_main_menu(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user = update.message.from_user
    
    if user.id in ADMIN_CHAT_IDS:
        reply_markup = ReplyKeyboardMarkup(get_enhanced_admin_panel(), resize_keyboard=True)
    else:
        reply_markup = ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

def name(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏"""
    name_text = update.message.text
    
    if not Validators.validate_name(name_text):
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (2-50 —Å–∏–º–≤–æ–ª–æ–≤).\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return NAME
    
    context.user_data['name'] = name_text
    update.message.reply_text(
        "üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return PHONE

def phone(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_text = update.message.text
    
    if not Validators.validate_phone(phone_text):
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏ –∏ –¥–µ—Ñ–∏—Å—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return PHONE
    
    context.user_data['phone'] = phone_text
    
    keyboard = [['üè† –£—á–∞—Å—Ç–æ–∫ 1', 'üè† –£—á–∞—Å—Ç–æ–∫ 2'], ['üè† –£—á–∞—Å—Ç–æ–∫ 3', 'üè† –î—Ä—É–≥–æ–π']]
    update.message.reply_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–∫–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PLOT

def plot(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —É—á–∞—Å—Ç–∫–∞"""
    plot_text = update.message.text
    
    if not Validators.validate_plot(plot_text):
        update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —É—á–∞—Å—Ç–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –¥–µ—Ñ–∏—Å—ã.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
        )
        return PLOT
    
    context.user_data['plot'] = plot_text
    
    keyboard = [
        ['üîå –≠–ª–µ–∫—Ç—Ä–∏–∫–∞', 'üì∂ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç'],
        ['üìû –¢–µ–ª–µ—Ñ–æ–Ω–∏—è', 'üé• –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ'],
        ['üíß –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'üîß –î—Ä—É–≥–æ–µ']
    ]
    update.message.reply_text(
        "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return SYSTEM_TYPE

def system_type(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã"""
    context.user_data['system_type'] = update.message.text
    update.message.reply_text(
        "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ:\n\n_–ü—Ä–∏–º–µ—Ä: –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –≤ –≥–æ—Å—Ç–∏–Ω–æ–π, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–∞ —Ä–æ—É—Ç–µ—Ä–µ –Ω–µ –≥–æ—Ä—è—Ç_",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return PROBLEM

def problem(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    context.user_data['problem'] = update.message.text
    
    keyboard = [
        ['üî¥ –°—Ä–æ—á–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞)', 'üü° –°—Ä–µ–¥–Ω—è—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å (2-4 —á–∞—Å–∞)'],
        ['üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ (–≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è)', '‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∑–∞–≤—Ç—Ä–∞']
    ]
    update.message.reply_text(
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞—è–≤–∫–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return URGENCY

def urgency(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ä–æ—á–Ω–æ—Å—Ç–∏"""
    context.user_data['urgency'] = update.message.text
    
    keyboard = [['üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ', 'üöÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å']]
    update.message.reply_text(
        "üì∑ –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã?",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return PHOTO

def photo(update: Update, context: CallbackContext) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫"""
    if update.message.text == 'üöÄ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        context.user_data['photo'] = None
        return show_request_summary(update, context)
    elif update.message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
        photo_file = update.message.photo[-1].get_file()
        context.user_data['photo'] = photo_file.file_id
        return show_request_summary(update, context)
    else:
        update.message.reply_text(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
        )
        return PHOTO

def show_request_summary(update: Update, context: CallbackContext) -> int:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    user_data = context.user_data
    
    summary_text = (
        "üìã *–°–≤–æ–¥–∫–∞ –∑–∞—è–≤–∫–∏*\n\n"
        f"üë§ *–ò–º—è:* {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìç *–£—á–∞—Å—Ç–æ–∫:* {user_data.get('plot', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚öôÔ∏è *–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã:* {user_data.get('system_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {user_data.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {user_data.get('urgency', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        f"üì∑ *–§–æ—Ç–æ:* {'‚úÖ –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ' if user_data.get('photo') else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
        "_–í—Å—ë –≤–µ—Ä–Ω–æ?_"
    )
    
    keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']]
    update.message.reply_text(
        summary_text,
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )
    return ConversationHandler.END

def cancel_request(update: Update, context: CallbackContext) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    context.user_data.clear()
    update.message.reply_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
    )
    return ConversationHandler.END

def enhanced_confirm_request(update: Update, context: CallbackContext) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É':
        user = update.message.from_user
        
        try:
            required_fields = ['name', 'phone', 'plot', 'system_type', 'problem', 'urgency']
            for field in required_fields:
                if field not in context.user_data or not context.user_data[field]:
                    update.message.reply_text(
                        f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}",
                        reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
                    )
                    return
            
            # AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã
            problem_text = context.user_data['problem']
            if ai_assistant:
                suggested_solution = ai_assistant.suggest_solutions(
                    problem_text, 
                    context.user_data['system_type']
                )
                context.user_data['ai_suggestion'] = suggested_solution
            
            request_id = db.save_request(context.user_data)
            performance_monitor.increment_request_count()
            
            # –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = (
                f"‚úÖ *–ó–∞—è–≤–∫–∞ #{request_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n"
                f"üìû –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
            )
            
            if 'ai_suggestion' in context.user_data:
                confirmation_text += f"\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è AI:* {context.user_data['ai_suggestion']}\n"
            
            confirmation_text += f"\n_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!_ üõ†Ô∏è"
            
            if user.id in ADMIN_CHAT_IDS:
                reply_markup = ReplyKeyboardMarkup(get_enhanced_admin_panel(), resize_keyboard=True)
            else:
                reply_markup = ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
            
            update.message.reply_text(
                confirmation_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
            admin_message = (
                f"üÜï *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id}*\n\n"
                f"üë§ *–ö–ª–∏–µ–Ω—Ç:* {context.user_data['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data['phone']}\n"
                f"üìç *–£—á–∞—Å—Ç–æ–∫:* {context.user_data['plot']}\n"
                f"‚öôÔ∏è *–°–∏—Å—Ç–µ–º–∞:* {context.user_data['system_type']}\n"
                f"‚è±Ô∏è *–°—Ä–æ—á–Ω–æ—Å—Ç—å:* {context.user_data['urgency']}\n"
                f"üìù *–ü—Ä–æ–±–ª–µ–º–∞:* {context.user_data['problem'][:100]}...\n"
            )
            
            if 'ai_suggestion' in context.user_data:
                admin_message += f"üí° *AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {context.user_data['ai_suggestion']}\n"
            
            for admin_id in ADMIN_CHAT_IDS:
                try:
                    context.bot.send_message(
                        chat_id=admin_id,
                        text=admin_message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=create_request_actions_keyboard(request_id)
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
            
            logger.info(f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_id} –æ—Ç {user.username}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {e}")
            update.message.reply_text(
                "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.*\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode=ParseMode.MARKDOWN
            )
        
        context.user_data.clear()
    else:
        update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )

def show_enhanced_admin_panel(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    user = update.message.from_user
    if user.id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    update.message.reply_text(
        "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(get_enhanced_admin_panel(), resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    stats = db.get_statistics(7) if db else {'total': 0, 'completed': 0, 'new': 0, 'in_progress': 0}
    
    text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π*\n\n"
        f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed']}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats['new']}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress']}"
    )
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

# ==================== –ù–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ò –§–£–ù–ö–¶–ò–ò ====================

def create_request_actions_keyboard(request_id):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞—è–≤–∫–∏"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"complete_{request_id}"),
            InlineKeyboardButton("üîÑ –í —Ä–∞–±–æ—Ç—É", callback_data=f"progress_{request_id}"),
        ],
        [
            InlineKeyboardButton("üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", callback_data=f"call_{request_id}"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{request_id}"),
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    request_id = data.split('_')[1] if '_' in data else None
    
    if data.startswith('complete_') and request_id:
        success = db.update_request(request_id, {'status': 'completed', 'completed_at': datetime.now().isoformat()})
        if success:
            query.edit_message_text(f"‚úÖ –ó–∞—è–≤–∫–∞ #{request_id} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")
    
    elif data.startswith('progress_') and request_id:
        success = db.update_request(request_id, {'status': 'in_progress'})
        if success:
            query.edit_message_text(f"üîÑ –ó–∞—è–≤–∫–∞ #{request_id} –≤–∑—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É!")
        else:
            query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ #{request_id}")

def show_advanced_analytics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    analytics = analytics_engine.get_advanced_analytics(30) if analytics_engine else {}
    
    text = "üìà *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞*\n\n"
    text += f"‚è±Ô∏è *–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {analytics.get('avg_completion_hours', 0)}—á\n\n"
    
    text += "üîß *–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–∏—Å—Ç–µ–º–∞–º:*\n"
    for system, count in analytics.get('system_distribution', {}).items():
        text += f"‚Ä¢ {system}: {count} –∑–∞—è–≤–æ–∫\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_system_metrics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏"""
    metrics = performance_monitor.get_system_metrics() if performance_monitor else {}
    
    text = "üìä *–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏*\n\n"
    text += f"‚è±Ô∏è –ê–ø—Ç–∞–π–º: {metrics.get('uptime', 0):.0f} —Å–µ–∫\n"
    text += f"üß† –ü–∞–º—è—Ç—å: {metrics.get('memory_usage', 0)}%\n"
    text += f"‚ö° CPU: {metrics.get('cpu_usage', 0)}%\n"
    text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(metrics.get('active_users', []))}\n"
    text += f"üì® –ó–∞—è–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {metrics.get('requests_today', 0)}"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_gamification_stats(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    user_id = update.message.from_user.id
    user_stats = gamification_engine.get_user_stats(user_id) if gamification_engine else {'points': 0, 'level': 1}
    
    text = "üéÆ *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    text += f"üèÜ –£—Ä–æ–≤–µ–Ω—å: {user_stats['level']}\n"
    text += f"‚≠ê –û—á–∫–∏: {user_stats['points']}\n\n"
    
    if gamification_engine:
        leaderboard = gamification_engine.get_leaderboard(5)
        if leaderboard:
            text += "üèÖ *–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:*\n"
            for i, (user_id, points, level) in enumerate(leaderboard, 1):
                text += f"{i}. –£—Ä–æ–≤–µ–Ω—å {level} - {points} –æ—á–∫–æ–≤\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def handle_voice_message(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if update.message.voice:
        update.message.reply_text(
            "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.",
            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )

def secure_handler(handler_func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    def wrapper(update: Update, context: CallbackContext):
        user_id = update.message.from_user.id
        
        if security_manager and security_manager.is_user_blocked(user_id):
            update.message.reply_text("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return
        
        if security_manager and not security_manager.check_suspicious_activity(user_id, 'message'):
            update.message.reply_text("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤")
            return
        
        return handler_func(update, context)
    return wrapper

@secure_handler
def enhanced_start_request_creation(update: Update, context: CallbackContext) -> int:
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º"""
    user_id = update.message.from_user.id
    
    if rate_limiter.is_limited(user_id, 'create_request', MAX_REQUESTS_PER_HOUR):
        update.message.reply_text(
            "‚ùå *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤!*\n\n–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 15 –∑–∞—è–≤–æ–∫ –≤ —á–∞—Å.",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )
        return ConversationHandler.END
    
    context.user_data.clear()
    user = update.message.from_user
    context.user_data.update({
        'user_id': user.id,
        'username': user.username,
        'first_name': user.first_name,
        'last_name': user.last_name
    })
    
    update.message.reply_text(
        "üìù *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=ReplyKeyboardRemove(),
        parse_mode=ParseMode.MARKDOWN
    )
    return NAME

def enhanced_handle_main_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é"""
    text = update.message.text
    
    if text == 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏':
        update.message.reply_text("üìã –§—É–Ω–∫—Ü–∏—è '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    elif text == 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_user_statistics(update, context)
    elif text == 'üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å':
        update.message.reply_text("üÜò –î–ª—è —Å—Ä–æ—á–Ω–æ–π –ø–æ–º–æ—â–∏ –∑–≤–æ–Ω–∏—Ç–µ: +7 (XXX) XXX-XX-XX")
    elif text == 'üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_gamification_stats(update, context)
    elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
        show_advanced_analytics(update, context)
    elif text == '‚ÑπÔ∏è –û –±–æ—Ç–µ':
        update.message.reply_text("‚ÑπÔ∏è –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

def enhanced_handle_admin_menu(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    user = update.message.from_user
    if user.id not in ADMIN_CHAT_IDS:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    text = update.message.text
    
    if text.startswith('üÜï –ù–æ–≤—ã–µ'):
        show_requests_by_status(update, context, 'new')
    elif text.startswith('üîÑ –í —Ä–∞–±–æ—Ç–µ'):
        show_requests_by_status(update, context, 'in_progress')
    elif text.startswith('‚è∞ –°—Ä–æ—á–Ω—ã–µ'):
        show_urgent_requests(update, context)
    elif text.startswith('üö® –ó–∞–≤–∏—Å—à–∏–µ'):
        show_stuck_requests(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        show_statistics(update, context)
    elif text == 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞':
        show_advanced_analytics(update, context)
    elif text == 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
        show_users_statistics(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏':
        update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
    elif text == 'üíæ –ë—ç–∫–∞–ø—ã':
        create_backup_command(update, context)
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å':
        show_enhanced_admin_panel(update, context)
    elif text == 'üìä Google Sheets':
        show_google_sheets_status(update, context)
    elif text == 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è':
        sync_with_sheets(update, context)
    elif text == 'üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è':
        show_gamification_leaderboard(update, context)
    elif text == 'üìä –ú–µ—Ç—Ä–∏–∫–∏':
        show_system_metrics(update, context)

def show_requests_by_status(update: Update, context: CallbackContext, status: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    requests = db.get_requests_by_filter(status) if db else []
    
    if not requests:
        update.message.reply_text(f"üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'")
        return
    
    text = f"üìã *–ó–∞—è–≤–∫–∏ ({status})*:\n\n"
    for req in requests[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥
        text += f"#{req['id']} - {req['name']} - {req['plot']}\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem'][:50]}...\n"
        text += f"–°–æ–∑–¥–∞–Ω–∞: {req['created_at'][:16]}\n\n"
    
    if len(requests) > 10:
        text += f"... –∏ –µ—â–µ {len(requests) - 10} –∑–∞—è–≤–æ–∫"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_urgent_requests(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    requests = db.get_urgent_requests() if db else []
    
    if not requests:
        update.message.reply_text("‚úÖ –ù–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –≤–Ω–∏–º–∞–Ω–∏—è")
        return
    
    text = "üî¥ *–°—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏:*\n\n"
    for req in requests:
        text += f"#{req['id']} - {req['name']} - {req['plot']}\n"
        text += f"–ü—Ä–æ–±–ª–µ–º–∞: {req['problem'][:50]}...\n"
        text += f"–°–æ–∑–¥–∞–Ω–∞: {req['created_at'][:16]}\n\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_stuck_requests(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞–≤–∏—Å—à–∏–µ –∑–∞—è–≤–∫–∏"""
    requests = db.get_stuck_requests(24) if db else []
    
    if not requests:
        update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å—à–∏—Ö –∑–∞—è–≤–æ–∫")
        return
    
    text = "üö® *–ó–∞–≤–∏—Å—à–∏–µ –∑–∞—è–≤–∫–∏ (>24 —á–∞—Å–æ–≤):*\n\n"
    for req in requests:
        text += f"#{req['id']} - {req['name']} - {req['plot']}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {req['status']}\n"
        text += f"–°–æ–∑–¥–∞–Ω–∞: {req['created_at'][:16]}\n\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_user_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.message.from_user.id
    stats = db.get_user_statistics(user_id) if db else {}
    
    text = "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n\n"
    text += f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats.get('total_requests', 0)}\n"
    text += f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats.get('completed', 0)}\n"
    text += f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats.get('in_progress', 0)}\n"
    text += f"üÜï –ù–æ–≤—ã—Ö: {stats.get('new', 0)}\n"
    
    if stats.get('first_request'):
        text += f"üìÖ –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞: {stats['first_request'][:10]}\n"
    if stats.get('last_request'):
        text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞—è–≤–∫–∞: {stats['last_request'][:10]}\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

def show_users_statistics(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)"""
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) as total_users, 
                       SUM(request_count) as total_requests,
                       AVG(request_count) as avg_requests
                FROM users
            ''')
            result = cursor.fetchone()
            
            text = "üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n\n"
            text += f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}\n"
            text += f"üì® –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {result[1]}\n"
            text += f"üìä –°—Ä–µ–¥–Ω–µ–µ –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {result[2]:.1f}\n"
            
            update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

def create_backup_command(update: Update, context: CallbackContext):
    """–°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    backup_path = BackupManager.create_backup()
    if backup_path:
        update.message.reply_text(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: `{backup_path}`", parse_mode=ParseMode.MARKDOWN)
    else:
        update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")

def show_google_sheets_status(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Google Sheets"""
    if sheets_manager and sheets_manager.is_connected:
        update.message.reply_text("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        update.message.reply_text("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

def sync_with_sheets(update: Update, context: CallbackContext):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å Google Sheets"""
    if sheets_manager and sheets_manager.is_connected:
        update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        update.message.reply_text("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    else:
        update.message.reply_text("‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")

def show_gamification_leaderboard(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    if not gamification_engine:
        update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        return
    
    leaderboard = gamification_engine.get_leaderboard(10)
    
    if not leaderboard:
        update.message.reply_text("üèÜ –¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ –ø—É—Å—Ç–∞")
        return
    
    text = "üèÖ *–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤:*\n\n"
    for i, (user_id, points, level) in enumerate(leaderboard, 1):
        text += f"{i}. –£—Ä–æ–≤–µ–Ω—å {level} - {points} –æ—á–∫–æ–≤ (ID: {user_id})\n"
    
    update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

# ==================== –ó–ê–î–ê–ù–ò–Ø –ü–û –†–ê–°–ü–ò–°–ê–ù–ò–Æ ====================

def backup_job(context: CallbackContext):
    """–ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞"""
    backup_path = BackupManager.create_backup()
    if backup_path:
        logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_path}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
        for admin_id in ADMIN_CHAT_IDS:
            try:
                context.bot.send_message(
                    admin_id,
                    f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: `{backup_path}`",
                    parse_mode=ParseMode.MARKDOWN
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—ç–∫–∞–ø–µ: {e}")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞")

def check_urgent_requests(context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ä–æ—á–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
    try:
        urgent_requests = db.get_urgent_requests() if db else []
        if urgent_requests:
            for admin_id in ADMIN_CHAT_IDS:
                try:
                    context.bot.send_message(
                        admin_id,
                        f"üî¥ –í–Ω–∏–º–∞–Ω–∏–µ! –ï—Å—Ç—å {len(urgent_requests)} —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                        parse_mode=ParseMode.MARKDOWN
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {e}")

def auto_sync_job(context: CallbackContext):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets"""
    if sheets_manager and sheets_manager.is_connected:
        try:
            # –õ–æ–≥–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")

def error_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    if update and update.message:
        update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup(enhanced_user_main_menu_keyboard, resize_keyboard=True)
        )

# ==================== –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú ====================

def enhanced_main() -> None:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏"""
    global notification_manager
    
    if not config.validate():
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞!")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
        initialize_all_systems()
        
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notification_manager = SmartNotificationManager(updater.bot, db)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        dispatcher.add_error_handler(error_handler)

        # –ó–∞–¥–∞–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        job_queue = updater.job_queue
        if job_queue:
            try:
                # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
                from datetime import time as dt_time
                backup_time = dt_time(hour=AUTO_BACKUP_HOUR, minute=AUTO_BACKUP_MINUTE)
                job_queue.run_daily(backup_job, time=backup_time)
                
                # –ï–∂–µ—á–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ—á–Ω—ã—Ö –∑–∞—è–≤–æ–∫
                job_queue.run_repeating(check_urgent_requests, interval=3600, first=10)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                if notification_manager:
                    job_queue.run_repeating(
                        lambda context: notification_manager.check_pending_reminders(),
                        interval=1800, first=300
                    )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
                if config.sync_to_sheets:
                    job_queue.run_repeating(auto_sync_job, interval=1800, first=60)
                
                logger.info("‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
        conv_handler = ConversationHandler(
            entry_points=[
                MessageHandler(Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É)$'), enhanced_start_request_creation),
            ],
            states={
                NAME: [MessageHandler(Filters.text & ~Filters.command, name)],
                PHONE: [MessageHandler(Filters.text & ~Filters.command, phone)],
                PLOT: [MessageHandler(Filters.text & ~Filters.command, plot)],
                SYSTEM_TYPE: [MessageHandler(Filters.text & ~Filters.command, system_type)],
                PROBLEM: [MessageHandler(Filters.text & ~Filters.command, problem)],
                URGENCY: [MessageHandler(Filters.text & ~Filters.command, urgency)],
                PHOTO: [
                    MessageHandler(Filters.text & ~Filters.command, photo),
                    MessageHandler(Filters.photo, photo)
                ],
            },
            fallbacks=[
                CommandHandler('cancel', cancel_request),
            ],
        )

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CommandHandler('start', show_main_menu))
        dispatcher.add_handler(CommandHandler('menu', show_main_menu))
        dispatcher.add_handler(CommandHandler('admin', show_enhanced_admin_panel))
        dispatcher.add_handler(CommandHandler('stats', show_statistics))
        dispatcher.add_handler(CommandHandler('analytics', show_advanced_analytics))
        dispatcher.add_handler(CommandHandler('metrics', show_system_metrics))
        dispatcher.add_handler(CommandHandler('gamification', show_gamification_stats))
        
        dispatcher.add_handler(conv_handler)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É)$'), 
            enhanced_confirm_request
        ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É|üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏|üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å|üéÆ –ò–≥—Ä–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|‚ÑπÔ∏è –û –±–æ—Ç–µ|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏)$'), 
            enhanced_handle_main_menu
        ))
        
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üÜï –ù–æ–≤—ã–µ|üîÑ –í —Ä–∞–±–æ—Ç–µ|‚è∞ –°—Ä–æ—á–Ω—ã–µ|üö® –ó–∞–≤–∏—Å—à–∏–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞|üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏|üíæ –ë—ç–∫–∞–ø—ã|üîÑ –û–±–Ω–æ–≤–∏—Ç—å|üìä Google Sheets|üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è|üéÆ –ì–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—è|üìä –ú–µ—Ç—Ä–∏–∫–∏)$'), 
            enhanced_handle_admin_menu
        ))
        
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        dispatcher.add_handler(CallbackQueryHandler(button_handler))
        dispatcher.add_handler(MessageHandler(Filters.voice, handle_voice_message))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –£–ª—É—á—à–µ–Ω–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å–æ –≤—Å–µ–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(ADMIN_CHAT_IDS)}")
        logger.info(f"üìä Google Sheets: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' if sheets_manager and sheets_manager.is_connected else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"ü§ñ AI –ø–æ–º–æ—â–Ω–∏–∫: {'‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' if ai_assistant else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω'}")
        logger.info(f"üåê –í–µ–±-–ø–∞–Ω–µ–ª—å: {'‚úÖ –ó–∞–ø—É—â–µ–Ω–∞' if FLASK_AVAILABLE else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    enhanced_main()
