import logging
import sqlite3
import os
import json
import csv
import gspread
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import (
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ParseMode,
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler,
    JobQueue,
)
from oauth2client.service_account import ServiceAccountCredentials
import threading
import time

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
ADMIN_CHAT_IDS = [5024165375]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ chat_id –∞–¥–º–∏–Ω–æ–≤
BOT_TOKEN = "7391146893:AAFDi7qQTWjscSeqNBueKlWXbaXK99NpnHw"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets
GOOGLE_SHEETS_CONFIG = {
    'enabled': True,  # –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    'spreadsheet_name': '–ó–∞—è–≤–∫–∏ —Å–ª–∞–±–æ—Ç–æ—á–Ω—ã—Ö —Å–∏—Å—Ç–µ–º',
    'credentials_file': 'credentials.json',  # –§–∞–π–ª —Å —É—á–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    'worksheet_name': '–ó–∞—è–≤–∫–∏',
    'sync_interval': 30,  # –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    'auto_sync': True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
NAME, PHONE, PLOT, PROBLEM, SYSTEM_TYPE, PHOTO, URGENCY, EDIT_CHOICE, EDIT_FIELD = range(9)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_PATH = "requests.db"

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ====================

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_main_menu_keyboard = [
    ['üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É', 'üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏']
]

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
admin_main_menu_keyboard = [
    ['üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏ (0)', 'üîÑ –í —Ä–∞–±–æ—Ç–µ (0)'],
    ['‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
    ['üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'üìä Excel –æ–Ω–ª–∞–π–Ω']
]

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
admin_management_keyboard = [
    ['üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏'],
    ['üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫', 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Excel'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω
excel_online_keyboard = [
    ['üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ', 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel'],
    ['‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å']
]

# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
create_request_keyboard = [
    ['üìπ –í–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ', 'üîê –°–ö–£–î'],
    ['üåê –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è —Å–µ—Ç—å', 'üö® –ü–æ–∂–∞—Ä–Ω–∞—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏—è'],
    ['üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —ç—Ç–∞–ø–æ–≤ –∑–∞—è–≤–∫–∏
confirm_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É']]
photo_keyboard = [['üì∑ –î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ', '‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ']]
urgency_keyboard = [
    ['üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)'],
    ['üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)'],
    ['üü¢ –ù–µ —Å—Ä–æ—á–Ω–æ (3 –¥–Ω—è)'],
    ['üîô –ù–∞–∑–∞–¥']
]
plot_type_keyboard = [
    ['üè≠ –§—Ä–µ–∑–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫', '‚öôÔ∏è –¢–æ–∫–∞—Ä–Ω—ã–π —É—á–∞—Å—Ç–æ–∫'],
    ['üî® –£—á–∞—Å—Ç–æ–∫ —à—Ç–∞–º–ø–æ–≤–∫–∏', 'üì¶ –î—Ä—É–≥–æ–π —É—á–∞—Å—Ç–æ–∫'],
    ['üîô –ù–∞–∑–∞–¥']
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_choice_keyboard = [
    ['üìõ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º—è', 'üìû –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω'],
    ['üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—á–∞—Å—Ç–æ–∫', 'üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É'],
    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', '‚è∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å'],
    ['üì∑ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ', '‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ']
]

edit_field_keyboard = [['üîô –ù–∞–∑–∞–¥ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é']]

# ==================== GOOGLE SHEETS –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ====================

class GoogleSheetsManager:
    def __init__(self, config: Dict):
        self.config = config
        self.sheet = None
        self.connected = False
        self.last_sync = None
        self.sync_in_progress = False
        self.init_sheets()

    def init_sheets(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets"""
        if not self.config['enabled']:
            logger.info("üìä Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
            return

        try:
            if not os.path.exists(self.config['credentials_file']):
                logger.error(f"‚ùå –§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö {self.config['credentials_file']} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            scope = ['https://spreadsheets.google.com/feeds', 
                    'https://www.googleapis.com/auth/drive']
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.config['credentials_file'], scope)
            client = gspread.authorize(creds)

            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            try:
                self.sheet = client.open(self.config['spreadsheet_name']).worksheet(
                    self.config['worksheet_name'])
            except gspread.SpreadsheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
                self.sheet = client.create(self.config['spreadsheet_name'])
                self.sheet = self.sheet.sheet1
                self.sheet.update_title(self.config['worksheet_name'])
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                self._create_headers()
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
                self.sheet = client.open(self.config['spreadsheet_name']).add_worksheet(
                    title=self.config['worksheet_name'], rows=1000, cols=20)
                self._create_headers()

            self.connected = True
            logger.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            self._start_background_sync()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            self.connected = False

    def _create_headers(self):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        headers = [
            'ID', '–°—Ç–∞—Ç—É—Å', '–°—Ä–æ—á–Ω–æ—Å—Ç—å', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–£—á–∞—Å—Ç–æ–∫',
            '–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã', '–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã', '–§–æ—Ç–æ', 'Username',
            '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è', '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'User ID'
        ]
        self.sheet.update('A1:O1', [headers])
        logger.info("‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ Google Sheets —Å–æ–∑–¥–∞–Ω—ã")

    def _start_background_sync(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é"""
        if not self.config['auto_sync']:
            return
            
        def sync_worker():
            while True:
                try:
                    if self.connected:
                        self.sync_all_requests()
                    time.sleep(self.config['sync_interval'])
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
                    time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

        thread = threading.Thread(target=sync_worker, daemon=True)
        thread.start()
        logger.info("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")

    def sync_all_requests(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å Google Sheets"""
        if not self.connected or self.sync_in_progress:
            return

        self.sync_in_progress = True
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã
            db = Database(DB_PATH)
            requests = db.get_all_requests_for_sync()
            
            if not requests:
                return

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = []
            for req in requests:
                row = [
                    req['id'],
                    req['status'],
                    req['urgency'],
                    req['name'],
                    req['phone'],
                    req['plot'],
                    req['system_type'],
                    req['problem'],
                    '‚úÖ' if req['photo'] else '‚ùå',
                    req.get('username', ''),
                    req.get('assigned_admin', ''),
                    req.get('admin_comment', ''),
                    req['created_at'],
                    req.get('updated_at', req['created_at']),
                    req['user_id']
                ]
                data.append(row)

            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
            self.sheet.clear()
            self._create_headers()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            if data:
                self.sheet.update(f'A2:O{len(data) + 1}', data)
            
            self.last_sync = datetime.now()
            logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(data)} –∑–∞—è–≤–æ–∫ —Å Google Sheets")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Google Sheets: {e}")
        finally:
            self.sync_in_progress = False

    def sync_single_request(self, request_data: Dict):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–Ω—É –∑–∞—è–≤–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        if not self.connected or not self.config['auto_sync']:
            return

        try:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ç–æ–π –∑–∞—è–≤–∫–æ–π
            all_records = self.sheet.get_all_records()
            row_index = None
            
            for i, record in enumerate(all_records, start=2):  # start=2 –ø–æ—Ç–æ–º—É —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ 1 —Å—Ç—Ä–æ–∫–µ
                if str(record.get('ID', '')) == str(request_data['id']):
                    row_index = i
                    break

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
            row_data = [
                request_data['id'],
                request_data['status'],
                request_data['urgency'],
                request_data['name'],
                request_data['phone'],
                request_data['plot'],
                request_data['system_type'],
                request_data['problem'],
                '‚úÖ' if request_data['photo'] else '‚ùå',
                request_data.get('username', ''),
                request_data.get('assigned_admin', ''),
                request_data.get('admin_comment', ''),
                request_data['created_at'],
                request_data.get('updated_at', request_data['created_at']),
                request_data['user_id']
            ]

            if row_index:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                self.sheet.update(f'A{row_index}:O{row_index}', [row_data])
                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_data['id']} –≤ Google Sheets")
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                self.sheet.append_row(row_data)
                logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{request_data['id']} –≤ Google Sheets")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{request_data['id']}: {e}")

    def get_sheet_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Google Sheets"""
        if not self.connected:
            return {'error': 'Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω'}
        
        try:
            all_records = self.sheet.get_all_records()
            
            stats = {
                'total_rows': len(all_records),
                'last_sync': self.last_sync.strftime('%d.%m.%Y %H:%M') if self.last_sync else '–ù–∏–∫–æ–≥–¥–∞',
                'new_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'new']),
                'in_progress_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'in_progress']),
                'completed_count': len([r for r in all_records if r.get('–°—Ç–∞—Ç—É—Å') == 'completed']),
                'urgent_count': len([r for r in all_records if '–°—Ä–æ—á–Ω–æ' in str(r.get('–°—Ä–æ—á–Ω–æ—Å—Ç—å', ''))])
            }
            return stats
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ Google Sheets: {e}")
            return {'error': str(e)}

    def get_sheet_url(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL Google Sheets"""
        if not self.connected:
            return "Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω"
        return f"https://docs.google.com/spreadsheets/d/{self.sheet.spreadsheet.id}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
sheets_manager = GoogleSheetsManager(GOOGLE_SHEETS_CONFIG)

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================

class Database:
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.init_db()

    def init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    name TEXT,
                    phone TEXT,
                    plot TEXT,
                    system_type TEXT,
                    problem TEXT,
                    photo TEXT,
                    urgency TEXT,
                    status TEXT DEFAULT 'new',
                    created_at TEXT,
                    updated_at TEXT,
                    admin_comment TEXT,
                    assigned_admin TEXT,
                    synced_with_sheets INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS statistics (
                    date TEXT PRIMARY KEY,
                    requests_count INTEGER DEFAULT 0,
                    completed_count INTEGER DEFAULT 0
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    created_at TEXT,
                    request_count INTEGER DEFAULT 0,
                    last_activity TEXT
                )
            ''')
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS sheets_sync (
                    last_sync_time TEXT,
                    total_synced INTEGER DEFAULT 0
                )
            ''')
            conn.commit()

    def save_request(self, user_data: Dict) -> int:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO requests 
                (user_id, username, name, phone, plot, system_type, problem, photo, urgency, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('name'),
                user_data.get('phone'),
                user_data.get('plot'),
                user_data.get('system_type'),
                user_data.get('problem'),
                user_data.get('photo'),
                user_data.get('urgency'),
                datetime.now().isoformat(),
                datetime.now().isoformat()
            ))
            request_id = cursor.lastrowid
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('''
                INSERT OR REPLACE INTO statistics (date, requests_count)
                VALUES (?, COALESCE((SELECT requests_count FROM statistics WHERE date = ?), 0) + 1)
            ''', (today, today))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            cursor.execute('''
                INSERT OR REPLACE INTO users (user_id, username, first_name, last_name, created_at, request_count, last_activity)
                VALUES (?, ?, ?, ?, ?, COALESCE((SELECT request_count FROM users WHERE user_id = ?), 0) + 1, ?)
            ''', (
                user_data.get('user_id'),
                user_data.get('username'),
                user_data.get('first_name', ''),
                user_data.get('last_name', ''),
                datetime.now().isoformat(),
                user_data.get('user_id'),
                datetime.now().isoformat()
            ))
            
            conn.commit()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            self._sync_request_to_sheets(request_id)
            
            return request_id

    def _sync_request_to_sheets(self, request_id: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫—É —Å Google Sheets"""
        try:
            request = self.get_request(request_id)
            if request:
                sheets_manager.sync_single_request(request)
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute('''
                        UPDATE requests SET synced_with_sheets = 1 WHERE id = ?
                    ''', (request_id,))
                    conn.commit()
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞—è–≤–∫–∏ #{request_id}: {e}")

    def update_request_status(self, request_id: int, status: str, admin_comment: str = None, assigned_admin: str = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if admin_comment and assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, assigned_admin = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, admin_comment, assigned_admin, datetime.now().isoformat(), request_id))
            elif admin_comment:
                cursor.execute('''
                    UPDATE requests SET status = ?, admin_comment = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, admin_comment, datetime.now().isoformat(), request_id))
            elif assigned_admin:
                cursor.execute('''
                    UPDATE requests SET status = ?, assigned_admin = ?, updated_at = ?, synced_with_sheets = 0
                    WHERE id = ?
                ''', (status, assigned_admin, datetime.now().isoformat(), request_id))
            else:
                cursor.execute('''
                    UPDATE requests SET status = ?, updated_at = ?, synced_with_sheets = 0 WHERE id = ?
                ''', (status, datetime.now().isoformat(), request_id))
            
            conn.commit()
            
            # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å Google Sheets –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            self._sync_request_to_sheets(request_id)

    def get_all_requests_for_sync(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests ORDER BY created_at DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_unsynced_requests(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests WHERE synced_with_sheets = 0 ORDER BY created_at DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    def get_user_requests(self, user_id: int, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            ''', (user_id, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_requests_by_filter(self, filter_type: str = 'all', limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ —Ñ–∏–ª—å—Ç—Ä—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            if filter_type == 'new':
                status_filter = "status = 'new'"
            elif filter_type == 'in_progress':
                status_filter = "status = 'in_progress'"
            elif filter_type == 'urgent':
                status_filter = "urgency LIKE '%–°—Ä–æ—á–Ω–æ%' AND status IN ('new', 'in_progress')"
            elif filter_type == 'completed':
                status_filter = "status = 'completed'"
            else:  # all active
                status_filter = "status IN ('new', 'in_progress')"
            
            cursor.execute(f'''
                SELECT * FROM requests 
                WHERE {status_filter}
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (limit,))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_request(self, request_id: int) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫—É –ø–æ ID"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT * FROM requests WHERE id = ?', (request_id,))
            row = cursor.fetchone()
            if row:
                columns = [column[0] for column in cursor.description]
                return dict(zip(columns, row))
            return {}

    def get_my_in_progress_requests(self, admin_name: str, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞—è–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—è–ª –≤ —Ä–∞–±–æ—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM requests 
                WHERE assigned_admin = ? AND status = 'in_progress'
                ORDER BY 
                    CASE urgency 
                        WHEN 'üî¥ –°—Ä–æ—á–Ω–æ (2 —á–∞—Å–∞)' THEN 1
                        WHEN 'üü° –°—Ä–µ–¥–Ω—è—è (—Å–µ–≥–æ–¥–Ω—è)' THEN 2
                        ELSE 3
                    END,
                    created_at DESC
                LIMIT ?
            ''', (admin_name, limit))
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT COUNT(*) FROM requests')
            total_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "new"')
            new_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "in_progress"')
            in_progress_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(*) FROM requests WHERE status = "completed"')
            completed_requests = cursor.fetchone()[0]
            
            cursor.execute('SELECT COUNT(DISTINCT user_id) FROM users')
            total_users = cursor.fetchone()[0]
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
            today = datetime.now().strftime('%Y-%m-%d')
            cursor.execute('SELECT requests_count FROM statistics WHERE date = ?', (today,))
            today_requests = cursor.fetchone()
            today_requests = today_requests[0] if today_requests else 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—á–µ—Ä–∞
            yesterday = (datetime.now() - timedelta(days=1)).strftime('%Y-%m-%d')
            cursor.execute('SELECT requests_count FROM statistics WHERE date = ?', (yesterday,))
            yesterday_requests = cursor.fetchone()
            yesterday_requests = yesterday_requests[0] if yesterday_requests else 0
            
            return {
                'total_requests': total_requests,
                'new_requests': new_requests,
                'in_progress_requests': in_progress_requests,
                'completed_requests': completed_requests,
                'total_users': total_users,
                'today_requests': today_requests,
                'yesterday_requests': yesterday_requests
            }

    def get_all_users(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT * FROM users 
                ORDER BY last_activity DESC
            ''')
            columns = [column[0] for column in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]

    def export_requests_to_csv(self, filename: str = "export_requests.csv") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞—è–≤–∫–∏ –≤ CSV —Ñ–∞–π–ª"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT id, user_id, username, name, phone, plot, system_type, problem, 
                       urgency, status, created_at, updated_at, assigned_admin, admin_comment
                FROM requests
                ORDER BY created_at DESC
            ''')
            
            import csv
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                writer.writerow([
                    'ID', 'User ID', 'Username', 'Name', 'Phone', 'Plot', 
                    'System Type', 'Problem', 'Urgency', 'Status', 
                    'Created At', 'Updated At', 'Assigned Admin', 'Admin Comment'
                ])
                # –î–∞–Ω–Ω—ã–µ
                for row in cursor.fetchall():
                    writer.writerow(row)
            
            return filename

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DB_PATH)

# ==================== –§–£–ù–ö–¶–ò–ò –î–õ–Ø EXCEL ONLINE ====================

def show_excel_online(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    excel_text = (
        "üìä *Excel Online - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π —Å Google Sheets\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ
    if sheets_manager.connected:
        stats = sheets_manager.get_sheet_stats()
        if 'error' not in stats:
            excel_text += (
                f"‚úÖ *Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω*\n"
                f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {stats['total_rows']}\n"
                f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {stats['last_sync']}\n"
                f"üìé –°—Å—ã–ª–∫–∞: {sheets_manager.get_sheet_url()}\n\n"
            )
        else:
            excel_text += f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}\n\n"
    else:
        excel_text += "‚ùå *Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω*\n\n"
    
    excel_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    update.message.reply_text(
        excel_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def sync_with_excel(update: Update, context: CallbackContext) -> None:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    update.message.reply_text(
        "üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...",
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def sync_thread():
        try:
            sheets_manager.sync_all_requests()
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text="‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
        except Exception as e:
            context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
    
    threading.Thread(target=sync_thread).start()

def show_excel_stats(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    stats = sheets_manager.get_sheet_stats()
    
    if 'error' in stats:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    stats_text = (
        "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Google Sheets*\n\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {stats['total_rows']}\n"
        f"üÜï –ù–æ–≤—ã—Ö: {stats['new_count']}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {stats['in_progress_count']}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['completed_count']}\n"
        f"üî¥ –°—Ä–æ—á–Ω—ã—Ö: {stats['urgent_count']}\n"
        f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {stats['last_sync']}\n\n"
        f"üìé *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞–±–ª–∏—Ü—É:*\n{sheets_manager.get_sheet_url()}"
    )
    
    update.message.reply_text(
        stats_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def show_excel_settings(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    settings_text = (
        "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Google Sheets*\n\n"
        f"üìä –í–∫–ª—é—á–µ–Ω–æ: {'‚úÖ –î–∞' if GOOGLE_SHEETS_CONFIG['enabled'] else '‚ùå –ù–µ—Ç'}\n"
        f"üìÅ –¢–∞–±–ª–∏—Ü–∞: {GOOGLE_SHEETS_CONFIG['spreadsheet_name']}\n"
        f"üìÑ –õ–∏—Å—Ç: {GOOGLE_SHEETS_CONFIG['worksheet_name']}\n"
        f"üîÑ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if GOOGLE_SHEETS_CONFIG['auto_sync'] else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}\n"
        f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {GOOGLE_SHEETS_CONFIG['sync_interval']} —Å–µ–∫.\n\n"
        f"üîó –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ' if sheets_manager.connected else '‚ùå –ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ'}\n"
    )
    
    if sheets_manager.connected:
        settings_text += f"üìé –°—Å—ã–ª–∫–∞: {sheets_manager.get_sheet_url()}"
    
    update.message.reply_text(
        settings_text,
        reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
        parse_mode=ParseMode.MARKDOWN
    )

def view_excel_data(update: Update, context: CallbackContext) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel"""
    user_id = update.message.from_user.id
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    if not sheets_manager.connected:
        update.message.reply_text(
            "‚ùå Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞—è–≤–æ–∫ –∏–∑ Google Sheets
        all_records = sheets_manager.sheet.get_all_records()
        recent_records = all_records[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
        
        if not recent_records:
            update.message.reply_text(
                "üì≠ –í Google Sheets –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
            )
            return
        
        excel_data_text = "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ Google Sheets:*\n\n"
        
        for i, record in enumerate(recent_records, 1):
            excel_data_text += (
                f"{i}. *#{record.get('ID', 'N/A')}* - {record.get('–°—Ç–∞—Ç—É—Å', 'N/A')}\n"
                f"   üë§ {record.get('–ò–º—è', 'N/A')} | {record.get('–¢–µ–ª–µ—Ñ–æ–Ω', 'N/A')}\n"
                f"   üìç {record.get('–£—á–∞—Å—Ç–æ–∫', 'N/A')} | {record.get('–¢–∏–ø —Å–∏—Å—Ç–µ–º—ã', 'N/A')}\n"
                f"   ‚è∞ {record.get('–°—Ä–æ—á–Ω–æ—Å—Ç—å', 'N/A')}\n\n"
            )
        
        excel_data_text += f"üìé –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {sheets_manager.get_sheet_url()}"
        
        update.message.reply_text(
            excel_data_text,
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True),
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}",
            reply_markup=ReplyKeyboardMarkup(excel_online_keyboard, resize_keyboard=True)
        )

# ==================== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

def handle_admin_menu(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    text = update.message.text
    user_id = update.message.from_user.id
    
    if user_id not in ADMIN_CHAT_IDS:
        return show_main_menu(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å —Å—á–µ—Ç—á–∏–∫–∞–º–∏
    if text.startswith('üÜï –ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏'):
        return show_requests_by_filter(update, context, 'new')
    elif text.startswith('üîÑ –í —Ä–∞–±–æ—Ç–µ'):
        return show_requests_by_filter(update, context, 'in_progress')
    elif text == '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏':
        return show_requests_by_filter(update, context, 'completed')
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        return show_statistics(update, context)
    elif text == 'üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ':
        return show_admin_management(update, context)
    elif text == 'üìä Excel –æ–Ω–ª–∞–π–Ω':
        return show_excel_online(update, context)
    elif text == 'üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        return start_broadcast(update, context)
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏':
        return update_counters(update, context)
    elif text == 'üìÅ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫':
        return export_requests(update, context)
    elif text == 'üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Excel':
        return sync_with_excel(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_admin_panel(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é Excel –æ–Ω–ª–∞–π–Ω
    elif text == 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ':
        return sync_with_excel(update, context)
    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel':
        return show_excel_stats(update, context)
    elif text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel':
        return show_excel_settings(update, context)
    elif text == 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel':
        return view_excel_data(update, context)
    elif text == 'üîô –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å':
        return show_admin_panel(update, context)

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫, –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏ —Ç.–¥.) ...

# –í —Ñ—É–Ω–∫—Ü–∏–∏ main –¥–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Excel –æ–Ω–ª–∞–π–Ω:
def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞"""
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω.")
        return
    
    try:
        updater = Updater(BOT_TOKEN)
        dispatcher = updater.dispatcher

        # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Excel –æ–Ω–ª–∞–π–Ω
        dispatcher.add_handler(MessageHandler(
            Filters.regex('^(üìä Excel –æ–Ω–ª–∞–π–Ω|üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ|üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Excel|‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Excel|üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel)$'), 
            handle_admin_menu
        ))

        # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ...

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Google Sheets!")
        logger.info(f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {ADMIN_CHAT_IDS}")
        if sheets_manager.connected:
            logger.info("üìä Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        
        updater.start_polling()
        updater.idle()

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
